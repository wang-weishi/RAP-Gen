[PATCH] return mayHaveSideEffects(n, true);
[PATCH] return mayHaveSideEffects(n, false);
[PATCH] return mustMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_NUMBER);
[PATCH] return matchResult(n, MAY_BE_STRING_PREDICATE);
[PATCH] return includesString(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayHaveSideEffects(n, ALL_RESULT_PREDICATE);
[PATCH] return tryMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return resultMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return containsNode(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayHaveSideEffects(n, recurse);
[PATCH] return mayHaveSideEffects(n, NO_RESULT_PREDICATE);
[PATCH] return mayHaveSideEffects(n);
[PATCH] return mustBeString(n, false);
[PATCH] return mayHaveSideEffects() &&!NodeUtil.isExpressionNode(n);
[PATCH] return mayHaveSideEffects() && mustBeString(n, false);
[PATCH] return containsType(n, Token.STRING);
[PATCH] return containsWhitespace(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayHaveSideEffects(n, 1);
[PATCH] return allResultsMatch(n, FALSE_BE_STRING_PREDICATE);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_TYPE);
[PATCH] return mayHaveSideEffects(n, getMayBeString_PREDICATE);
[PATCH] return mayHaveSideEffects(n, MIN_POSITIVE_INTEGER_NUMBER);
[PATCH] return mayHaveSideEffects(n, 0);
[PATCH] return mayHaveSideEffects(n, TRUE);
[PATCH] return mayHaveSideEffects(n, recursive);
[PATCH] return mayHaveSideEffects() &&!NodeUtil.isLiteralValue(n);
[PATCH] return mayHaveSideEffects() && canBeString(n, false);
[PATCH] return mayHaveSideEffects(n, FALSE);
[PATCH] return mayHaveSideEffects() && shouldBeString(n, false);
[PATCH] return mightHaveSideEffects() && mayHaveSideEffects(n);
[PATCH] return mayBeStringHelper(n, false);
[PATCH] return MUST_BE_STRING_PREDICATE.apply(n);
[PATCH] return MUST_BE_STRING_PREDICATE.evaluate(n);
[PATCH] return mayHaveSideEffects(n, parent.getFirstChild());
[PATCH] return mayHaveSideEffects(n, FALSE_RESULT_PREDICATE);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_STRING);
[PATCH] return mayHaveSideEffects(n, MIN_POSITIVE_INTEGER_TYPE);
[PATCH] return mayHaveSideEffectsMatch(n, false);
[PATCH] return mayBeString(n, false);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_LENGTH);
[PATCH] return mayBeStringRecursive(n, false);
[PATCH] return mayHaveSideEffects(n, ALLOWED_NOT_STRINGS);
[PATCH] return mayHaveSideEffects(n,!0);
[PATCH] return mayHaveSideEffects() && mustBeString(n, true);
[PATCH] return mayHaveSideEffects(n, 2);
[PATCH] return mayBeStringInTree(n, false);
[PATCH] return mayHaveSideEffects(n, null);
[PATCH] return mayHaveSideEffects(n, ISODateTimeFormat.stringParser());
[PATCH] return mayHaveSideEffects() && shouldBeString(n, recurse);
[PATCH] return mayHaveSideEffects(n, parent);
[PATCH] return mayHaveSideEffects() && canBeString(n, true);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_SIZE);
[PATCH] return mayBeStringHelper(n, recurse);
[PATCH] return mayHaveSideEffects(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] return mayHaveSideEffects() && shouldBeString(n, true);
[PATCH] return mayHaveSideEffects() && allResultsMatch(n, 1);
[PATCH] return mayBeStringHelper(n, true);
[PATCH] return mayHaveSideEffectsMatch(n, true);
[PATCH] return mayHaveSideEffects(n, TOP_EXPR_RESULT);
[PATCH] return mayHaveChildren() && allResultsMatch(n, false);
[PATCH] return mayHaveSideEffects() && mustBeString(n, recurse);
[PATCH] return mayHaveSideEffects(n, EMPTY);
[PATCH] return mayHaveChildren(n, false);
[PATCH] return mayHaveSideEffects(n, GOTO_EXPR_RESULT);
[PATCH] return mayHaveChildren() && allResultsMatch(n, 0);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_ARRAY);
[PATCH] return mustBeString(n, true);
[PATCH] return mayHaveSideEffects(n,recurse);
[PATCH] return mayHaveChildrenMatch(n, false);
[PATCH] return mayHaveSideEffects(n,!1);
[PATCH] return mayHaveSideEffects(n, ISODateTimeFormat.STRING);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_COUNT);
[PATCH] return mayHaveSideEffects(n, MIN_POSITIVE_INTEGER_STRING);
[PATCH] return mayHaveSideEffects(n, parent.getParent());
[PATCH] return mayBeStringTree(n, false);
[PATCH] return mayHaveSideEffects() && canBeString(n, recurse);
[PATCH] return mayBeStringAndReturn(n, false);
[PATCH] return mayContainString(n, false);
[PATCH] return mayBeStringHelper(n, 0);
[PATCH] return mayHaveToBeString(n, false);
[PATCH] return mayHaveSideEffects(n, level);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_VALUE);
[PATCH] return mayHaveSideEffects() && allResultsMatch(n, 0);
[PATCH] return doesStringMatch(n, false);
[PATCH] return MUST_BE_STRING_PREDICATE.test(n);
[PATCH] return mayHaveChildren() && allResultsMatch(n, 1);
[PATCH] return mayHaveSideEffects(n, MAX_POSITIVE_INTEGER_INTERVAL);
[PATCH] return mayHaveSideEffectsMatch(n, 0);
[PATCH] return checkForStringTree(n, false);
[PATCH] return mayHaveSideEffects(n, this);
[PATCH] return mayHaveSideEffects() && allResultsMatch(n, false);
[PATCH] return mayHaveSideEffects(n, ALLOWED_STRINGS);
[PATCH] return mayHaveSideEffects(n, Kit.true);
[PATCH] return mayBeStringRecursive(n, true);
[PATCH] return mayBeStringHelper(n, FALSE);
[PATCH] return mayHaveSideEffects(n, 3);
[PATCH] return mayHaveSideEffects();
[PATCH] return mayHaveSideEffects(n, Kit.TRUE);
[PATCH] return mayHaveSideEffects(n, FALSE_TYPE);
