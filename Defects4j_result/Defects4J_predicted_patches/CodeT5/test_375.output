[PATCH] Collections.sort(markers);
[PATCH] Collections.sort(markers, new RemoveDomainMarker(index));
[PATCH] Collections.sort(markers, new RemoveDomainMarker(marker));
[PATCH] Arrays.sort(markers);
[PATCH] Collections.sort(markers, new LayerComparator());
[PATCH] Collections.sort(markers, new LayerOrder());
[PATCH] Collections.sort(markers, new LayerPredicate(layer));
[PATCH] Collections.sort(markers, Layer.DESCENDING);
[PATCH] Collections.filter(markers, new RemoveDomainMarker(index));
[PATCH] Collections.sort(markers, new Integer(index));
[PATCH] Collections.sort(markers, new RemoveDomainMarker(layer));
[PATCH] Collections.filter(markers, new LayerPredicate(layer));
[PATCH] if(markers.contains(marker)) { return false; }
[PATCH] Collections.sort(markers, new LayerComparator(), true);
[PATCH] Validate.notNull(markers);
[PATCH] Collections.sort(markers, new LayerOrderComparator());
[PATCH] Collections.sort(markers, new Evaluator.DomainMarkerComparator());
[PATCH] Validate.notNull(marker);
[PATCH] Arrays.sort(markers, new RemoveDomainMarker(index));
[PATCH] Preconditions.checkState(!markers.contains(marker));
[PATCH] removeMarkerAnnotations(markers, marker.getClass());
[PATCH] Collections. sort(markers, new RemoveDomainMarker(index));
[PATCH] Collections.sort(markers, new CompareDomainMarker(marker));
[PATCH] Collections.sort(markers, new LayerComparator(), this);
[PATCH] Collections.filter(markers, new RemoveDomainMarker(marker));
[PATCH] Collections.sort(markers, new LayerComparator(), false);
[PATCH] Collections.filter(markers, new Marker(marker, true));
[PATCH] Collections.sort(markers, new MarkerComparator());
[PATCH] Collections.sort(markers, new DuplicateDomainMarker(marker));
[PATCH] Collections.remove(marker.getMarker(), index);
[PATCH] Collections.filter(markers, new LayerVisibilityPredicate(layer));
[PATCH] Collections.filter(markers, new Assignment(0, index));
[PATCH] if(markers.contains(marker)) { return true; }
[PATCH] Collections.sort(markers, new LayerPredicate(layers));
[PATCH] Collections.sort(markers, new RemoveDomainAnnotation(index));
[PATCH] Collections.sort(markers, new Predicate());
[PATCH] Collections.filter(markers, new LayerVisiblePredicate(layer));
[PATCH] Collections.filter(markers, new LayerPredicate(index));
[PATCH] Collections.sort(markers, new DomainMarkerComparator());
[PATCH] removeMarkerInsets(markers, marker.getPaint());
[PATCH] Collections.sort(markers, new FindDomainMarker(marker));
[PATCH] Collections.sort(markers, new Dimension(1, 1));
[PATCH] Collections.sort(markers, new SortOrder());
[PATCH] Collections.sort(markers, new UniquePredicate(index));
[PATCH] Collections.sort(markers, new LayerOrder());
[PATCH] Collections.remove(marker.getLabel(), layer);
[PATCH] Collections.sort(markers, new Evaluator.DomainComparator());
[PATCH] CollectionUtils.remove(markers, index);
[PATCH] Collections.filter(markers, new LayerConstraint(layer));
[PATCH] Collections.filter(markers, new LayerAnnotation(layer));
[PATCH] CollectionUtils.filter(markers, new LayerPredicate(layer));
[PATCH] Collections.sort(markers, new ValueComparator(), true);
[PATCH] Validate.isTrue(markers.contains(marker));
[PATCH] Preconditions.checkNotNull(markers);
[PATCH] Collections.sort(markers, new AxisAnnotation[index]);
[PATCH] Collections.sort(markers, new UniqueFilter(index));
[PATCH] Collections.remove(marker.getLabel(), markers);
[PATCH] removeMarkerInsets(markers, marker.getBounds());
[PATCH] removeDomainMarker(index, layer, markers);
[PATCH] Collections.remove(marker.getKey());
[PATCH] Collections.sort(markers, new LayerPredicate(index));
[PATCH] removeDomainMarker(index, marker);
[PATCH] Collections.remove(marker.getLabel(), marker);
[PATCH] Collections.sort(markers, new RemoveDomainMarker());
[PATCH] Collections.sort(markers, Marker.DESCENDING);
[PATCH] Collections.remove(marker.getItem(), index);
[PATCH] removeMarkerInsets(markers, index);
[PATCH] Collections.sort(markers, new LayerPredicate());
[PATCH] boolean removed =!markers.contains(marker);
[PATCH] Collections.sort(markers, new MarkerInfoComparator());
[PATCH] Collections.sort(markers, new Marker[index]);
[PATCH] Collections.sort(markers, new ValueComparator());
[PATCH] Preconditions.checkState(markers!= null);
[PATCH] Collections.sort(markers, new LineBorder());
[PATCH] markers =(ArrayList)markers.clone();
[PATCH] collection =(Collection)markers.clone();
[PATCH] Collections.sort(markers, new RenderOrder());
[PATCH] CollectionUtils.remove(markers, marker);
[PATCH] Collections.sort(markers, new LinkedList());
[PATCH] Collections.sort(markers, new Visitor());
[PATCH] Collections.sort(markers, new LayerOrder()));
[PATCH] Collections.sort(markers, new AssignmentComparator());
[PATCH] Collections. sort(markers);
[PATCH] Arrays.sort(markers, new LayerOrder());
[PATCH] removeDomainMarker(marker, layer);
[PATCH] Collections.sort(markers, new BuildOrder());
[PATCH] Collections.remove(marker.getPaint());
[PATCH] Collections.sort(markers, new Transformer());
[PATCH] debuggingInfo.removeMarker(marker);
[PATCH] Collections.sort(markers, new AxisRemoval());
[PATCH] Collections.remove(markers, marker);
[PATCH] Collections.reverse(markers);
[PATCH] Collections.sort(markers, new LayerMask());
[PATCH] Collections.remove(markers, index);
[PATCH] Collections.remove(marker.getItem());
[PATCH] Collections.unmodifiableList(markers);
[PATCH] Collections.remove(marker, layer);
[PATCH] Collections.emptyIfNull(markers);
[PATCH] removeMarker(marker, layer);
[PATCH] Preconditions.checkNotNull(marker);
