[PATCH] JoinedArray.setLength(joinedArray.length);
[PATCH] JoinedArray.append(type1, array2);
[PATCH] JoinedArray.setLength(array2.length);
[PATCH] JoinedArray.set(type1, joinedArray);
[PATCH] JoinedArray.addAll(joinedArray, array2);
[PATCH] JoinedArray.this.append(type1, array2);
[PATCH] JoinedArray.add(type1, array2);
[PATCH] JoinedArray.set(type1, array2);
[PATCH] JoinedArray.setLength(array1.length);
[PATCH] JoinedArray.putAll(joinedArray, array2);
[PATCH] JoinedArray.join(type1, array2);
[PATCH] JoinedArray.setCapacity(joinedArray.length);
[PATCH] JoinedArray.update(joinedArray, array2);
[PATCH] JoinedArray.setInstance(type1, joinedArray);
[PATCH] Array.newInstance(type1, array2.length);
[PATCH] joinedArray.append(type1);
[PATCH] JoinedArray.this.append(type1);
[PATCH] JoinedArray.prototype[type1].append(array2);
[PATCH] JoinedArray.prototype.append(type1, array2);
[PATCH] JoinedArray.addAll(joinedArray, array1);
[PATCH] JoinedArray.put(type1, array2);
[PATCH] JoinedArray.newInstance(type1, array2);
[PATCH] JoinedArray.add(joinedArray, type1);
[PATCH] JoinedArray.setInstance(type1, array2);
[PATCH] JoinedArray.join(joinedArray, array2);
[PATCH] JoinedArray.prototype.add(joinedArray, type1);
[PATCH] joinedArray[type1.getComponentType() ] = array2;
[PATCH] JoinedArray.setImpl(type1, joinedArray);
[PATCH] JoinedArray.setPrototypeBasedOn(type1);
[PATCH] JoinedArray.trimToSize(joinedArray.length);
[PATCH] JoinedArray.init(joinedArray, type1);
[PATCH] JoinedArray.class.getComponentType() = type1;
[PATCH] JoinedArray.prototype[type1].append(joinedArray);
[PATCH] JoinedArray.this.addAll(type1, array2);
[PATCH] JoinedArray.this.add(type1, array2);
[PATCH] JoinedArray.setAll(joinedArray, array2);
[PATCH] JoinedArray.putAll(joinedArray, array1);
[PATCH] JoinedArray.expand(joinedArray, array2);
[PATCH] JoinedArrayUtils.addAll(joinedArray, array2);
[PATCH] JoinedArray.setSubType(joinedArray, type1);
[PATCH] JoinedArray.class.getComponentType().append(type1);
[PATCH] JoinedArray.fill(joinedArray, array2);
[PATCH] joinedArray[type1.isArray()? 1 : 0];
[PATCH] JoinedArray.set(_class, type1);
[PATCH] JoinedArray.add(joinedArray, array2);
[PATCH] JoinedArray.replace(type1, array2);
[PATCH] JoinedArray.setLength(joinedArray.length + 1);
[PATCH] JoinedArray.update(joinedArray, array1.length);
[PATCH] JoinedArray.setComponentType(type1);
[PATCH] JoinedArray.prototypeWith(type1, array2);
[PATCH] JoinedArray.set(joinedArray, type1);
[PATCH] JoinedArray.merge(type1, array2);
[PATCH] JoinedArrayUtils.addAll(joinedArray, array1);
[PATCH] JoinedArray.setCollection(joinedArray, array2);
[PATCH] JoinedArray.filter(type1, array2);
[PATCH] JoinedArray.join(joinedArray, type1);
[PATCH] JoinedArray.join(joinedArray, array1.length);
[PATCH] JoinedArray.class.isAssignableFrom(type1);
[PATCH] JoinedArray.setArraysLength(joinedArray.length);
[PATCH] JoinedArray.call(type1, array2);
[PATCH] JoinedArray.set(type1, true);
[PATCH] JoinedArray.setCount(array2.length);
[PATCH] JoinedArray.extend(joinedArray, array2);
[PATCH] JoinedArray.set(type1, joinableArray);
[PATCH] joinedArray[array1.length] = array2;
[PATCH] JoinedArray.putAll(type1, array2);
[PATCH] joinedArray[array1.length] = type1;
[PATCH] Array.newInstance(type1, array2.getClass());
[PATCH] JoinedArray.class.getComponentType();
[PATCH] JoinedArray.setShape(type1, array2);
[PATCH] JoinedArray.setHighestSubtype(type1);
[PATCH] joinedArray.push(array2);
[PATCH] JoinedArray.setSuperTypes(joinedArray);
[PATCH] JoinedArray.setTypes(type1, array2);
[PATCH] JoinedArray.setTypes(type1);
[PATCH] JoinedArray.setDescriptor(type1.getName());
[PATCH] JoinedArray.apply(type1, array2);
[PATCH] joinedArray.setLength(array1.length);
[PATCH] JoinedArray.setPrototypeBasedOn(type1, array2);
[PATCH] JoinedArray.setCollection(joinedArray);
[PATCH] JoinedArray.set(type1, null);
[PATCH] JoinedArray.setType(type1);
[PATCH] JoinedArray.setCount(joinedArray.length);
[PATCH] JoinedArray.this.addAll(joinedArray);
[PATCH] super.addAll(joinedArray, array2);
[PATCH] JoinedArray.setConstant(type1);
[PATCH] joinedArray.append(array2);
[PATCH] JoinedArray.setPrototypeBasedOn(type1, true);
[PATCH] parent.replace(type1, joinedArray);
[PATCH] JoinedArray.setIndex(type1);
[PATCH] JoinedArray.setClass(type1);
[PATCH] JoinedArray.SET_TYPE(type1);
[PATCH] Arrays.fill(joinedArray, array1.length);
[PATCH] JoinedArray.setCapacity(joinedArray.length + 1);
[PATCH] JoinedArray.setTypes(array1);
[PATCH] JoinedArray.set(type1, JoinedArray.class);
[PATCH] JoinedArray.super.addAll(joinedArray);
[PATCH] joinedArray.push(type1);
[PATCH] joinedArray[type1.isArray()? 1 : 0;
[PATCH] JoinedArray.push(type1);
