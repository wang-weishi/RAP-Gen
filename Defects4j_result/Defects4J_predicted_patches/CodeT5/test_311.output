[PATCH] input.close();
[PATCH] input.flush();
[PATCH] input.skip(numToSkip);
[PATCH] freeBuffers(); input.close();
[PATCH] freeBuffers();
[PATCH] freeBuffers(); input.flush();
[PATCH] input.mark(numToSkip);
[PATCH] skip(input, numToSkip);
[PATCH] input.seek(numToSkip);
[PATCH] skip(available, numToSkip);
[PATCH] input.freeBuffers();
[PATCH] input.releaseBuffers();
[PATCH] input.rewind();
[PATCH] freeBuffers(); input.releaseBuffers();
[PATCH] input.discard(numToSkip);
[PATCH] in.skip(numToSkip);
[PATCH] flushBuffer(); input.close();
[PATCH] test(input, numToSkip);
[PATCH] input.seek(available);
[PATCH] input.close(); input = null;
[PATCH] numToSkip = input.skip();
[PATCH] input. skip(numToSkip);
[PATCH] input.skip(0);
[PATCH] available = input.read();
[PATCH] freeBuffers(); input.reset();
[PATCH] freeBuffers(); input.rewind();
[PATCH] closeBuffers(); input.close();
[PATCH] input.skip(available);
[PATCH] input.reset();
[PATCH] input.truncate(numToSkip);
[PATCH] input.close();
[PATCH] releaseBuffers(); input.close();
[PATCH] input.close(); return -1;
[PATCH] input.flush(); input.close();
[PATCH] input.clear();
[PATCH] checkCapacity(available);
[PATCH] close(); input.close();
[PATCH] discard(input, numToSkip);
[PATCH] throw new IOException("");
[PATCH] input.limit(available);
[PATCH] input.readLine();
[PATCH] flush(); input.close();
[PATCH] closeInput();
[PATCH] input.mark(available);
[PATCH] clearBuffer(); input.close();
[PATCH] finally { input.close(); }
[PATCH] freeBuffers(); input.shutdown();
[PATCH] input.readFully();
[PATCH] remaining += input.skip();
[PATCH] freeBuffers(); input.clear();
[PATCH] unshare(available);
[PATCH] available = input.size();
[PATCH] FreeBuffers.releaseBuffers();
[PATCH] input.shutdown();
[PATCH] available = input.skip();
[PATCH] finally { input.close();
[PATCH] input.flush();
[PATCH] checkBuffers(available);
[PATCH] skipBuffers(input);
[PATCH] input.seek(0);
[PATCH] available += input.skip();
[PATCH] available += input.read();
[PATCH] input.dispose();
[PATCH] input.discard(available);
[PATCH] releaseBuffers();
[PATCH] input.Close();
[PATCH] remaining -= numToSkip;
[PATCH] checkBuffer(available);
[PATCH] freeBuffers(available);
[PATCH] freeBuffers(input);
[PATCH] close();
[PATCH] input.ensureOpen();
[PATCH] input.detach();
[PATCH] input.stop();
[PATCH] input.interrupt();
[PATCH] checkBuffers(input);
[PATCH] input.lock();
[PATCH] closeBuffers();
[PATCH] unshare(input);
[PATCH] rewind();
[PATCH] input.skip();
[PATCH] checkOverflow(available);
[PATCH] input.finish();
[PATCH] checkLoaded(available);
[PATCH] input.sync();
[PATCH] input.wind();
[PATCH] input.open();
[PATCH] input.closed();
[PATCH] stream.close();
[PATCH] input. close();
[PATCH] input.truncate();
[PATCH] input.read();
[PATCH] flushBuffer();
[PATCH] input.cleanup();
[PATCH] input.unlock();
[PATCH] skip(available);
[PATCH] closeInputStream();
[PATCH] close input();
[PATCH] flushBuffers();
[PATCH] flush();
