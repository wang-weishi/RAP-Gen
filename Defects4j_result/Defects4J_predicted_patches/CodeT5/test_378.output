[PATCH] Collections.sort(markers);
[PATCH] Arrays.sort(markers);
[PATCH] removeMarkerAnnotations(markers, marker.getClass());
[PATCH] Collections.filter(markers, new LayerPredicate(layer));
[PATCH] Validate.notNull(markers);
[PATCH] Collections.sort(markers, Layer.DESCENDING);
[PATCH] Collections.remove(marker.getPaint(), index);
[PATCH] Preconditions.checkState(markers.contains(marker));
[PATCH] Collections.filter(markers, new DuplicatesPredicate());
[PATCH] Validate.notNull(marker);
[PATCH] Collections.filter(markers, Layer.RANGE);
[PATCH] Validate.isTrue(markers.size() == 1);
[PATCH] Collections.sort(markers, new LayerComparator());
[PATCH] removeMarkerInsets(markers, index);
[PATCH] collection =(Collection)markers.get(index);
[PATCH] Collections. sort(markers);
[PATCH] Collections.filter(markers, new LayerPredicate(index));
[PATCH] Collections.remove(marker.getBounds(), index);
[PATCH] CollectionUtils.remove(markers, index);
[PATCH] removeMarkerInsets(markers, marker.getBounds());
[PATCH] removeMarkerInsets(markers, marker.getPaint());
[PATCH] Collections.sort(markers, new LayerOrderComparator());
[PATCH] Preconditions.checkNotNull(markers);
[PATCH] Collections.filter(markers, new LayerConstraint(layer));
[PATCH] Validate.isTrue(markers.contains(marker));
[PATCH] Collections.filter(markers, new LayerAnnotation(layer));
[PATCH] collection =(Collection)markers.clone();
[PATCH] Collections.sort(markers, new LayerPredicate(layer));
[PATCH] Collections.sort(markers, new Integer(index));
[PATCH] Preconditions.checkState(!markers.isEmpty());
[PATCH] boolean removed =!markers.contains(marker);
[PATCH] Collections.sort(markers, new LayerOrder());
[PATCH] marker =(Marker)markers.get(index);
[PATCH] Collections.filter(markers, new LayerPredicate(0));
[PATCH] Collections.filter(markers, Layer.RANGE_MARKER);
[PATCH] index = Math.max(index, markers.size());
[PATCH] Collections.sort(markers, Marker.DESCENDING);
[PATCH] removeMarkerAnnotations(markers, marker.getAnnotation());
[PATCH] Marker[] annotations = Layer.getAnnotations(layer);
[PATCH] Collections.remove(markers, index);
[PATCH] Preconditions.checkState(markers!= null);
[PATCH] CollectionUtils.filter(markers, Layer.RANGE);
[PATCH] layer.removeMarker(marker);
[PATCH] Collections.filter(markers, new LayerCondition(layer));
[PATCH] Collections.sort(markers, new RemoveRangeMarker());
[PATCH] Preconditions.checkArgument(!markers.isEmpty());
[PATCH] Collections.remove(marker, layer);
[PATCH] markers =(ArrayList)markers.clone();
[PATCH] Collections.sort(markerList(markers));
[PATCH] removeMarkerAnnotations(markers, marker.getBounds());
[PATCH] Marker[] annotations = marker.getAnnotations();
[PATCH] Collections.reverse(markers);
[PATCH] CollectionUtils.remove(markers, marker);
[PATCH] Marker[] annotations = layer.getAnnotations();
[PATCH] removeMarkerAnnotations(markers, layer);
[PATCH] filterAnnotations(markers, marker.getClass());
[PATCH] Marker[] annotations = Layer.getAnnotation(layer);
[PATCH] Collections.filter(markers, marker.getPredicate());
[PATCH] Collections.sort(markers, new MarkerComparator());
[PATCH] debuggingInfo.removeMarker(marker);
[PATCH] filterBounds(markers, marker.getBounds());
[PATCH] Collections.sort(markers, Layer.RANGE);
[PATCH] map.remove(marker.getKey());
[PATCH] Collections.unmodifiableList(markers);
[PATCH] filterAnnotations(markers, marker.getAnnotation());
[PATCH] Collections.remove(marker.getKey());
[PATCH] Collections.remove(markers, marker);
[PATCH] MarkerUtil.removeMarker(markers, index);
[PATCH] index = adjustIndex(markers, index);
[PATCH] index = Validate.notNull(index);
[PATCH] removeMarker(marker, layer);
[PATCH] removeMarkerIfVisible(marker, layer);
[PATCH] removeMarkerAnnotations(markers, index);
[PATCH] index = calculateIndex(markers, index);
[PATCH] Collections.emptyIfNull(markers);
[PATCH] layer.removeMarker(index, marker);
[PATCH] Collections.sort(markers, new ValueComparator());
[PATCH] Collections.remove(marker.getPaint());
[PATCH] Collections.sort(markers);
[PATCH] removeMarkerInternal(marker, layer);
[PATCH] Collections.<Marker>sort(markers);
[PATCH] Validate.notEmpty(markers);
[PATCH] Sort.sort(markers);
[PATCH] removeMarkerInLegend(markers, index);
[PATCH] Preconditions.checkNotNull(marker);
[PATCH] validateRangeMarker(marker, markers);
[PATCH] sortAndRemove(markers, index);
[PATCH] removeMarkerAnnotation(marker, layer);
[PATCH] removeMarkerAnnotations(markers, marker);
[PATCH] Collections.checkNotNull(markers);
[PATCH] removeInsets(markers, index);
[PATCH] model.removeMarker(marker);
[PATCH] checkRangeMarker(marker, markers);
[PATCH] Collections.SortKeys(markers);
[PATCH] registry.removeMarker(marker);
[PATCH] markers.remove(marker);
[PATCH] invalidateRangeAnnotations(markers);
[PATCH] Collections.clear(markers);
[PATCH] Collections.unsort(markers);
[PATCH] CollectionsUtils.sort(markers);
