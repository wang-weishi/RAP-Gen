[PATCH] _tokenIncomplete = checkTokenIncomplete();
[PATCH] _tokenIncomplete = ctxt.isTokenIncomplete();
[PATCH] _tokenIncomplete = isTokenIncomplete(in);
[PATCH] _tokenIncomplete = _isTokenIncomplete(features);
[PATCH] _tokenIncomplete = _isTokenIncomplete(in);
[PATCH] _tokenIncomplete = _isTokenIncomplete(_inputStream);
[PATCH] _tokenIncomplete = isEnabled(Feature.EMPTY_TOKENS);
[PATCH] _tokenIncomplete = isEnabled(Feature.ACCEPT_TOKENS);
[PATCH] _tokenIncomplete = _isTokenIncomplete(start, end);
[PATCH] _tokenIncomplete =!isTokenIncomplete(in);
[PATCH] _tokenIncomplete =(end < start)? false : true;
[PATCH] _tokenIncomplete = isEnabled(Feature.ALLOW_TOKENS);
[PATCH] _tokenIncomplete =!ctxt.isTokenIncomplete();
[PATCH] _tokenIncomplete = isTokenIncomplete(start, end);
[PATCH] _currTokenIncomplete = ctxt.isTokenIncomplete();
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt, features);
[PATCH] _tokenIncomplete = in.isTokenIncomplete();
[PATCH] _tokenIncomplete = isTokenIncomplete(features);
[PATCH] _tokenIncomplete = Token.isTokenIncomplete(_inputStream);
[PATCH] _tokenIncomplete = isEnabled(Feature.TOKEN_Incomplete);
[PATCH] _tokenIncomplete = _isTokenIncomplete(out);
[PATCH] _parsingContext.setCurrentLength(0);
[PATCH] _tokenIncomplete = tc.isTokenIncomplete();
[PATCH] _parsingContext = ctxt.getConfig();
[PATCH] _tokenIncomplete = isEnabled(Feature.START_TOKENS);
[PATCH] _tokenIncomplete = JsonToken.isTokenIncomplete(_inputStream);
[PATCH] _parsingContext.setCurrentName(features);
[PATCH] _tokenIncomplete = tt.isTokenIncomplete();
[PATCH] _tokenIncomplete = compiler.getTokenIncomplete();
[PATCH] end = Math.min(end, inputBuffer.length);
[PATCH] _parsingContext.setCurrentLength(start, end);
[PATCH] _tokenIncomplete = crc.isTokenIncomplete();
[PATCH] _tokenIncomplete = isEnabled(Feature.INVALID_TOKENS);
[PATCH] _tokenIncomplete = _isTokenIncomplete();
[PATCH] _tokenIncomplete = isEnabled(Feature.READ_ERROR);
[PATCH] _tokenIncomplete = computeTokenIncomplete(ctxt, features);
[PATCH] _parsingContext = ctxt.getParser();
[PATCH] _tokenIncomplete = isEnabled(Feature.TOKEN_INCOMPLETE);
[PATCH] _tokenIncomplete = clearTokenIncomplete();
[PATCH] _tokenIncomplete = isEnabled(Feature.TokenIncomplete);
[PATCH] if(bufferRecyclable){ if(_tokenIncomplete){
[PATCH] _tokenIncomplete = Token.isTokenIncomplete();
[PATCH] _parsingContext = ctxt.getRootContext();
[PATCH] _tokenIncomplete = isEnabled(Feature.TOKEN_EMPTY);
[PATCH] _tokenIncomplete = _isTokenIncomplete(end);
[PATCH] _textBuffer = ctxt.allocTokenBuffer();
[PATCH] _tokenIncomplete = streamTokenIncomplete(ctxt, features);
[PATCH] _tokenIncomplete = isEnabled(Feature.TOKEN_INVALID);
[PATCH] _tokenIncomplete = isTokenIncomplete(_inputStream);
[PATCH] _tokenIncomplete = false;
[PATCH] _parsingContext.setCurrentTokenIncomplete(false);
[PATCH] _tokenIncomplete = _isTokenIncomplete(0);
[PATCH] _tokenIncomplete = readTokenIncomplete(ctxt, features);
[PATCH] _tokenIncomplete = isTokenIncomplete(out);
[PATCH] _parsingContext = IOContext.createRootContext();
[PATCH] _tokenIncomplete = features & Token.isTokenIncomplete();
[PATCH] if(bufferRecyclable){ }
[PATCH] _tokenIncomplete = isEnabled(Feature.READ_UNKNOWN);
[PATCH] _tokenIncomplete = resetToken(ctxt, features);
[PATCH] _dateTime = ctxt.getDateTime();
[PATCH] _tokenIncomplete = isTokenIncomplete(fc.getCodec());
[PATCH] _tokenIncomplete = isTokenIncomplete(jp.getCodec());
[PATCH] _tokenIncomplete =!isTokenIncomplete(features);
[PATCH] _tokenIncomplete = checkForTokenIncomplete();
[PATCH] _parsingContext.setCurrentLength(start);
[PATCH] _tokenIncomplete = maybeTokenIncomplete();
[PATCH] _tokenIncomplete = ctxt.inTokenIncomplete();
[PATCH] _tokenIncomplete = Token.isTokenIncomplete(in);
[PATCH] _tokenIncomplete = _isTokenIncomplete(c);
[PATCH] _tokenIncomplete = tokenIncomplete(_inputStream);
[PATCH] _tokenIncomplete = Token.END_DOCUMENT;
[PATCH] _tokenIncomplete = resetTokenIncomplete();
[PATCH] _tokenIncomplete = tokenIncomplete;
[PATCH] _tokenIncomplete = disableTokenIncomplete();
[PATCH] _tokenIncomplete = initTokenIncomplete(false);
[PATCH] _currTokenIncomplete = false;
[PATCH] _tokenIncomplete = isTokenIncomplete(end);
[PATCH] _tokenIncomplete = initTokenIncomplete();
[PATCH] _tokenIncomplete = _isTokenIncomplete(st);
[PATCH] _tokenIncomplete = _isTokenIncomplete(fc);
[PATCH] _tokenIncomplete = isTokenIncomplete();
[PATCH] _tokenIncomplete = resetToken();
[PATCH] _tokenIncomplete = verifyTokenIncomplete();
[PATCH] _tokenIncomplete = reset();
[PATCH] _decodeBase64(true);
[PATCH] _tokenIncomplete = needsTokenIncomplete();
[PATCH] _tokenIncomplete = tokenIncomplete();
[PATCH] _tokenIncomplete = generateTokenIncomplete();
[PATCH] _tokenIncomplete = invalidated();
[PATCH] _tokenIncomplete = getTokenIncomplete();
[PATCH] _tokenIncomplete = isEmpty();
[PATCH] _tokenIncomplete = recalculateToken();
[PATCH] _tokenIncomplete = skipWS();
[PATCH] _tokenIncomplete = reportError();
[PATCH] _tokenIncomplete = true;
[PATCH] _advanceLookAhead();
[PATCH] _tokenIncomplete = nextToken();
[PATCH] _tokenIncomplete = 0;
[PATCH] _tokenIncomplete = invalidate();
[PATCH] initTables(1);
