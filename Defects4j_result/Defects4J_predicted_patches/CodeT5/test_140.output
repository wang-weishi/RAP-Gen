[PATCH] ensureTyped(t, n, STRING_TYPE);
[PATCH] ensureTyped(t, n, BOOLEAN_TYPE);
[PATCH] ensureTyped(t, n, NUMBER_TYPE);
[PATCH] n.putBooleanProp(Node.IS_STRING_PROP, true);
[PATCH] n.putBooleanProp(Node.QUOTED_PROP, true);
[PATCH] typeRegistry.createUnionType(STRING_TYPE, NUMBER_TYPE);
[PATCH] parent.replaceChild(n, Node.newString(Token.STRING));
[PATCH] n.setJSType(getNativeType(STRING_TYPE));
[PATCH] ensureTyped(t, n.getFirstChild(), STRING_TYPE);
[PATCH] t.reportCodeChange(); ensureTyped(t, n, STRING_TYPE);
[PATCH] ensureTyped(t, n, STRING_LITERAL_TYPE);
[PATCH] parent.replaceChild(n, Node.newString(Token.EMPTY));
[PATCH] n.putBooleanProp(Node.BRACELESS_STRING, true);
[PATCH] writeTyped(t, n.getString(), BOOLEAN_TYPE);
[PATCH] parent.replaceChild(n, Node.newString(STRING_SEPARATOR));
[PATCH] ensureTyped(t, n, REGEXP_TYPE);
[PATCH] ensureTyped(t, n, STRING_REFERENCE_TYPE);
[PATCH] encodeTyped(t, n.getString(), BOOLEAN_TYPE);
[PATCH] validateName(t, n.getString(), BOOLEAN_TYPE);
[PATCH] ensureTyped(t, n, DATE_TYPE);
[PATCH] ensureTyped(t, n, REFERENCE_TYPE);
[PATCH] ensureTyped(t, n, STRING_VALUE_OR_OBJECT_TYPE);
[PATCH] ensureTyped(t, n.getLastChild(), STRING_TYPE);
[PATCH] ensureTyped(t, n, STRING_LITERAL_VALUE);
[PATCH] typeRegistry.createUnionType(STRING_TYPE, STRING_TYPE);
[PATCH] parent.replaceChild(n, Node.newString(STRING_TYPE));
[PATCH] ensureTyped(t, n, CHAR_TYPE);
[PATCH] ensureTyped(t, n, REFERENCED_STRING_TYPE);
[PATCH] ensureTyped(t, n.getString(), BOOLEAN_TYPE);
[PATCH] n.ensureTyped(t, n, BOOLEAN_TYPE);
[PATCH] writeType(t, n.getString(), BOOLEAN_TYPE);
[PATCH] ensureTyped(t, n, OBJECT_TYPE);
[PATCH] parent.replaceChild(n, new Node(Token.STRING));
[PATCH] parseType(t, n.getString(), BOOLEAN_TYPE);
[PATCH] parent.replaceChild(n, Node.newString(Token.NULL));
[PATCH] typeRegistry.declareType(STRING_TYPE, n.getString());
[PATCH] ensureTyped(t, n, TEXT_TYPE);
[PATCH] visitString(t, n);
[PATCH] n.ensureTyped(t, n, STRING_TYPE);
[PATCH] checkLenient(); ensureTyped(t, n, BOOLEAN_TYPE);
[PATCH] ensureTyped(t, n, REFERENCE_ERROR);
[PATCH] ensureTyped(t, n, STRING_PROP);
[PATCH] writeTyped(t, n, STRING_TYPE);
[PATCH] ensureTyped(t, n, REFERENCED_TYPE);
[PATCH] ensureTyped(t, n, HASH_TYPE);
[PATCH] ensureTyped(t, n, CHARACTER_TYPE);
[PATCH] typeRegistry.createUnionType(STRING_TYPE, BOOLEAN_TYPE);
[PATCH] ensureTyped(t, n, STRING_VAR_TYPE);
[PATCH] ensureTyped(t, n, STRING_VALUE_TYPE);
[PATCH] checkLenient(); ensureTyped(t, n, STRING_TYPE);
[PATCH] ensureTyped(t, n, STRING_LENGTH_TYPE);
[PATCH] makeTyped(t, n, STRING_TYPE);
[PATCH] t.reportCodeChange();
[PATCH] ensureTyped(t, n, REFERENCE_STRING_TYPE);
[PATCH] checkTyped(t, n, STRING_TYPE);
[PATCH] (new Node(Token.NAME, n.getString()));
[PATCH] ensureTyped(t, n, STRING_STATE_TYPE);
[PATCH] ensureTyped(t, n, STRING_CHAR_TYPE);
[PATCH] ensureTyped(t, n, VALUE_TYPE);
[PATCH] validateTyped(t, n, STRING_TYPE);
[PATCH] (new Node(Token.STRING, n.getString()));
[PATCH] ensureTyped(t, n, REFERENCE_NAME);
[PATCH] ensureTyped(t, n, HEX_TYPE);
[PATCH] ensureTyped(t, n, COLLECTION_TYPE);
[PATCH] processStringNode(t, n);
[PATCH] super.visit(t, n);
[PATCH] ensureTyped(t, n, PROPERTY_TYPE);
[PATCH] ensureTyped(t, n, STRING_LEN);
[PATCH] ensureTyped(t, n, URI_TYPE);
[PATCH] ensureTyped(t, n, NULL_TYPE);
[PATCH] ensureTyped(t, n, INTEGER_TYPE);
[PATCH] ensureTyped(t, n, NAME_TYPE);
[PATCH] buf.append(n.getString());
[PATCH] maybeAddAutoboxes(t, n);
[PATCH] this.string = n.getString();
[PATCH] escapeString(t, n.getString());
[PATCH] visitStringNode(t, n);
[PATCH] checkLenient(t, n);
[PATCH] escape(t, n.getString());
[PATCH] this.key = n.getString();
[PATCH] applyCommonRestriction(t, n);
[PATCH] escapeString(n.getString());
[PATCH] addTypedFromObject(t, n);
[PATCH] key = n.getString();
[PATCH] maybeMarkCandidate(t, n);
[PATCH] ensureTyped(t, n);
[PATCH] validateType(t, n);
[PATCH] startType(t, n);
[PATCH] generateTypes(t, n);
[PATCH] appendString(t, n);
[PATCH] validateString(t, n);
[PATCH] toStringNode(n);
[PATCH] checkLenient();
[PATCH] endObject();
[PATCH] ;
[PATCH] return;
);
;

*/
