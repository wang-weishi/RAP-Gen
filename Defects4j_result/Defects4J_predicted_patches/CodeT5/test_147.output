[PATCH] Preconditions.checkState(functionNode.isFunctionDeclaration());
[PATCH] Preconditions.checkState(compiler.isNormalized());
[PATCH] Preconditions.checkState(functionNode.isConstructor());
[PATCH] Preconditions.checkState(functionNode.hasOneChild());
[PATCH] Preconditions.checkState(functionNode.hasChildren());
[PATCH] Preconditions.checkState(functionNode.isGeneric());
[PATCH] compiler.report(JSError.MISSING_FUNCTION_NAME);
[PATCH] Preconditions.checkState(functionNode.hasArg());
[PATCH] Preconditions.checkState(functionNode.isNew());
[PATCH] Preconditions.checkState(functionNode.hasFunctionName());
[PATCH] Preconditions.checkArgument(functionNode.isFunctionDeclaration());
[PATCH] reportError("msg.unnamed.function");
[PATCH] Preconditions.checkState(functionNode.isVarDeclaration());
[PATCH] Preconditions.checkState(compiler.isIdeMode());
[PATCH] sourceName =(String)functionNode.getSourceName();
[PATCH] compiler.report(JSError.BAD_FUNCTION_NAME);
[PATCH] Preconditions.checkState(functionNode.hasOptionalArg());
[PATCH] Preconditions.checkState(functionNode.isFunctionType());
[PATCH] Preconditions.checkState(functionNode.isGetProp());
[PATCH] Preconditions.checkState(functionNode.hasParameter());
[PATCH] Preconditions.checkState(functionNode.hasVarDeclaration());
[PATCH] compiler.report(JSError.make(Token.NULL));
[PATCH] Preconditions.checkState(functionNode.isGenericDeclaration());
[PATCH] Preconditions.checkArgument(!functionNode.isConstructor());
[PATCH] compiler.report(JSError.make(Token.EMPTY));
[PATCH] functionNode.setFunctionName(null);
[PATCH] Preconditions.checkState(!functionNode.isNew());
[PATCH] Preconditions.checkState(functionNode.hasFunctionDeclaration());
[PATCH] Preconditions.checkState(!functionNode.isConstructor());
[PATCH] Preconditions.checkState(functionNode.isGenericCall());
[PATCH] name = new Name(functionNode.getFunctionName());
[PATCH] Preconditions.checkState(functionNode.hasExistingName());
[PATCH] Preconditions.checkState(functionNode.isNoName());
[PATCH] Preconditions.checkState(functionNode.isFirstChild());
[PATCH] Preconditions.checkNotNull(functionNode.getFunctionName());
[PATCH] Preconditions.checkState(functionNode.hasFunctionDefinition());
[PATCH] Preconditions.checkState(!functionNode.hasChildren());
[PATCH] compiler.report(JSError.make(Token.FUNCTION));
[PATCH] Preconditions.checkState(functionNode.isNestedFunction());
[PATCH] Preconditions.checkState(functionNode.hasFunctionName());
[PATCH] Preconditions.checkArgument(!functionNode.isNew());
[PATCH] if(functionNode.isConstructor()){ return null; }
[PATCH] Preconditions.checkState(functionNode.hasReferenceName());
[PATCH] Preconditions.checkState(functionNode.isParameterizedFunction());
[PATCH] Preconditions.checkArgument(compiler.isNormalized());
[PATCH] Preconditions.checkState(functionNode.hasFirstChild());
[PATCH] Preconditions.checkState(functionNode.hasReferences());
[PATCH] Preconditions.checkState(functionNode.isUnnamed());
[PATCH] Preconditions.checkState(functionNode.isFunctionName());
[PATCH] Preconditions.checkState(functionNode.hasFunctionParameter());
[PATCH] Preconditions.checkState(functionNode.isOptionalArg());
[PATCH] fileLevelJsDocBuilder.setSourceName(sourceName);
[PATCH] compiler.report(JSError.make(Token.PRIVATE));
[PATCH] compiler.report(JSError.make(Token.ERROR));
[PATCH] Preconditions.checkState(functionNode.isNewFunction());
[PATCH] inputName = functionNode.getFunctionName();
[PATCH] lineno = functionNode.getLineno();
[PATCH] Preconditions.checkArgument(functionNode.isConstructor());
[PATCH] int lineno = functionNode.getLineno();
[PATCH] Preconditions.checkState(functionNode.hasArgument());
[PATCH] compiler.reportError("msg.unnamed.function");
[PATCH] Preconditions.checkState(Token.FUNCTION);
[PATCH] checkState(!functionNode.isFunctionDeclaration());
[PATCH] checkState(functionNode.isFunctionDeclaration());
[PATCH] Preconditions.checkArgument(Token.FUNCTION);
[PATCH] sourceName = functionNode.getSourceName();
[PATCH] Preconditions.checkNotNull(functionNode);
[PATCH] token = functionNode.getFirstChild();
[PATCH] inputNames.add("Unnamed");
[PATCH] createName(functionNode.getFunctionName());
[PATCH] functionNode.setJSDocInfo(null);
[PATCH] name = functionNode.getFunctionName();
[PATCH] functionNode.setFunctionName(null);
[PATCH] checkState(functionNode.isConstructor());
[PATCH] inputNames.add("Unnamed function");
[PATCH] fnName = functionNode.getFunctionName();
[PATCH] varName = functionNode.getFunctionName();
[PATCH] reportError("msg.unknown.function");
[PATCH] processUnnamedFunction(functionNode);
[PATCH] p = functionNode.getFunctionName();
[PATCH] checkState(compiler.isNormalized());
[PATCH] token = functionNode.getFunctionName();
[PATCH] errorReporter.missingName();
[PATCH] handleUnnamedFunction(functionNode);
[PATCH] stringNodes.add(functionNode);
[PATCH] errorReporter.unknownFunctionName();
[PATCH] parseVarArgs(functionNode);
[PATCH] addToken(Token.FUNCTION);
[PATCH] errorReporter.unknownFunctionType();
[PATCH] precedence(Token.FUNCTION);
[PATCH] processUnknownFunction(functionNode);
[PATCH] inputStream.clearInput();
[PATCH] inputStream.close();
[PATCH] inputStream.reset();
[PATCH] inputStream.flush();
[PATCH] name = new Name();
[PATCH] codeBug();
[PATCH] buildName();
);
;
