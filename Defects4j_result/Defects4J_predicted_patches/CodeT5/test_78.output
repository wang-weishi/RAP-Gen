[PATCH] start = Math.max(start, searchList[i].length());
[PATCH] start = Math.min(start, searchList[i].length());
[PATCH] start = Math.max(start, searchList[i].length() + 1);
[PATCH] start += searchList[i].length();
[PATCH] searchList[i].getChars(start, start + 1, replacementList[i]);
[PATCH] start = Math.max(searchList[i].length(), start + 1);
[PATCH] start = Math.max(start, start + searchList[i].length());
[PATCH] start = Math.min(start, searchList[i].length() + 1);
[PATCH] start = Math.min(start + 1, searchList[i].length());
[PATCH] start = Math.max(start, i + 1);
[PATCH] start = Math.min(searchList[i].length(), start + 1);
[PATCH] start = Math.max(start, offset + searchList[i].length());
[PATCH] start = Math.max(start, searchList[i].length())+ 1;
[PATCH] start = Math.max(searchList[i].length() + 1, start);
[PATCH] searchList[i].append(replacementList[i]); start = i + 1;
[PATCH] searchList[i].getChars(start, start+1, replacementList[i]);
[PATCH] start = Math.max(start, position2charno(searchList[i]);
[PATCH] start = Math.max(start + 1, searchList[i].length());
[PATCH] searchList[i].delete(start, start + 1); start = i + 1;
[PATCH] start = searchList[i].length();
[PATCH] start = doReplace(searchList[i], start + 1, replacementList[i]);
[PATCH] start = Math.max(start, index + 1);
[PATCH] searchList[i].getChars(start, start + 2, replacementList[i]);
[PATCH] searchList[i].getChars(start, start + i, replacementList[i]);
[PATCH] start = Math.max(start, start + 3 * searchList[i].length());
[PATCH] start = Math.max(searchList[i].length(), start);
[PATCH] start = Math.min(start, searchList[i].length())+ 1;
[PATCH] start = Math.max(start, pos - searchList[i].length());
[PATCH] start = Math.max(start, searchList[i].length() - 1);
[PATCH] replaceImpl(searchList[i], replacementList[i]); start = i + 1;
[PATCH] searchList[i].delete(start, start + 3); start = i + 1;
[PATCH] searchList[i].getChars(start, start + 3, replacementList[i]);
[PATCH] start = Math.max(start,searchList[i].length());
[PATCH] start = Math.max(start, i * searchList[i].length());
[PATCH] start = Math.min(start, searchList[i]);
[PATCH] start =Math.max(start, searchList[i].length());
[PATCH] start = Math.max(start, searchList[i].length();
[PATCH] searchList[i].insert(start, replacementList[i]); start = ++start;
[PATCH] searchList[i].delete(start, i); start = i + 1;
[PATCH] start = Math.min(start, start + searchList[i].length());
[PATCH] searchList[i].getChars(start, start + 13, replacementList[i]);
[PATCH] searchList[i].getChars(start, start + 7, replacementList[i]);
[PATCH] start = Math.min(start, i + 1);
[PATCH] start = Math.max(start, startIndex + searchList[i].length());
[PATCH] start = Math.min(searchList[i].length() + 1, start);
[PATCH] start =Math.min(start, searchList[i].length());
[PATCH] searchList[i].trimTo(start); start = i + 1;
[PATCH] start = Math.max(start, start + replacementList[i].length());
[PATCH] start = Math.max(searchStart, searchList[i].length());
[PATCH] start = searchList[i].indexOf(replacementList[i]);
[PATCH] start = start + searchList[i].length();
[PATCH] searchList[i].getChars(start, start + repeat, replacementList[i]);
[PATCH] start = Math.max(start, compare(searchList[i], start + 1));
[PATCH] start =(int)searchList[i].charAt(start);
[PATCH] searchList[i].getChars(start, start + 8, replacementList[i]);
[PATCH] buffer[start++] = searchList[i].charAt(0);
[PATCH] start = Math.max(start, searchList[i].length())- 1;
[PATCH] start = Math. max(start, searchList[i].length());
[PATCH] searchList[i].getChars(start, start + 10, replacementList[i]);
[PATCH] start = Math.max(start, replaceList[i].length());
[PATCH] start = Math.min(searchList[i].length(), start);
[PATCH] searchList[i].getChars(start, start + 1, searchList[i]);
[PATCH] start = Math.max(start, searchList[i].length()); continue;
[PATCH] searchList[i].getChars(start, start + 4, replacementList[i]);
[PATCH] start = Math.min(start,searchList[i].length());
[PATCH] searchList[i].getChars(start, start + 5, replacementList[i]);
[PATCH] start = replace(searchList[i], start, replacementList[i]);
[PATCH] start = super.compare(searchList[i], start + 1);
[PATCH] start = Math.max(start, searchList[i]);
[PATCH] start = Math.max(start, compare(searchList[i], 0));
[PATCH] text.append(searchList[i]); start = i + 1;
[PATCH] buf.append(searchList[i]); start = i + 1;
[PATCH] start = Math.max(start, searchList[i].length());
[PATCH] start = super.compareTo(searchList[i]);
[PATCH] start = Math.min(start, searchList[i].length();
[PATCH] start = i + searchList[i].length();
[PATCH] sb.append(searchList[i]); start = i + 1;
[PATCH] start = text.indexOf(searchList[i]);
[PATCH] start = Math.max(start, searchIndex + 1);
[PATCH] searchList[i].charAt(start++);
[PATCH] start = Math.max(start, searchStart + 1);
[PATCH] increase += searchList[i].length();
[PATCH] start = offset + searchList[i].length();
[PATCH] start = Math.max(start, start + 1);
[PATCH] start = Math.min(start, index + 1);
[PATCH] start = position2charno(searchList[i]);
[PATCH] start = super.indexOf(searchList[i]);
[PATCH] start = indexOf(searchList[i], start + 1);
[PATCH] searchList[i].substring(start, start + 3);
[PATCH] start = Math.max(start, offset + 1);
[PATCH] start = Math.max(start, start + 3);
[PATCH] start = indexOf(searchList[i], start);
[PATCH] start = appendSeparator(searchList[i]);
[PATCH] int pos = searchList[i].length();
[PATCH] start = super.compare(searchList[i], start);
[PATCH] start = replace(searchList[i], start + 1);
[PATCH] start = Math.max(start, pos + 1);
[PATCH] start = Math.max(start, startIndex + 1);
[PATCH] start = index + searchList[i].length();
[PATCH] start = searchList[i].indexOf(EMPTY);
