[PATCH] super();
[PATCH] Preconditions.checkNotNull(checksum);
[PATCH] super(in.available());
[PATCH] super(in.readLine());
[PATCH] check(in!= null);
[PATCH] Validate.notNull(checksum);
[PATCH] super(in.getClass());
[PATCH] Preconditions.checkNotNull(in);
[PATCH] before(in); after(checksum);
[PATCH] super(in.available()){
[PATCH] check(checksum); check(in);
[PATCH] CRC.initialiseCRC(in);
[PATCH] super(in.openStream());
[PATCH] super(); this.in = in;
[PATCH] super(in.read());
[PATCH] if(in!= null){ super();
[PATCH] DigestUtils.validate(in);
[PATCH] verify(checksum); verify(in);
[PATCH] super(in);
[PATCH] super("", checksum.getMethod());
[PATCH] super('\ufffd');
[PATCH] class(in.getClass());
[PATCH] super(in.availableProtocols());
[PATCH] super(in.availableStream());
[PATCH] super(in.getLength());
[PATCH] super(in.availableOptions());
[PATCH] super(in.length());
[PATCH] DigestUtil.validate(in);
[PATCH] super(in.toByteArray());
[PATCH] checkArg(in!= null);
[PATCH] super(in.availableBytes());
[PATCH] super(in.position());
[PATCH] super(in.availablePath());
[PATCH] super(in.availablePosition());
[PATCH] checkState(in!= null);
[PATCH] CompressionUtils.validate(in);
[PATCH] super(in.availableSize());
[PATCH] check(checksum.getBytes());
[PATCH] checksum.initialise(in);
[PATCH] super(in.toString());
[PATCH] super(in.readFile());
[PATCH] super(in.availableSource());
[PATCH] DigestUtils.validate(checksum);
[PATCH] check(checksum.getValue());
[PATCH] assert(in!= null);
[PATCH] super(in.size());
[PATCH] super("");
[PATCH] check checksum(in);
[PATCH] checksum.validate(in);
[PATCH] synchronized(in){ super();
[PATCH] super(-1);
[PATCH] crc.initialiseCRC();
[PATCH] checkNotNull(checksum);
[PATCH] super(in.available();
[PATCH] super(in.available");
[PATCH] verify(in, checksum);
[PATCH] super(in.location());
[PATCH] super(); in.close();
[PATCH] checksum.reset();
[PATCH] super(in.options());
[PATCH] checkSum(checksum);
[PATCH] super() - 1;
[PATCH] initialise(in);
[PATCH] check(checksum);
[PATCH] check(in);
[PATCH] super("", checksums);
[PATCH] checkDigest(checksum);
[PATCH] checkChecksum(checksum);
[PATCH] super(); init();
[PATCH] checkInvalid(in);
[PATCH] streamType(in);
[PATCH] checkValid(checksum);
[PATCH] super('/');
[PATCH] input.close();
[PATCH] super("in");
[PATCH] super(); close();
[PATCH] validate(checksum);
[PATCH] super();
[PATCH] checksum.validate();
[PATCH] setup(in);
[PATCH] sum.reset();
[PATCH] verification.reset();
[PATCH] synchronized(in);
[PATCH] sample(in);
[PATCH] validate(in);
[PATCH] in.close();
[PATCH] super(); reset();
[PATCH] old(in);
[PATCH] this(in);
[PATCH] ensureOpen();
[PATCH] init();
[PATCH] this();
[PATCH] freeBuffers();
[PATCH] reset();
[PATCH] check();
[PATCH] close();
[PATCH] clear();
[PATCH] initialize();
[PATCH] validate();
[PATCH] constructor();
