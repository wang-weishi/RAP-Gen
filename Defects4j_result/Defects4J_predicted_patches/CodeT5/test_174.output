[PATCH] jsdocBuilder.recordJSDocInfo(result);
[PATCH] fileLevelJsDocBuilder.append(result);
[PATCH] jsdocBuilder.recordEndLine();
[PATCH] matchCharno(result);
[PATCH] jsdocBuilder.addLine(result);
[PATCH] state.setRemainingJSDocLine(result);
[PATCH] state.setJSDocLine(result);
[PATCH] jsdocBuilder.addJSDocInfo(result);
[PATCH] jsdocBuilder.addLineNumber(line);
[PATCH] token = stream.next();
[PATCH] jsdocBuilder.recordType(result);
[PATCH] result = result == null?"" : result;
[PATCH] stream.close();
[PATCH] sourceFile.addJSDocInfo(result);
[PATCH] jsdocBuilder.recordEndAnnotation(result);
[PATCH] matchToken(JsDocToken.EOL);
[PATCH] sourceFile.addChildToBack(result);
[PATCH] jsdocBuilder.addItem(result);
[PATCH] jsdocBuilder.recordEndLine(result);
[PATCH] token2 = stream.next();
[PATCH] stream.ungetChar(token);
[PATCH] jsdocBuilder.addEndingLine(result);
[PATCH] jsdocBuilder.appendLine(result);
[PATCH] charno += result.length();
[PATCH] jsdocBuilder.recordEndLine(true);
[PATCH] jsdocBuilder.recordFunctionType(result);
[PATCH] jsdocBuilder.addRemainingLine(result);
[PATCH] jsdocBuilder.recordEndingLine(result);
[PATCH] jsdocBuilder.recordJavaScriptDocInfo(result);
[PATCH] jsdocBuilder.addNewLine();
[PATCH] jsdocBuilder.addRequiredMarker(result);
[PATCH] jsdocBuilder.addLineNumber(result);
[PATCH] jsdocBuilder.append(result);
[PATCH] stream.ungetCharAt(0);
[PATCH] jsdocBuilder.recordRequiredMarker(result);
[PATCH] matchCharno();
[PATCH] jsdocBuilder.addSourceLine(result);
[PATCH] jsdocBuilder.recordCurrentLine(result);
[PATCH] skipEOLs();
[PATCH] jsdocBuilder.recordEndOfLine(result);
[PATCH] jsdocBuilder.recordEndLineno();
[PATCH] jsdocBuilder.recordComments(result);
[PATCH] jsdocBuilder.recordEnclosingFunction(result);
[PATCH] stream.ungetChar(charno);
[PATCH] jsdocBuilder.recordStartLine(result);
[PATCH] jsdocBuilder.addComment(result);
[PATCH] state.setJSDocString(result);
[PATCH] stream.ungetJSDoc();
[PATCH] stopTracer(result,"remainingJSDoc line");
[PATCH] jsdocBuilder.recordEndLineNumber(result);
[PATCH] stopTracer(result,"remaining JSDoc line");
[PATCH] pos -= result.length();
[PATCH] parsingContext.setJSDocInfo(result);
[PATCH] jsdocBuilder.reset();
[PATCH] jsdocBuilder.recordEnd(true);
[PATCH] jsdocBuilder.recordEnd(result);
[PATCH] jsdocBuilder.recordLine(result);
[PATCH] jsdocBuilder.recordFinally(result);
[PATCH] jsdocBuilder.addFinally(result);
[PATCH] jsdocBuilder.recordComplete(result);
[PATCH] stream.ungetCharAt(token);
[PATCH] fileLevelJsDocBuilder.reset();
[PATCH] jsdocBuilder.addResult(result);
[PATCH] jsdocBuilder.addNewLine(result);
[PATCH] state.setJSDocInfo(result);
[PATCH] jsdocBuilder.appendEndLine();
[PATCH] stream.ungetCharAt(token2);
[PATCH] pos = stream.getPos();
[PATCH] skipWS();
[PATCH] fileLevelJsDocBuilder.recordEndLine();
[PATCH] jsdocBuilder.addLineNumber(lineLine);
[PATCH] token2 = stream.getNext();
[PATCH] stream.ungetJSDocHandler();
[PATCH] stream.charno();
[PATCH] stream.ungetJSDocInfo();
[PATCH] pos += result.length();
[PATCH] jsdocBuilder.recordEnd();
[PATCH] token2 = stream.getToken();
[PATCH] position += result.length();
[PATCH] offset += result.length();
[PATCH] text.add("\n");
[PATCH] stream.releaseWhitespace();
[PATCH] stream.advance();
[PATCH] stream.release();
[PATCH] skipWhitespace();
[PATCH] skipComment();
[PATCH] skipEndLine();
[PATCH] advance();
[PATCH] stream.pop();
[PATCH] pos--;
[PATCH] stream.reset();
[PATCH] endLine();
[PATCH] trimCount--;
[PATCH] pos++;
[PATCH] stopOnLine();
[PATCH] startNewLine();
[PATCH] stream.next();
[PATCH] consumeToken();
[PATCH] matchNext();
[PATCH] skipNewLine();
