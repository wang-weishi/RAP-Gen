[PATCH] int i = Math.min(i, value);
[PATCH] long i = Math.min(i, value);
[PATCH] long i = Math.max(value, -i);
[PATCH] long i = Math.abs(value);
[PATCH] long i = Math.max(0L, value);
[PATCH] i = Math.min(i, value);
[PATCH] long i = Math.max(i, value);
[PATCH] checkLenient();
[PATCH] long i = in.readLong();
[PATCH] long i = Long.parseLong(value);
[PATCH] i = Math.min(i, value + 1);
[PATCH] int i = in.readInt();
[PATCH] long i = Math.max(pos, value);
[PATCH] int i = Math.abs(value);
[PATCH] long i = Math.min(value, 1L);
[PATCH] parseAndIgnoreWhitespace(in);
[PATCH] long i = Math.max(value, -pos);
[PATCH] long i = Math.max(relativePosition, value);
[PATCH] long i = Math.round(value);
[PATCH] int i = MathUtils.verifyValueBounds(value);
[PATCH] long i = Math.min(value, -i);
[PATCH] long i = Math.max(value, 0L);
[PATCH] long i = long.parseLong(value);
[PATCH] long i = MathUtils.verifyValueBounds(value);
[PATCH] int i = MathUtils.xDigitToInt(value);
[PATCH] long i = new Long(Math.abs(value));
[PATCH] int i = Math.min(10, value);
[PATCH] int i = Math.min(value, -i);
[PATCH] long i = parseLongText(in, pos);
[PATCH] long i = Math.max(2L, value);
[PATCH] int i = new Integer(Math.abs(value));
[PATCH] parseAndIgnoreWhitespace(in, pos);
[PATCH] int i = MathUtils.safeToInt(value);
[PATCH] long i = NumberInput.verifyValueBounds(value);
[PATCH] int i = Math.min(_value, value);
[PATCH] long i = Math.min(_value, value);
[PATCH] int i = Math.max(0, i);
[PATCH] long i = Long.parseLong(getText());
[PATCH] long i = MathUtils.safeToInt(value);
[PATCH] long i = Math.max(negative, value);
[PATCH] long i = Math.parseLong(value);
[PATCH] long i = Math.max(value, minLong);
[PATCH] long i = currentNumericNode().longValue();
[PATCH] int i =in.readInt();
[PATCH] last = in.readInt();
[PATCH] int i = MathUtils.signum(value);
[PATCH] long i = Long.parseLong(string);
[PATCH] long i =Long.parseLong(value);
[PATCH] long i = Math.min(value, value);
[PATCH] last = Character.charAt(c);
[PATCH] long i = NumberInput.parseLongValue(in);
[PATCH] int i = parseIntText(in, pos);
[PATCH] last =(int)stack.peek();
[PATCH] long i =in.readLong();
[PATCH] int i = nextNumericChar(c);
[PATCH] long i = Math.floor(value);
[PATCH] long i = Math.rint(value);
[PATCH] long i = Double.parseLong(value);
[PATCH] i = Math.max(i, value);
[PATCH] int i = numberToString(value);
[PATCH] long i = Math.min(value);
[PATCH] last = reverseChar(c);
[PATCH] newValue = in.readInt();
[PATCH] final int i = in.readInt();
[PATCH] long i = parseLongText(in);
[PATCH] boolean negative =(value < 0);
[PATCH] long i = numberToString(value);
[PATCH] int i = parseInt(value);
[PATCH] negate = in.readInt();
[PATCH] long i = parseInt(value);
[PATCH] int i = checkLenient();
[PATCH] long i = value.longValue();
[PATCH] addToken(c);
[PATCH] last = nextChar(c);
[PATCH] last = readChar(c);
[PATCH] last = checkChar(c);
[PATCH] last = in.readChar();
[PATCH] last = value.intValue();
[PATCH] parseInt(negative, pos);
[PATCH] handleInvalidNumberStart(negative);
[PATCH] value = in.readInt();
[PATCH] verifyValueBounds(value);
[PATCH] last = checkLenient();
[PATCH] last = in.read();
[PATCH] c = in.read();
[PATCH] checkLastChar(c);
[PATCH] nextToken();
[PATCH] parseInt(value);
[PATCH] validateNumber(value);
[PATCH] parseAndIgnoreWhitespace();
[PATCH] validateIndex(i);
[PATCH] pos--;
[PATCH] nextNonWhitespace();
[PATCH] consumeToken();
[PATCH] parseNextCharacter();
[PATCH] advance();
[PATCH] quickPeek();
[PATCH] clearStack();
[PATCH] pop();
[PATCH] last =
