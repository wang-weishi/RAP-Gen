[PATCH] return multiply(100).doubleValue();
[PATCH] return multiply(1).doubleValue();
[PATCH] return multiply(100).doubleValue() / 100;
[PATCH] return multiply(100.0).doubleValue();
[PATCH] return multiply(10).doubleValue();
[PATCH] return multiply(1.0).doubleValue();
[PATCH] return multiply(100).doubleValue() / denominator;
[PATCH] return multiply(100 / numerator).doubleValue();
[PATCH] return multiply(100).divide(denominator);
[PATCH] return multiply(100/numerator).doubleValue();
[PATCH] return multiply(100 / numerator).doubleValue();
[PATCH] return multiply(10000).doubleValue();
[PATCH] return multiply(100).result();
[PATCH] return multiply(100).reciprocal();
[PATCH] return multiply(100 / denominator).doubleValue();
[PATCH] return multiply(50).doubleValue();
[PATCH] return multiply(100).exp();
[PATCH] return(numerator / 100).doubleValue();
[PATCH] return multiply(100)/ numerator.doubleValue();
[PATCH] return multiply(100).inverseCumulativeProbability();
[PATCH] return(doubleValue() / 100).doubleValue();
[PATCH] return multiply(100).sqrtValue();
[PATCH] return multiply(100)* denominator.doubleValue();
[PATCH] return multiply(100).inverseCumulativeValue();
[PATCH] return roundFloor(100).doubleValue();
[PATCH] return multiply(100).remainder();
[PATCH] return multiply(100).print(this);
[PATCH] return multiply(100).rint();
[PATCH] return(doubleValue() * 100).doubleValue();
[PATCH] return multiply(100).multiply(denominator);
[PATCH] return multiply(100).print(rhs);
[PATCH] return multiply(100).value();
[PATCH] return multiply(100).evaluate(denominator);
[PATCH] return multiply(100).reportValue();
[PATCH] return multiply(100).roundFloor();
[PATCH] return multiply(100)/ denominator.doubleValue();
[PATCH] return multiply(numerator / 100).doubleValue();
[PATCH] return multiply(100L).doubleValue();
[PATCH] return multiply(100).percentValue();
[PATCH] return percentiles(100).doubleValue();
[PATCH] return multiply(100).doubleValue() / sum;
[PATCH] return multiply(100).doubleValue() / numerator;
[PATCH] return format(100).doubleValue();
[PATCH] return multiply(100).doubleValue() / maxValue;
[PATCH] return multiply(100).subtract(getValue());
[PATCH] return multiply(2).doubleValue();
[PATCH] return multiply(100).inverseCumulativeResult();
[PATCH] return multiply(1000).doubleValue();
[PATCH] return multiply(100).doubleValue() / 2;
[PATCH] return multiply(4).doubleValue();
[PATCH] return multiply(100)/ numerator().doubleValue();
[PATCH] return multiply(100).sqrt1(denominator);
[PATCH] return multiply(100).occupied();
[PATCH] return percentile(100).doubleValue();
[PATCH] return multiply(100)/ 100.doubleValue();
[PATCH] return multiply(100).repeat(denominator);
[PATCH] return multiply(100).doubleValue() / 3;
[PATCH] return multiply(100).ceil();
[PATCH] returnmultiply(100).doubleValue();
[PATCH] return multiply(100).retlect(denominator);
[PATCH] return multiply(100).floatValue();
[PATCH] return divide(10).doubleValue();
[PATCH] return multiply(15).doubleValue();
[PATCH] return divide(100).doubleValue();
[PATCH] return(( numerator / 100).doubleValue();
[PATCH] return multiply(100).doubleValue() * 100;
[PATCH] return multiply(100).rvalue();
[PATCH] return multiply(100).log(1.0);
[PATCH] return multiply(16).doubleValue();
[PATCH] return multiply(100).multiply(getResult());
[PATCH] return multiply(100).rtrim();
[PATCH] return divide(100).doubleValue() / 100;
[PATCH] return multiply(100).multiply(ONE);
[PATCH] return multiply(100).evaluate(rhs);
[PATCH] return multiply(100).rhs();
[PATCH] return multiply(100).retain(1);
[PATCH] return multiply(100).denominator();
[PATCH] return multiply(95).doubleValue();
[PATCH] return multiply(100).rval();
[PATCH] return multiply(354).doubleValue();
[PATCH] return multiply(100).floor();
[PATCH] return multiply(100).doubleValue() / 255;
[PATCH] return multiply(100)/(( double)doubleValue();
[PATCH] return toFixed(100).doubleValue();
[PATCH] return multiply(100).provide(1);
[PATCH] return multiply(100).doubleValue() / limit;
[PATCH] return evaluate(100).doubleValue();
[PATCH] return multiply(100).percentageValue();
[PATCH] return multiply(100).remainderValue();
[PATCH] return exp(100).doubleValue();
[PATCH] return multiply(100).doubleValue() / scale;
[PATCH] return add(100).doubleValue();
[PATCH] return multiply(100).rewind();
[PATCH] return multiply(100).multiply(DUP);
[PATCH] return multiply(100).sumValue();
[PATCH] return multiply(100).investigate();
[PATCH] return multiply(200).doubleValue();
[PATCH] return multiply(100).ceilValue();
[PATCH] return multiply(99).doubleValue();
[PATCH] return Multiply(100).doubleValue();
