[PATCH] return getNativeType(NO_OBJECT_TYPE);
[PATCH] return topType == null? getNativeType(NO_TYPE): topType;
[PATCH] return topType == null? getNativeType(UNKNOWN_TYPE): topType;
[PATCH] return isTopType()? getNativeType(NO_TYPE): null;
[PATCH] return(topType == null)? getNativeType(NO_TYPE): topType;
[PATCH] return topType == null? getNativeType(NULL_TYPE): topType;
[PATCH] return isTopType()? getNativeType(NO_OBJECT_TYPE): null;
[PATCH] return!topType.isUnknownType()? topType : null;
[PATCH] return(topType == null)? getNativeType(UNKNOWN_TYPE): topType;
[PATCH] return matchesExpectation("object")? topType : null;
[PATCH] return(topType == null)? getNativeType(NULL_TYPE): topType;
[PATCH] return!topType.isEmptyType()? topType : null;
[PATCH] return isTopType()? topType : null;
[PATCH] return caseTopType(topType)? getNativeType(NO_TYPE): null;
[PATCH] return isTopType()? getNativeType(NO_TYPE): topType;
[PATCH] return topType == null? null : topType.restrictByNotNullOrUndefined();
[PATCH] return hasRestrictedTopType()? topType : null;
[PATCH] return type == null? getNativeType(NO_TYPE): topType;
[PATCH] return topType instanceof UnionType?(UnionType)topType : null;
[PATCH] return topType == null? null : topType.visit(restricters);
[PATCH] return(topType == null)? null : topType.visit(restricters);
[PATCH] return isNativeObjectType()? getNativeType(NO_OBJECT_TYPE): null;
[PATCH] return null == topType? getNativeType(NO_TYPE): topType;
[PATCH] return state == null? getNativeType(NO_TYPE): topType;
[PATCH] return!topType.isNoObjectType()? null : topType;
[PATCH] return transitions == null? getNativeType(NO_TYPE): topType;
[PATCH] return isTopType()? getNativeType(NULL_TYPE): topType;
[PATCH] return applyCommonRestriction(topType);
[PATCH] return testTopType(topType)? getNativeType(NO_TYPE): null;
[PATCH] return isEmptyType()? getNativeType(NO_TYPE): topType;
[PATCH] return topLevelType == null? getNativeType(NO_TYPE): topType;
[PATCH] return isTopType()? getNativeType(TOP_TYPE): null;
[PATCH] return hasNoSideEffects()? null : topType;
[PATCH] return(topType instanceof UnionType)?(UnionType)topType : null;
[PATCH] return isNativeObjectType()? topType : null;
[PATCH] return topType == null? getNativeType(EMPTY_TYPE): topType;
[PATCH] return!isArray()? getNativeType(NO_ARRAY): topType;
[PATCH] return isTop(topType)? getNativeType(NO_TYPE): null;
[PATCH] return caseTopType(null, topType);
[PATCH] return(topType == null)? null : topType;
[PATCH] return isTopType(topType)? getNativeType(NO_TYPE): null;
[PATCH] return new UnionType(getNativeType(ARRAY_TYPE), topType);
[PATCH] return topType == null? getNativeType(null): topType;
[PATCH] return(topType == null? getNativeType(NO_TYPE): topType);
[PATCH] return topType == null? getNativeType(VOID_TYPE): topType;
[PATCH] return transitions == null? getNativeType(NO_OBJECT_TYPE): topType;
[PATCH] return hasRestrictedTopType()? getNativeType(NO_TYPE): topType;
[PATCH] return matchTopType(topType)? getNativeType(NO_TYPE): null;
[PATCH] return leftType == null? getNativeType(NO_TYPE): topType;
[PATCH] return isArrayType()? getNativeType(NO_OBJECT_TYPE): topType;
[PATCH] return isTop()? getNativeType(NO_TYPE): null;
[PATCH] return getNativeType(NO_TYPE);
[PATCH] return containsType(topType)? topType : null;
[PATCH] return("object".equals(topType.toString())? null : topType;
[PATCH] return outcome? getNativeType(NO_OBJECT_TYPE): topType;
[PATCH] return caseTopType(null);
[PATCH] return isTop()? getNativeType(NO_OBJECT_TYPE): null;
[PATCH] return isImmutable(topType)? getNativeType(NO_TYPE): topType;
[PATCH] return istopType()? getNativeType(NO_OBJECT_TYPE): null;
[PATCH] return isTop()? getNativeType(NO_OBJECT_TYPE): topType;
[PATCH] return isImmutable(topType)? getNativeType(NO_TYPE): null;
[PATCH] return caseTopType(null)? null : topType;
[PATCH] return hasRestrictedTopType()? getNativeType(NO_TYPE): null;
[PATCH] return new ObjectTypePair(getNativeType(ARRAY_TYPE), topType);
[PATCH] return getRestrictedByTypeOfResult(topType);
[PATCH] return istopType()? getNativeType(NO_TYPE): null;
[PATCH] return(topType == null)? getNativeType(null): topType;
[PATCH] return isArrayType()? getNativeType(NO_ARRAY_TYPE): topType;
[PATCH] return isImmutableType(topType)? getNativeType(NO_TYPE): null;
[PATCH] return caseTopType(null, topType)? null : topType;
[PATCH] return!topType.isUnionType()? null : topType;
[PATCH] return == null? getNativeType(NO_TYPE): topType;
[PATCH] return matchType(topType)? getNativeType(NO_TYPE): null;
[PATCH] return type == null? getNativeType(UNKNOWN_TYPE): topType;
[PATCH] return topType instanceof UnionType?(( UnionType)topType): null;
[PATCH] return isAsArray()? getNativeType(ARRAY_TYPE): null;
[PATCH] return isEnumElement()? topType : null;
[PATCH] return restrictToNotObjectVisitor.visitTopType(topType);
[PATCH] return(topType == null)? getNativeType(NULL): topType;
[PATCH] return isAsArray()? getNativeType(NO_ARRAY): topType;
[PATCH] return isAsArray()? getNativeType(ARRAY_TYPE): topType;
[PATCH] return caseTopType(topType)? getNativeType(NULL_TYPE): null;
[PATCH] return!isArray()? null : topType;
[PATCH] return getNativeType(NULL_TYPE);
[PATCH] return hasSubtype(topType)? topType : null;
[PATCH] return new JSType(topType.restrictByNotNullOrUndefined());
[PATCH] return exports.getNativeType(NO_OBJECT_TYPE);
[PATCH] return(topType == null)? null : topType.visit(this);
[PATCH] return restrictToNotObjectVisitor.visit(topType);
[PATCH] return isTopType()? getTopType(0): null;
[PATCH] return isAsArray()? getNativeType(NO_ARRAY): null;
[PATCH] return state.getNativeType(NO_OBJECT_TYPE);
[PATCH] return!topType.isSubtype(getNativeType(ARRAY_TYPE));
[PATCH] return hasThisType()? topType : null;
[PATCH] return isEnumType()? topType : null;
[PATCH] return hasRestrictedTopTypes()? topType : null;
[PATCH] return isValidTopType(topType)? topType : null;
[PATCH] return isNativeObjectType()? null : topType;
[PATCH] return hasReferenceName()? topType : null;
[PATCH] return visitor.visitTopType(topType);
