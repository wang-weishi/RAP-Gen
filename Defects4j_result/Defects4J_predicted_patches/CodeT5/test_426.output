[PATCH] type = Option.class;
[PATCH] type = Class.class;
[PATCH] type = null;
[PATCH] type = Option.UNINITIALIZED;
[PATCH] type = String.class;
[PATCH] type = getClass();
[PATCH] type = Context.TYPE_OBJECT;
[PATCH] type = CommandLine.class;
[PATCH] type = Character.valueOf("");
[PATCH] type = Attribute.class;
[PATCH] type ="";
[PATCH] type = Option.NULL;
[PATCH] type = Context.TYPE_NULL;
[PATCH] type = Unknown.class;
[PATCH] type = Option.None.class;
[PATCH] type = Option.TYPE_NULL;
[PATCH] type = new Class<?>();
[PATCH] type = Options.class;
[PATCH] type = NoClass.class;
[PATCH] type = Option.NULL_TYPE;
[PATCH] type = Constants.TYPE_OBJECT;
[PATCH] type = Type.getType("");
[PATCH] type = Class.valueOf("");
[PATCH] type = Class.getType("");
[PATCH] type = Option.TYPE_OBJECT;
[PATCH] type =Option.class;
[PATCH] type = ClassWriter.UNINITIALIZED;
[PATCH] type = Context.NULL_TYPE;
[PATCH] type = DefaultOption.class;
[PATCH] type = JavaType.OTHER;
[PATCH] type = Token.NULL;
[PATCH] type = Token.UNINITIALIZED;
[PATCH] type = Option.OBJECT_TYPE;
[PATCH] type = Argument.class;
[PATCH] type = Option.CLASS;
[PATCH] type = Type.getReturnType();
[PATCH] type = AbstractOption.class;
[PATCH] type = getValueClass();
[PATCH] type = Option.Class.OTHER;
[PATCH] type = Constants.NULL_TYPE;
[PATCH] type = Class.NULL;
[PATCH] type = Option.INT_TYPE;
[PATCH] type = Context.TYPE_OTHER;
[PATCH] type = Option.VALUE_NULL;
[PATCH] type = Option.Type.OTHER;
[PATCH] type = Option.NONE;
[PATCH] type = System.currentTimeMillis();
[PATCH] type = Object.class;
[PATCH] type = Type.getDefault();
[PATCH] type = Option.UNDEFINED;
[PATCH] type = Entry.class;
[PATCH] type = optionType;
[PATCH] type = Class.OTHER;
[PATCH] type = ProcessOption.class;
[PATCH] type = DEFAULT_TYPE;
[PATCH] type = NO_TYPE;
[PATCH] type = Property.class;
[PATCH] type = Class.getType();
[PATCH] type = Context.class;
[PATCH] type = ClassWriter.OTHER;
[PATCH] type = Option.VALUE_STRING;
[PATCH] type = Name.class;
[PATCH] type = Process.class;
[PATCH] type = Integer.class;
[PATCH] type = Option.BOTH;
[PATCH] type = Option.ALL;
[PATCH] type = Type.OTHER;
[PATCH] type = Option.valueOf("");
[PATCH] type = Option. class;
[PATCH] type = Void.class;
[PATCH] type = Text.class;
[PATCH] type = Option.UNKNOWN;
[PATCH] type = Option.TYPE;
[PATCH] type = Class.valueOf();
[PATCH] type = Character.NULL;
[PATCH] type = Character.class;
[PATCH] type = Class.VOID;
[PATCH] type = JavaType.OBJECT;
[PATCH] type = Class.EMPTY;
[PATCH] type = Entry.TYPE;
[PATCH] type = Constants.TYPE_NULL;
[PATCH] type = Context.TYPE_UNKNOWN;
[PATCH] type = Type.getType();
[PATCH] type = Branch.class;
[PATCH] type = Type.NULL;
[PATCH] type = Option.TYPE_STRING;
[PATCH] type = Namespace.OBJECT;
[PATCH] type = Class.reset();
[PATCH] type = System.err;
[PATCH] type ="opt";
[PATCH] type = Option.TYPE_OTHER;
[PATCH] type = Label.NONE;
[PATCH] type = Color.reset();
[PATCH] type = ClassWriter.NULL;
[PATCH] type = Long.class;
[PATCH] type = Class.OBJECT;
[PATCH] type = Class.create();
[PATCH] type = System.class;
[PATCH] type = Type.getOption("");
[PATCH] type = Option.VOID;
