[PATCH] Preconditions.checkState(fnScope.isGlobal());
[PATCH] Preconditions.checkState(!referenced.isEmpty());
[PATCH] Preconditions.checkState(referenced.size()!= 0);
[PATCH] Preconditions.checkState(isFunctionOrNew(fnScope));
[PATCH] Preconditions.checkState(isFunctionScope(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isGlobal());
[PATCH] Preconditions.checkState(referenced.size() == 0);
[PATCH] Preconditions.checkNotNull(fnScope);
[PATCH] Preconditions.checkState(unreferenced.size() == 0);
[PATCH] Preconditions.checkState(isFunctionAnonymous(fnScope));
[PATCH] Preconditions.checkState(maybeUnreferenced);
[PATCH] Preconditions.checkState(!referenced.size() == 0);
[PATCH] Preconditions.checkState(fnScope.isRootNode());
[PATCH] fnScope = fnScope.getParent();
[PATCH] Preconditions.checkState(unreferenced.size()!= 0);
[PATCH] List<Var> allFunctionScopes = fnScope.getVars();
[PATCH] Preconditions.checkState(fnScope.isRoot());
[PATCH] Preconditions.checkState(isCallOrNew(fnScope));
[PATCH] Preconditions.checkState(maybeUnreferenced == null);
[PATCH] Preconditions.checkState(fnScope.isLocal());
[PATCH] Preconditions.checkArgument(!referenced.isEmpty());
[PATCH] Node parentScope = fnScope.getParent();
[PATCH] Preconditions.checkState(referenced.size() > 0);
[PATCH] Scope parentScope = fnScope.getParent();
[PATCH] Preconditions.checkState(isFunctionDeclaration(fnScope));
[PATCH] Preconditions.checkArgument(!fnScope.isGlobal());
[PATCH] Preconditions.checkState(references.size() == 0);
[PATCH] Preconditions.checkState(isFunctionOrInvoke(fnScope));
[PATCH] Preconditions.checkState(notreferenced.size() == 0);
[PATCH] fnScope.unreferenced = Sets.newHashSet();
[PATCH] Preconditions.checkState(isFunctionWithinScope(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isUnreferenced());
[PATCH] fnScope.undeclare(fnScope.getRootNode());
[PATCH] Preconditions.checkState(isMethodOrNew(fnScope));
[PATCH] Preconditions.checkState(isFunctionWithScope(fnScope));
[PATCH] Preconditions.checkState(isFunctionOrUndefined(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isRootNode());
[PATCH] Preconditions.checkState(fm.isGlobal());
[PATCH] fnScope.checkState(!referenced.isEmpty());
[PATCH] Preconditions.checkState(!referenced.isUnreferenced());
[PATCH] Preconditions.checkState(maybeUnreferenced){ return; }
[PATCH] fnScope.ValidateState(!referenced.isEmpty());
[PATCH] Preconditions.checkState(referenced.isEmpty());
[PATCH] Preconditions.checkState(!referenced.containsAll());
[PATCH] Validate.checkState(!referenced.isEmpty());
[PATCH] Preconditions.checkState(references.size()!= 0);
[PATCH] Preconditions.checkState( fnScope.isGlobal());
[PATCH] Preconditions.checkState(isFunctionScoped(fnScope));
[PATCH] Preconditions.checkState(isMethodScope(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isLocal());
[PATCH] Preconditions.checkState(maybeUnreferenced == false);
[PATCH] Preconditions.checkState(allFunctionScopes.isEmpty());
[PATCH] Preconditions.checkState(removingUnreferencedVars);
[PATCH] Preconditions.checkState(fnScope.isTypeScope());
[PATCH] Preconditions.checkState(isFunctionVisibility(fnScope));
[PATCH] Preconditions.checkState(refCountUnreferencedVars());
[PATCH] Validate.isTrue(fnScope.isGlobal());
[PATCH] Preconditions.checkState(removableVars.isEmpty());
[PATCH] Preconditions.checkState(fnScope.isFunctionScope());
[PATCH] Validate.isTrue(!referenced.isEmpty());
[PATCH] Preconditions.checkState(scope.isGlobal());
[PATCH] FnScope parentScope = fnScope.getParent();
[PATCH] fnScope.removeChild(fnScope.getRootNode());
[PATCH] Preconditions.checkState(compiler.isNormalized());
[PATCH] fnScope.validateState(!referenced.isEmpty());
[PATCH] Preconditions.checkState(isNestedCall(fnScope));
[PATCH] Preconditions.checkState(varScope.isGlobal());
[PATCH] Preconditions.checkState(!fnScope.isRoot());
[PATCH] Preconditions.checkState(maybeUnreferenced == scope);
[PATCH] Set<Var> referenced = Sets.newHashSet();
[PATCH] Validate.checkState(fnScope.isGlobal());
[PATCH] fnScope.detachFromParent();
[PATCH] Preconditions.checkState(toRemoveUnreferencedVars());
[PATCH] Preconditions.checkState(fnScope.isParent());
[PATCH] Validate.isState(fnScope.isGlobal());
[PATCH] Preconditions.checkState(lastArg == null);
[PATCH] Set referenced = Sets.newHashSet();
[PATCH] fnScope.undeclare(false);
[PATCH] Preconditions.checkState(referenced!= null);
[PATCH] fnScope = scope.getParent();
[PATCH] scope = fnScope.getParent();
[PATCH] Preconditions.checkScope(fnScope);
[PATCH] fnScope.redeclare(false);
[PATCH] referenced.clear();
[PATCH] Preconditions.checkState(removeGlobals);
[PATCH] fnScope.popSubScope();
[PATCH] fnScope.unreferenced.clear();
[PATCH] markUnreferencedVars(fnScope);
[PATCH] Validate.notNull(fnScope);
[PATCH] collectUnreferencedVars(fnScope);
[PATCH] maybeUnreferenced.clear();
[PATCH] fnScope.clearNodeAnnotations();
[PATCH] compiler.reportCodeChange();
[PATCH] fnScope.redeclare();
[PATCH] fnScope.cleanScope();
[PATCH] Set referenced.clear();
[PATCH] unreferenced.clear();
[PATCH] fnScope.flush();
[PATCH] fnScope.pop();

