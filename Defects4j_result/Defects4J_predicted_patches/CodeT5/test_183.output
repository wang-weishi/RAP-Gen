[PATCH] pos = pos + lineLength;
[PATCH] out.append(CHUNK_SEPARATOR); pos += lineLength;
[PATCH] pos = pos + lineLength - 1;
[PATCH] if(pos == outPos){ throw new IllegalStateException(""); }
[PATCH] pos = encodeBase64LineEnd(lineLength);
[PATCH] pos = pos + lineSeparator.length;
[PATCH] out.append(lineLine); pos += lineLength;
[PATCH] pos = encodeBase64EndOfLine(lineLength);
[PATCH] pos = pos +(lineLength % lineSeparator.length);
[PATCH] pos = encodeBase64LineStart(lineLength);
[PATCH] pos = encodeBase64Chunk(CHUNK_SEPARATOR);
[PATCH] getChars(0, lineLength, buf, pos);
[PATCH] new String(buf, pos, lineLength);
[PATCH] pos = encodeBase64LineSeparator(lineLength);
[PATCH] pos = pos + LINE_SEPARATOR.length;
[PATCH] encodeBase64Line(buf, pos, lineLength);
[PATCH] pos = encodeBase64Pos(pos);
[PATCH] if(lineLength == lineSeparator.length){ return; }
[PATCH] pos = calculateBase64Pos(lineLength);
[PATCH] pos = encodeBase64EOL(lineLength);
[PATCH] out.write(CHUNK_SEPARATOR); pos += lineLength;
[PATCH] pos = encodeBase64Line(lineLength);
[PATCH] encodeBase64(CHUNK_SEPARATOR); pos += lineLength;
[PATCH] pos = writeLineSeparator(lineLength);
[PATCH] out.append(LINE_SEPARATOR); pos += lineLength;
[PATCH] if(pos == outPos){ return; }
[PATCH] encodeBase64Partial(lineLength, buf, pos);
[PATCH] pos = encodeBase64Chunk(CHUNK_SEPARATOR, pos);
[PATCH] out.append(CHUNK_SEPARATOR); pos = 0;
[PATCH] out.append(lineLine); pos = 0;
[PATCH] ensureCapacity(pos + lineSeparator.length);
[PATCH] pos = encodeBase64Char(lineLength);
[PATCH] pos = pos + lineLength();
[PATCH] pos = encodeBase64Long(lineLength);
[PATCH] if(pos == outPos){ throw new IOException(""); }
[PATCH] pos = encodeBase64EOF(lineLength);
[PATCH] pos = encodeBase64Partial(CHUNK_SEPARATOR, pos);
[PATCH] pos = encodeBase64Partial(lineLength);
[PATCH] pos = encodeBase64Chunk(lineLength);
[PATCH] out.append('\n'); pos += lineLength;
[PATCH] pos = mark(lineLength);
[PATCH] out.append(lineBuffer, pos, lineLength);
[PATCH] encodeBase64Chunk(buf, pos, lineLength);
[PATCH] pos = encodeBase64End(lineLength);
[PATCH] if(pos == outPos){ throw new EOFException(""); }
[PATCH] pos = calcBase64Pos(lineLength);
[PATCH] out.append(lineLine);
[PATCH] pos = encodeBase64Linefeed(lineLength);
[PATCH] encodeBase64Chunk(out, pos, lineLength);
[PATCH] new String(CHUNK_SEPARATOR); pos += lineLength;
[PATCH] out.append(getLineSeparator()); pos += lineLength;
[PATCH] pos = encodeBase64(CHUNK_SEPARATOR, pos);
[PATCH] encodeBase64(lineLength, buf, pos);
[PATCH] pos = encodeBase64Chunk(out, pos);
[PATCH] pos = writeBase64Char(lineLength);
[PATCH] if(pos == outPos)throw new IllegalStateException(""); }
[PATCH] pos = writeBase64LineSeparator(lineLength);
[PATCH] out.write(lineLine); pos += lineLength;
[PATCH] pos = encodeBase64Position(pos);
[PATCH] pos = saveBase64Chunk(CHUNK_SEPARATOR);
[PATCH] pos = checkLen(lineLength);
[PATCH] pos = encodeBase64Chunk(CHUNK_SEPARATOR.length);
[PATCH] pos = encodeBase64Len(lineLength);
[PATCH] pos = pos - LINE_SEPARATOR.length;
[PATCH] pos = encodeBase64EOF();
[PATCH] ensureCapacity(pos + lineLength);
[PATCH] new String(lineLine.getBytes()); pos = 0;
[PATCH] out.append(getLineSeparator()); pos = 0;
[PATCH] pos = encodeBase64Start(lineLength);
[PATCH] out.append(lineLine); pos -= lineLength;
[PATCH] pos +=(lineLength % lineSeparator.length);
[PATCH] out.putInt(lineLength);
[PATCH] pos = setPos(pos + lineLength);
[PATCH] pos = encodeBase64Escape(lineLength);
[PATCH] pos = writeBase64Chunk(lineLength);
[PATCH] pos = encodeBase64EOF(0);
[PATCH] pos = writeBase64Chunk(CHUNK_SEPARATOR);
[PATCH] pos = encodeBase64Chunk(LINE_SEPARATOR);
[PATCH] pos = encodeBase64Line();
[PATCH] pos = encodeBase64Suffix(lineLength);
[PATCH] encodeBase64(CHUNK_SEPARATOR); pos = 0;
[PATCH] out.append(CHUNK_SEPARATOR);
[PATCH] new String(lineString.getBytes()); pos = 0;
[PATCH] pos = ensureCapacity(lineLength);
[PATCH] pos = writeLineSep(lineLength);
[PATCH] pos += lineLength;
[PATCH] pos = encodeBase64Chunk(LINE_SEPARATOR.length);
[PATCH] pos = writeBase64Line();
[PATCH] pos = encodeBase64(lineLength);
[PATCH] pos = wrapPos(lineLength);
[PATCH] pos = encodeBase64LineEnd(true);
[PATCH] pos = encodeBase64Chunk(true);
[PATCH] pos += pos % lineSeparator.length;
[PATCH] pos = pos + lineSeparator.length();
[PATCH] pos = ensureBounds(lineLength);
[PATCH] buf[pos++] = PAD;
[PATCH] pos = checkLenient();
[PATCH] pos = pos - lineSeparator.length;
[PATCH] encodeBase64(CHUNK_SEPARATOR);
[PATCH] pos = encodeBase64NewLine();
