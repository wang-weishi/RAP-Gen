[PATCH] options.setWarningLevel(warningLevel);
[PATCH] options.messageBundle.setLevel(level);
[PATCH] options.setWarningLevel(wLevel);
[PATCH] options.skipAllPasses();
[PATCH] options.setWarningLevel(level);
[PATCH] options.messageBundle.setErrorLevel(level);
[PATCH] options.messageBundle.setWarningLevel(level);
[PATCH] options.skipAllWarnings = false;
[PATCH] options.skipAllCompilerPasses();
[PATCH] options.skipAllWarnings();
[PATCH] Options.setWarningLevel(warningLevel);
[PATCH] options.messageBundle.setCompilationLevel(level);
[PATCH] options.warningLevel = warningLevel;
[PATCH] options.warningLevel = new WarningLevel(level);
[PATCH] options.messageBundle.setDefaultLevel(level);
[PATCH] options.messageBundle.setDiagnosticLevel(level);
[PATCH] this.messageBundle.setLevel(level);
[PATCH] options.warningLevel = level.getWarningLevel();
[PATCH] options.skipAllWarnings = true;
[PATCH] options.errorBundle = new DefaultMessageBundle();
[PATCH] options.errorBundle = new EmptyMessageBundle();
[PATCH] options.messageBundle.setFormatLevel(level);
[PATCH] options.messageBundle.setMessageLevel(level);
[PATCH] options.getMessageBundle().setLevel(level);
[PATCH] options.messageBundle.setSummaryLevel(level);
[PATCH] options.strictModuleDepCheck = false;
[PATCH] options.appendErrorBundle(options.messageBundle);
[PATCH] options.skipAllPasses(); return options;
[PATCH] options.setErrorLevel(warningLevel);
[PATCH] options.messageBundle.setlevel(level);
[PATCH] options.withWarningLevel(warningLevel);
[PATCH] options.skipAllPasses = false;
[PATCH] options.setWarnings(warningLevel.getWarnings());
[PATCH] options.resetOngoingStubbing();
[PATCH] options.setErrorBundle(new MissingMessageBundle());
[PATCH] options.level = level;
[PATCH] options.errorBundle = new DefaultErrorBundle();
[PATCH] options.messageBundle.setLanguageVersion(version);
[PATCH] options.messageBundle.setConflictLevel(level);
[PATCH] options.setErrorLevel(wLevel);
[PATCH] jscompDevMode.setLevel(level);
[PATCH] options.messageBundle.setVerboseLevel(level);
[PATCH] options.addErrorBundle(options.messageBundle);
[PATCH] options.messageBundle.setPriority(level);
[PATCH] options.messageBundle.setLevel(wLevel);
[PATCH] options.errorBundle = new LoggerErrorBundle();
[PATCH] options.setWarnings(createWarningsForOptimization());
[PATCH] options.skipAllJsDocInfo = false;
[PATCH] jscompDevMode.setWarningLevel(level);
[PATCH] options.warningLevel = warningLevel.toLowerCase();
[PATCH] options.warningLevel = warningLevel.toStandard();
[PATCH] options.setWarningLevel(WARNING_LEVEL);
[PATCH] options.skipAllCajaChecks = false;
[PATCH] options.setWarningLevel( warningLevel);
[PATCH] options.addWarningHandler(warningLevel);
[PATCH] options.setErrorLevel(level);
[PATCH] messageBundle.setLevel(level);
[PATCH] options.messageBundle.setLanguageVersion(VERSION);
[PATCH] options.warningLevel = wLevel.getWarnings();
[PATCH] options.errorBundle = new CheckLevelErrorBundle();
[PATCH] options.warningLevel = wLevel.getWARNING();
[PATCH] options.strictModuleDepCheck = true;
[PATCH] options.setWarningLevel(warningLevel); break;
[PATCH] options.skipAllErrors();
[PATCH] options.skipAllIgnorableMessages();
[PATCH] options.skipAllHaltingErrors();
[PATCH] options.addWarningLevel(warningLevel);
[PATCH] options.appendWarningBundle(options.warningLevel);
[PATCH] options.setErrorBundle(new StandardErrorBundle());
[PATCH] options.warningLevel = warningLevel.level;
[PATCH] options.messageBundle.appendLevel(level);
[PATCH] options.skipAllMessages();
[PATCH] options.skipAllPasses;
[PATCH] options.messageBundle.setVerbose(true);
[PATCH] options.messageBundle.appendLevelMessage(level);
[PATCH] options.setLevel(level);
[PATCH] options.setWarnings(warnings);
[PATCH] options.skipAllRecordedMessages();
[PATCH] options.warningLevel = wLevel;
[PATCH] options.skipAllCajaChecks();
[PATCH] options.compilerLevel = level;
[PATCH] options.skipAllJsDocInfo = true;
[PATCH] options.skipAllWarningMessages();
[PATCH] options.resetErrorBundle();
[PATCH] options.skipAllWarningLines();
[PATCH] options.incrementUsageCount();
[PATCH] compiler.reportCodeChange();
[PATCH] options.skipAllJsDocs();
[PATCH] options.skipAllJsDocInfo();
[PATCH] options.warnLevel = warningLevel;
[PATCH] options.resetMessageBundle();
[PATCH] options.resetWarningLevel();
[PATCH] options.skipAllSuccessors();
[PATCH] options.skipAllPolicies();
[PATCH] options.appendErrorBundle();
[PATCH] options.skipAllChecks();
[PATCH] options.resetOnChange();
[PATCH] options.collectWarnings();
[PATCH] options.validate();
[PATCH] options.reset();
