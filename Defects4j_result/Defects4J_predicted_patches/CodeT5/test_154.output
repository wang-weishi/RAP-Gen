[PATCH] result = lvalInt >>> 32;
[PATCH] result = lvalInt >>> 16;
[PATCH] result = lvalInt >> 32;
[PATCH] result = lvalInt >>> 8;
[PATCH] result = lvalInt - rvalInt;
[PATCH] result = lvalInt >>> 64;
[PATCH] result = lvalInt >> 16;
[PATCH] result = lvalInt << rvalInt;
[PATCH] result = lvalInt >>> 15;
[PATCH] result = lvalInt >>>32;
[PATCH] result = lvalInt >>> 24;
[PATCH] result = lvalInt >> 8;
[PATCH] result = lvalInt >>>64;
[PATCH] result = lvalInt >>> rvalInt;
[PATCH] result = lvalInt >>> 14;
[PATCH] result = lvalInt >>> 31;
[PATCH] result = lvalInt >>> 4;
[PATCH] result = lvalInt >>> 63;
[PATCH] result = lvalInt >>> 48;
[PATCH] result = lvalInt >>> 1;
[PATCH] result = lvalInt >>> 21;
[PATCH] result = lvalInt >>> 30;
[PATCH] result = lvalInt >>> 36;
[PATCH] result = lvalInt & rvalInt;
[PATCH] result = lvalInt >>> 6;
[PATCH] result = lvalInt >>> 3;
[PATCH] result = lvalInt >>> 7;
[PATCH] result = lvalInt >>> LONG_SHIFT;
[PATCH] result = lvalInt >> 4;
[PATCH] result = lvalInt + rvalInt;
[PATCH] result = lvalInt >>> 256;
[PATCH] result = lvalInt >>> 52;
[PATCH] result = lvalInt >>> 28;
[PATCH] result = lvalInt >>> WORD_SHIFT;
[PATCH] result = lvalInt >> 64;
[PATCH] result = lvalInt >>> long rvalInt;
[PATCH] result = lvalInt >>> 2;
[PATCH] result = lvalInt >>> BYTE_SHIFT;
[PATCH] result = lvalInt >>> 20;
[PATCH] result = lvalInt >> 2;
[PATCH] result = lvalInt >>> 60;
[PATCH] result = lvalInt | rvalInt;
[PATCH] result = lvalInt >>> 18;
[PATCH] result = lvalInt >> 24;
[PATCH] result = lvalInt >> 15;
[PATCH] result = lvalInt >>> rolInt;
[PATCH] result = lvalInt >>> 12;
[PATCH] result = lvalInt >>>siblingShiftInt;
[PATCH] result = lvalInt >>32;
[PATCH] result = lvalInt>>> 32;
[PATCH] result = l valInt >>> 32;
[PATCH] result = lvalInt >>>16;
[PATCH] result = lvalInt >>> advInt;
[PATCH] result = lvalInt >>> 17;
[PATCH] result = lvalInt >> 14;
[PATCH] result = lvalInt / rvalInt;
[PATCH] result = lvalInt % rvalInt;
[PATCH] result = lvalInt >>> 255;
[PATCH] result = lvalInt - rhsInt;
[PATCH] result = lvalInt >>> rwInt;
[PATCH] result = lvalInt >>> 13;
[PATCH] result = lvalInt >>> >= rint;
[PATCH] result = lvalInt >>> bxInt;
[PATCH] result = lvalInt << 2;
[PATCH] result = lvalInt >>><<32;
[PATCH] result = lvalInt >> 1;
[PATCH] result = lvalInt >>> 1000;
[PATCH] result = lvalInt >> 3;
[PATCH] result = lvalInt >>64;
[PATCH] result = lvalInt >>><<rint;
[PATCH] result = lvalInt >>> 11;
[PATCH] result = lvalInt >>> 247;
[PATCH] result = lvalInt >>> 38;
[PATCH] result = lvalInt << 1;
[PATCH] result = lvalInt >>>siblingBits;
[PATCH] result = lvalInt << 8;
[PATCH] result = lvalInt << 32;
[PATCH] result = lvalInt >>> WORD_BITS;
[PATCH] result = lvalInt >> 48;
[PATCH] result = lvalInt << 4;
[PATCH] result = lvalInt >>> 29;
[PATCH] result = lvalInt >>> 33;
[PATCH] result = lvalInt >>> 128;
[PATCH] result = lvalInt >> 31;
[PATCH] result = lvalToInt >>> 32;
[PATCH] result = lvalInt >>> 8192;
[PATCH] result =lvalInt >>> 32;
[PATCH] result = lvalInt >> 36;
[PATCH] result = lvalInt << 3;
[PATCH] result = lvalInt >>> maxLength;
[PATCH] result = lvalInt >>> BYTE_shift;
[PATCH] result = lvalInt >>> WORD_shift;
[PATCH] result = lvalInt >>> 19;
[PATCH] result = lvalInt >>> longBits;
[PATCH] result = lvalInt >>> LONG_SIZE;
[PATCH] result = lvalInt >>> LONG_shift;
[PATCH] result = lvalInt >>> >= rindex;
[PATCH] result = lvalInt >>> WORD_32;
[PATCH] result = lvalInt >>> LONG_BITS;
[PATCH] result = lvalInt >>> >= rbuf;
