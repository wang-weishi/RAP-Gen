[PATCH] pos.setIndex(endIndex);
[PATCH] if(endIndex < source.length()){ return null; }
[PATCH] pos.setIndex(initialIndex);
[PATCH] if(endIndex > source.length()){ return null; }
[PATCH] endIndex = parseAndIgnoreWhitespace(source, pos, endIndex);
[PATCH] parseAndIgnoreWhitespace(source, pos);
[PATCH] pos.setIndex(startIndex);
[PATCH] int sign = getImaginaryCharacter().charAt(endIndex);
[PATCH] while(startIndex < endIndex){ pos.setIndex(initialIndex);
[PATCH] if(endIndex == source.length()){ return null; }
[PATCH] pos.resetIndex(endIndex);
[PATCH] pos.setIndex(position2charno(endIndex));
[PATCH] pos.getIndex(endIndex);
[PATCH] pos.setIndex(endIndex); pos.setCharacter(c);
[PATCH] pos.setIndex(beginIndex);
[PATCH] endIndex = parseNextCharacter(source, pos, endIndex);
[PATCH] n = Math.min(n, source.length() - 1);
[PATCH] int sign = MathUtils.sign(getImaginaryCharacter());
[PATCH] endIndex = pos.getIndex();
[PATCH] pos.setErrorIndex(startIndex);
[PATCH] int sign = Math.abs(endIndex - startIndex);
[PATCH] pos.setIndex(endIndex); return null;
[PATCH] startIndex = pos.getIndex();
[PATCH] pos.setIndex(new Position(startIndex, endIndex));
[PATCH] pos.setIndex(new Integer(endIndex));
[PATCH] pos.setErrorIndex(startIndex); return null;
[PATCH] endIndex = parseNextCharacter(source, pos);
[PATCH] int i = parseAndIgnoreWhitespace(source, pos);
[PATCH] int sign = pos.getIndex() - 1;
[PATCH] pos.setIndex(initIndex(endIndex));
[PATCH] pos.setLength(endIndex);
[PATCH] pos.ensureIndex(endIndex);
[PATCH] pos.intValue() = im.intValue();
[PATCH] char c = parseNextCharacter(source, pos);
[PATCH] if(startIndex == endIndex){ return null; }
[PATCH] int sign = Math.abs(startIndex - endIndex);
[PATCH] int i = parseInt(source, pos);
[PATCH] endIndex = pos.getIndex() - 1;
[PATCH] int sign = pos.getSign();
[PATCH] pos.resetIndex(startIndex);
[PATCH] parseInt(source, pos, endIndex);
[PATCH] getImaginaryCharacter().setLength(endIndex);
[PATCH] pos.resetWithIndex(endIndex);
[PATCH] nextCharacter = parseNextCharacter(source, pos);
[PATCH] pos.getErrorIndex(startIndex);
[PATCH] pos.resetIndex();
[PATCH] endIndex = parseInt(source, endIndex);
[PATCH] pos.validateIndex(endIndex);
[PATCH] endIndex = pos.getIndex() + n;
[PATCH] int sign = parseSign(source, pos);
[PATCH] endIndex = pos.setIndex(endIndex);
[PATCH] int sign = getRealFormat().getSignCode();
[PATCH] endIndex = pos.getIndex() + 1;
[PATCH] pos.setPosition(endIndex);
[PATCH] pos.limitIndex(endIndex);
[PATCH] int i = parseNextCharacter(source, pos);
[PATCH] pos.setIndex(finalIndex);
[PATCH] pos.endIndex = pos.getIndex();
[PATCH] nextIndex = pos.getIndex();
[PATCH] int sign = getRealFormat().getSign();
[PATCH] pos.clearErrorIndex();
[PATCH] int startIndex = pos.getIndex();
[PATCH] pos.setIndex(endIndex);
[PATCH] int sign = mod.sign(endIndex);
[PATCH] int sign = getSignorableCharacter().length();
[PATCH] pos.clearIndex();
[PATCH] int realIndex = pos.getIndex();
[PATCH] int j = parseInt(source, pos);
[PATCH] pos.resetIndex(initialIndex);
[PATCH] int offset = pos.getIndex();
[PATCH] pos.setIndex(indexIndex);
[PATCH] nextChar = getImaginaryCharacter();
[PATCH] pos.checkIndex(endIndex);
[PATCH] int index = pos.getIndex();
[PATCH] int sign = mod.sign(c);
[PATCH] parseNextCharacter(source, pos);
[PATCH] position.setIndex(endIndex);
[PATCH] beginIndex = pos.getIndex();
[PATCH] pos.getIndex() = endIndex;
[PATCH] pos.setIndex(endIndex);
[PATCH] lastIndex = pos.getIndex();
[PATCH] pos.limit(endIndex);
[PATCH] parseInt(source, pos);
[PATCH] pos.expectNumber(c);
[PATCH] pos.loadMoreGuaranteed();
[PATCH] int realFormat = getRealFormat();
[PATCH] int sign = im.sign();
[PATCH] index = pos.getIndex();
[PATCH] pos.getIndex();
[PATCH] pos.clearLength();
[PATCH] nextToken(c);
[PATCH] pos.skipChildren();
[PATCH] pos.clearPosition();
[PATCH] nextCharacter = getChar();
[PATCH] nextToken();
[PATCH] pos.reset();
[PATCH] checkLenient();

);
;
