[PATCH] typeAdapter = typeAdapter.wrapWithAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.restrictByNotNullOrUndefined();
[PATCH] typeAdapter = typeAdapter.trimByNotNullOrUndefined();
[PATCH] typeAdapter = typeAdapter.internally();
[PATCH] typeAdapter = typeAdapter.intern();
[PATCH] typeAdapter = typeAdapter.wrappingInstance(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithCollision(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithReflection(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithTypeInclusion(annotation);
[PATCH] typeAdapter = typeAdapter.valueFor(annotation);
[PATCH] typeAdapter = typeAdapter.thenCreateUsingAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.withStaticTyping();
[PATCH] typeAdapter = annotation.valueOf(typeAdapter);
[PATCH] typeAdapter = typeAdapter.withAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.notNullSafe();
[PATCH] typeAdapter = annotation.valueAsType(typeAdapter);
[PATCH] typeAdapter = typeAdapter.notNull();
[PATCH] typeAdapter = typeAdapter.wrappingFactory(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithCreator(annotation);
[PATCH] typeAdapter = typeAdapter.onlyAffectsClassAnnotations();
[PATCH] typeAdapter = typeAdapter.filterByNotNullOrUndefined();
[PATCH] typeAdapter = typeAdapter.copy();
[PATCH] typeAdapter = typeAdapter.wrapWithGson(gson);
[PATCH] typeAdapter = typeAdapter.intersectsWith(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithAnnotations(annotation);
[PATCH] typeAdapter = typeAdapter.withGson(gson);
[PATCH] typeAdapter = typeAdapter.wrapInAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.withAnnotations(annotation);
[PATCH] typeAdapter = typeAdapter.autoboxesTo();
[PATCH] typeAdapter = typeAdapter.valueOf(annotation);
[PATCH] typeAdapter = typeAdapter.withProperties(annotation.properties());
[PATCH] typeAdapter = typeAdapter.wrapByAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.intersects(annotation.value());
[PATCH] typeAdapter = typeAdapter.wrapWithStatic(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithNullSafe();
[PATCH] typeAdapter = typeAdapter.withTypeAdapter(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithShared(annotation);
[PATCH] typeAdapter = typeAdapter.byAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.withSimpleName("@JsonAdapter");
[PATCH] typeAdapter = typeAdapter.narrowBy(annotation.value());
[PATCH] typeAdapter = typeAdapter.wrappingInstance();
[PATCH] typeAdapter = typeAdapter.wrapIfNecessary();
[PATCH] typeAdapter = typeAdapter.withInternalName(annotation.name());
[PATCH] typeAdapter = typeAdapter.ifNull();
[PATCH] typeAdapter = typeAdapter.wrapWithReflection(fieldType);
[PATCH] typeAdapter = typeAdapter.intersectWith(annotation);
[PATCH] typeAdapter = typeAdapter.withAdditionalAnnotations(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithRest(annotation);
[PATCH] typeAdapter = typeAdapter.canCreateUsingAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithPath(annotation);
[PATCH] typeAdapter = typeAdapter.narrowBy(annotation.value);
[PATCH] typeAdapter = typeAdapter.maybeAddAutoboxes(annotation);
[PATCH] typeAdapter = typeAdapter.onlyAffectsClassDef();
[PATCH] typeAdapter = typeAdapter.trimByVisibility();
[PATCH] typeAdapter = typeAdapter.internals();
[PATCH] typeAdapter = typeAdapter.intersects(annotation);
[PATCH] typeAdapter = typeAdapter.wrapWithVisibility(annotation.visible());
[PATCH] typeAdapter = typeAdapter.withDefaultImpl(annotation);
[PATCH] typeAdapter = typeAdapter.wrappingHandler(annotation);
[PATCH] typeAdapter = typeAdapter.withProperties(annotation.getAnnotations());
[PATCH] typeAdapter = annotation.valueOf()? typeAdapter : null;
[PATCH] typeAdapter = typeAdapter.wrapWithNull(annotation);
[PATCH] typeAdapter = typeAdapter.getInternalName();
[PATCH] typeAdapter = typeAdapter.wrapAtScope(annotation);
[PATCH] typeAdapter = typeAdapter.ifNotNull();
[PATCH] typeAdapter = typeAdapter.internate();
[PATCH] typeAdapter = typeAdapter.validate(annotation);
[PATCH] typeAdapter = annotation.valueOf();
[PATCH] typeAdapter = typeAdapter.unwrappingInstance(annotation);
[PATCH] typeAdapter = typeAdapter.safeAdd(annotation);
[PATCH] typeAdapter = typeAdapter.noSuperclass();
[PATCH] typeAdapter = typeAdapter.wrappingClassIfNull(annotation);
[PATCH] typeAdapter = typeAdapter.narrowBy(fieldType);
[PATCH] typeAdapter = typeAdapter.wrapInReflection();
[PATCH] typeAdapter = typeAdapter.merge(annotation);
[PATCH] typeAdapter = typeAdapter.getValue();
[PATCH] typeAdapter = typeAdapter.ifNullSafe();
[PATCH] typeAdapter = typeAdapter.unwrappingInstance();
[PATCH] typeAdapter = typeAdapter.withParseType(annotation);
[PATCH] typeAdapter = typeAdapter.filter(new NullSafe());
[PATCH] typeAdapter = typeAdapter.canCreateUsingDefault();
[PATCH] typeAdapter = typeAdapter.wrappingDecorator();
[PATCH] typeAdapter = typeAdapter.wrapWithNull(fieldType);
[PATCH] typeAdapter = typeAdapter.wrapWithType(fieldType);
[PATCH] typeAdapter = typeAdapter.clazz.getSuperclass();
[PATCH] typeAdapter = typeAdapter.wrapWithSubTypes(annotation);
[PATCH] typeAdapter = typeAdapter.wrap();
[PATCH] typeAdapter = typeAdapter.clone();
[PATCH] typeAdapter = typeAdapter.thenCreateUsingDefault(fieldType);
[PATCH] typeAdapter = typeAdapter.withDefaultImpl(fieldType);
[PATCH] typeAdapter = typeAdapter.withProperties(annotation.fields());
[PATCH] typeAdapter = typeAdapter.wrapWithVisibility(annotation);
[PATCH] typeAdapter = typeAdapter.unwrappingHandlerIfNotFound();
[PATCH] typeAdapter = typeAdapter.safeInstance();
[PATCH] typeAdapter = typeAdapter.safeCreateInstance();
[PATCH] typeAdapter = typeAdapter.withProperties(annotation.valueOf());
[PATCH] typeAdapter = typeAdapter.compatibleWith(annotation);
[PATCH] typeAdapter = typeAdapter.toObjectType();
[PATCH] typeAdapter = typeAdapter.wrapWithUnwrapped(annotation);
[PATCH] typeAdapter = typeAdapter.intersects(annotation.value);
