[PATCH] Preconditions.checkState(n.getType() == Token.NAME);
[PATCH] n.putBooleanProp(Node.IS_BOOLEAN_RESULT, true);
[PATCH] Preconditions.checkState(n.getType() == Token.BOOLEAN);
[PATCH] Preconditions.checkState(n.getType() == Token.TYPE);
[PATCH] Preconditions.checkState(n.getType() == Token.STRING);
[PATCH] Preconditions.checkArgument(n.getType() == Token.NAME);
[PATCH] Preconditions.checkArgument(n.getType() == Token.BOOLEAN);
[PATCH] checkState(n.getType() == Token.NAME);
[PATCH] checkState(n.getType() == Token.BOOLEAN);
[PATCH] Preconditions.checkState(n.getType() == Token.NOT);
[PATCH] n.setBooleanProp(Node.IS_BOOLEAN_RESULT, true);
[PATCH] n.getBooleanProp(Node.IS_BOOLEAN_RESULT);
[PATCH] n.setJSType(getNativeType(BOOLEAN_RESULT_TYPE));
[PATCH] n.setJSType(BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkArgument(n.getType() == Token.STRING);
[PATCH] Preconditions.checkState(n.getType() == Token.NUMBER);
[PATCH] Preconditions.checkState(n.getType() == Token.IS);
[PATCH] checkArgument(n.getType() == Token.BOOLEAN);
[PATCH] n.setType(getNativeType(BOOLEAN_RESULT_TYPE));
[PATCH] Preconditions.checkState(n.getType() == Token.CALL);
[PATCH] n.setJSType(BooleanNode.valueOf(c));
[PATCH] checkNotBoolean(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] checkState(n.getType() == Token.STRING);
[PATCH] Preconditions.checkArgument(n.getType() == Token.TYPE);
[PATCH] checkForEquality(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] checkNotString(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(n.getType() == Token.LONG);
[PATCH] Preconditions.checkState(n.getType() == Token.DATE);
[PATCH] checkResult(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] ret = n.getBooleanProp(Node.IS_BOOLEAN_RESULT);
[PATCH] checkNotStrictEquality(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] checkState(n.getType() == Token.INSTANCEOF);
[PATCH] checkArgument(n.getType() == Token.NAME);
[PATCH] Preconditions.checkArgument(n.getType() == Token.NOT);
[PATCH] Preconditions.checkState(NodeUtil.isLiteralValue(n));
[PATCH] return n.getBooleanProp(Node.IS_BOOLEAN_RESULT);
[PATCH] checkIsBooleanResult(n, n.getFirstChild());
[PATCH] assertState(n.getType() == Token.BOOLEAN);
[PATCH] checkArgument(n.getType() == Token.STRING);
[PATCH] n.putBooleanProp(Node.IS_BOOLEAN, true);
[PATCH] checkNotEquality(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] checkState(n.getType() == Token.TYPE);
[PATCH] checkState(n.getType() == Token.THIS);
[PATCH] checkEquality(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] assertState(n.getType() == Token.NAME);
[PATCH] checkVar(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] stringNodesToSkip.add(n);
[PATCH] n.getProp(Node.IS_BOOLEAN_RESULT);
[PATCH] visitBooleanExpression(n);
[PATCH] assertIsBooleanResult(n, n.getFirstChild());
[PATCH] assertIsLiteralValue(n.getFirstChild());
[PATCH] stringNodesToRename.add(n);
[PATCH] assertIsBoolean(n.getFirstChild());
[PATCH] t = n.getFirstChild();
[PATCH] p = n.getFirstChild().getNext();
[PATCH] Preconditions.checkState(isBooleanResult(n));
[PATCH] value = n.getBooleanValue();
[PATCH] n.setBoolean(c);
[PATCH] n.setBoolean(true);
[PATCH] Preconditions.checkState(n.hasChildren());
[PATCH] visitNumberLiteral(n.getBooleanValue());
[PATCH] checkIsBooleanResult(n, true);
[PATCH] visitNumber(n.getBooleanValue());
[PATCH] checkNotBoolean(n);
[PATCH] checkNotString(n,"Boolean result");
[PATCH] processBooleanExpression(n);
[PATCH] checkLenient();
[PATCH] checkIsBooleanResult(n);
[PATCH] p = n.getFirstChild();
[PATCH] checkIsObjectLitKey(n, value);
[PATCH] checkIsBooleanResult(n, value);
[PATCH] visitType(n, Token.BOOLEAN);
[PATCH] checkNotBoolean(n, value);
[PATCH] checkNotObject(n);
[PATCH] checkSimpleOperatorType(n);
[PATCH] handleType(n.getFirstChild());
[PATCH] n.setBoolean(value);
[PATCH] visitType(n.getType());
[PATCH] checkIsBoolean(n, true);
[PATCH] checkKind(n, Token.BOOLEAN);
[PATCH] checkNotBoolean(n, true);
[PATCH] visitBooleanExpr(n, value);
[PATCH] testToken(n, Token.BOOLEAN);
[PATCH] visitNumber(n.getDouble());
[PATCH] checkType(n.getJSType());
[PATCH] assertIsBooleanResult(n, true);
[PATCH] precedence(n.getType());
[PATCH] visitBoolean(n, value);
[PATCH] checkIsBoolean(n, value);
[PATCH] visitBoolean(n);
[PATCH] return n.getBooleanValue();
[PATCH] checkIsBoolean(n);
[PATCH] checkNode(n);
[PATCH] n.setIsQualifiedName();
[PATCH] visitBooleanExpr(n);
[PATCH] checkNextSlot(n);
[PATCH] parseBooleanExpression(n);
[PATCH] checkNotNull(n);
[PATCH] visitBooleanLiteral(n);
[PATCH] checkNotNull(n);
