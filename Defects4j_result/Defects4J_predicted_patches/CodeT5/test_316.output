[PATCH] checkState(currentFolderInputStream!= null);
[PATCH] checkState(!currentFolderInputStream == null);
[PATCH] checkState(position == 0);
[PATCH] deferredBlockStreams.clear();
[PATCH] initBlockStreams();
[PATCH] initBlock();
[PATCH] deferredBlockStreams.add(currentFolderInputStream);
[PATCH] boolean nextMissingCrc = getNextCrc();
[PATCH] checkState(inputStreamStack.isEmpty());
[PATCH] checkState(!stdinStack.isEmpty());
[PATCH] checkState(currentFolderIndex < 0);
[PATCH] Preconditions.checkState(position == 0);
[PATCH] ArrayList deferredBlockStreams = Lists.newArrayList();
[PATCH] checkState(currentFolderInputStream == null);
[PATCH] checkState(currentEntryIndex == 0);
[PATCH] Collections.sort(deferredBlockStreams);
[PATCH] checkState(currentFolderIndex == -1);
[PATCH] checkState(inStreamStack.isEmpty());
[PATCH] checkState(currentFolderIndex == 0);
[PATCH] initDeque();
[PATCH] deferredBlockStreams.add(0);
[PATCH] final ArrayList deferredBlockStreams = getDeque();
[PATCH] CollectionUtils.sort(deferredBlockStreams);
[PATCH] final ArrayList deferredBlockStreams = getLinkedList();
[PATCH] Set deferredBlockStreams = Sets.newHashSet();
[PATCH] deferredBlockStreams.remove(0);
[PATCH] initDeferredBlockStreams();
[PATCH] assertState(currentFolderInputStream!= null);
[PATCH] checkState(currentEntryIndex < 0);
[PATCH] clearBlockStreams();
[PATCH] currentFolderInputStream = getNextSevenZEntry();
[PATCH] checkState(currentFileInputStream!= null);
[PATCH] checkState(!finishedWithNextEntry());
[PATCH] checkState(!finishedProcessing");
[PATCH] checkState();
[PATCH] checkState(currentDirectoryInputStream!= null);
[PATCH] ArrayList deferredBlockStreams.clear();
[PATCH] checkState(currentEntryIndex < 7);
[PATCH] reset();
[PATCH] clearDeferredBlockStreams();
[PATCH] checkState(position == 1);
[PATCH] checkState(nextFile!= null);
[PATCH] deferredBlockStreams.pop();
[PATCH] checkState(!finishedProcessing());
[PATCH] clearBuffer();
[PATCH] dirtyBlockStreams.clear();
[PATCH] INIT_NEW_STREAMS();
[PATCH] deferredBlockStreams.clear();
[PATCH] assert state == State.RUNNING;
[PATCH] checkState(index == 0);
[PATCH] collectDeferredBlockStreams();
[PATCH] initIterator();
[PATCH] clearBlock();
[PATCH] ensureOpen();
[PATCH] initRandomAccessFile();
[PATCH] DeferredBlockStreams.clear();
[PATCH] removeCurrentEntry();
[PATCH] quickPeekBlock();
[PATCH] initialiseBlock();
[PATCH] quickPeek();
[PATCH] clearCurrentStream();
[PATCH] closeEntry();
[PATCH] loadMoreGuaranteed();
[PATCH] init();
[PATCH] initLocalFileData();
[PATCH] initBuffer();
[PATCH] initBlockStream();
[PATCH] initNextEntry();
[PATCH] initCurrentFileInputStream();
[PATCH] clearCurrentBlock();
[PATCH] lazyInitBlock();
[PATCH] initCurrentStream();
[PATCH] flushBlockStreams();
[PATCH] removeAllStreams();
[PATCH] clearCachedData();
[PATCH] closeCurrentEntry();
[PATCH] initCachedStream();
[PATCH] initNewStream();
[PATCH] initState();
[PATCH] initReadStream();
[PATCH] initLiveStream();
[PATCH] initThreadLocal();
[PATCH] initBlocking();
[PATCH] clearStack();
[PATCH] readBlock();
[PATCH] clearLoop();
[PATCH] closeBlock();
[PATCH] initBlocks();
[PATCH] flushBlock();
[PATCH] initToProcess();
[PATCH] initCheck();
[PATCH] initLoop();
[PATCH] lazyInit();
[PATCH] initDeferred();
[PATCH] clear();
[PATCH] finish();
[PATCH] pop();
);
*/
;
