[PATCH] rawClass = rawClass.getSuperclass();
[PATCH] _assertRawClass(rawClass);
[PATCH] _assertSubclass(_baseType, rawClass);
[PATCH] rawClass = rawClass.getGenericSuperclass();
[PATCH] _assertSubclass(rawClass, Map.class);
[PATCH] rawClass = _fixAccess(rawClass);
[PATCH] _assertSubclass(_constructType(rawClass));
[PATCH] rawClass = ClassUtil.wrapperType(rawClass);
[PATCH] _assertSubclass(_mapType, rawClass);
[PATCH] _checkInvalidRawClass(rawClass);
[PATCH] rawClass = rawClass.getAnnotationIntrospector();
[PATCH] _assertSubclass(rawClass, Collection.class);
[PATCH] _checkNotNull(rawClass);
[PATCH] rawClass = rawClass.getComponentType();
[PATCH] _assertSubclass(_cachedHashMapType, rawClass);
[PATCH] _assertSubclass(rawClass, Object.class);
[PATCH] _assertSubclass(_unknownType(), rawClass);
[PATCH] rawClass = _convertToRawClass(rawClass);
[PATCH] rawClass = rawClass.getInterfaces() [0];
[PATCH] rawClass = _normalizeClassType(rawClass);
[PATCH] _assertSubclass(rawClass, _mapType);
[PATCH] _assertSubclass(rawClass, HashMap.class);
[PATCH] _assertType(rawClass, Map.class);
[PATCH] _assertInvalidRawClass(rawClass);
[PATCH] rawClass = Primitives.wrap(rawClass);
[PATCH] _assertSimpleType(rawClass, Map.class);
[PATCH] rawClass = _checkInvalidRawClass(rawClass);
[PATCH] rawClass = _ensureRawClass(rawClass);
[PATCH] _assertSubclass(rawClass, map.class);
[PATCH] _assertSubclass(_containerType, rawClass);
[PATCH] _assertMultiType(rawClass, Map.class);
[PATCH] rawClass = rawClass.getDeclaredType();
[PATCH] _assertSimpleType(rawClass);
[PATCH] _assertImpl(rawClass, Map.class);
[PATCH] rawClass = _normalizeRawClass(rawClass);
[PATCH] rawClass = ClassUtil.fixAccess(rawClass);
[PATCH] _addFactoryAnnotations(rawClass, Map.class);
[PATCH] _assertSubclass(_ctor, rawClass);
[PATCH] rawClass = _fixBounds(rawClass);
[PATCH] rawClass = rawClass.getSuperClass();
[PATCH] _assertChildCount(2, rawClass);
[PATCH] _assertSubclass(_collectionType, rawClass);
[PATCH] _assertClass(rawClass);
[PATCH] rawClass = _convertToMapClass(rawClass);
[PATCH] rawClass = rawClass.getEnclosingClass();
[PATCH] _assertSubclass(_mapType.getRawClass());
[PATCH] rawClass = checkRawClass(rawClass);
[PATCH] rawClass = rawClass.getDeclaredSuperclass();
[PATCH] rawClass = normalizeClassType(rawClass);
[PATCH] rawClass = cleanRawClass(rawClass);
[PATCH] rawClass = _checkNotNull(rawClass);
[PATCH] _assertDesc(rawClass, false);
[PATCH] _checkState(rawClass.isPrimitive());
[PATCH] _assertSubclass(rawClass, _baseType);
[PATCH] rawClass = ClassUtil.convertToMap(rawClass);
[PATCH] _checkState(rawClass.isArray());
[PATCH] _assertBaseType(rawClass);
[PATCH] rawClass = Object.class.getSuperclass();
[PATCH] rawClass = resolveRawClass(rawClass);
[PATCH] rawClass = _fixReference(rawClass);
[PATCH] rawClass =RawClass.getSuperclass();
[PATCH] _checkRawClass(rawClass);
[PATCH] rawClass = _fixSignature(rawClass);
[PATCH] _validateType(rawClass);
[PATCH] _assertSubclass(_classes, rawClass);
[PATCH] rawClass = Map.class.getSuperclass();
[PATCH] _checkState(rawClass.isAssignableFrom());
[PATCH] _assertTypeCacheVisible(rawClass);
[PATCH] _assertCollectionType(rawClass);
[PATCH] rawClass = rawClass.getDeclaredClass();
[PATCH] _assertMetaClass(rawClass);
[PATCH] _assertValidRawClass(rawClass);
[PATCH] _checkAndFixAccess(rawClass);
[PATCH] _assertSubclass(_mapType(rawClass));
[PATCH] _configureRawClass(rawClass);
[PATCH] rawClass = rawClass.getParent();
[PATCH] rawClass = rawClass.getSimpleClass();
[PATCH] _checkInvalidClass(rawClass);
[PATCH] _assertContainerType(rawClass);
[PATCH] _assertIsPrimitive(rawClass);
[PATCH] rawClass = _getRawClass();
[PATCH] _assertOpen(rawClass);
[PATCH] rawClass = cls.getSuperclass();
[PATCH] _checkSimpleType(rawClass);
[PATCH] _assertrawClass(rawClass);
[PATCH] _assertArgCount(2);
[PATCH] _removeCachedType(rawClass);
[PATCH] _assertNotNull(rawClass);
[PATCH] _assertConcrete(rawClass);
[PATCH] _checkClass(rawClass);
[PATCH] _fixAccess(rawClass);
[PATCH] checkNotNull(rawClass);
[PATCH] _clearCachedType();
[PATCH] _validateState();
[PATCH] _checkLocked();
[PATCH] _clearPrefix();
[PATCH]

);
*/
