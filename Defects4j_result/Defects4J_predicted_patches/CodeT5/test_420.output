[PATCH] str = str.trim();
[PATCH] str = PrettyPrinter.appendQuoted(str);
[PATCH] str = replace(str, padChar);
[PATCH] str = strip(str, size);
[PATCH] str = pruneBuffer(size);
[PATCH] str = padding + str.length();
[PATCH] StrBuilder.this.append(separator);
[PATCH] str = ensureCapacity(size + width);
[PATCH] str = pruneBuffer(size + width);
[PATCH] str = str.toCharArray();
[PATCH] str = appendCharacter(str, padChar);
[PATCH] str = wrap(str);
[PATCH] str = width - str.length();
[PATCH] str = normalise(str);
[PATCH] StrBuilder.this.append(str);
[PATCH] str = str.replace('/','');
[PATCH] str = validateWidth(width);
[PATCH] if(str == null){ return this; }
[PATCH] str = prune(str.length());
[PATCH] str = trim(str);
[PATCH] matcher.append(str, 0, size);
[PATCH] str = expand(str, width);
[PATCH] str = strip(str);
[PATCH] str = removeTrailingSpaces(str);
[PATCH] str = convert(str);
[PATCH] str = StringUtils.deleteWhitespace(str);
[PATCH] str = appendLeftPad(str, width);
[PATCH] str = encapsulate(str);
[PATCH] str = padChar + str.toCharArray();
[PATCH] str = PrettyPrinter.appendPadding(str);
[PATCH] str = strip(str, width);
[PATCH] StrBuilder.this.append(padChar);
[PATCH] str = strip(str, size + width);
[PATCH] str = appendCharacter(( char)padChar);
[PATCH] str = adjustSize(size + width);
[PATCH] str = prefix + str.length();
[PATCH] trimToSize(size + width);
[PATCH] str = padding + str.toCharArray();
[PATCH] str = padChar + str.length();
[PATCH] buffer[size] = padChar;
[PATCH] buffer[size++] = padChar;
[PATCH] int len = length - str.length();
[PATCH] str = preserveWhitespace(str);
[PATCH] str = normalise(str.toCharArray());
[PATCH] str = resize(size + width);
[PATCH] str = clearBuffer(size);
[PATCH] str = strip(str, null);
[PATCH] ensureCapacity(size + width);
[PATCH] str = escape(str);
[PATCH] str = removeTrailingSeparator(str);
[PATCH] matcher.append(str, 0, width);
[PATCH] str = wrapper.append(str);
[PATCH] str = size + str.length();
[PATCH] str = filterToString(str, true);
[PATCH] size += str.length();
[PATCH] str = Character.toString(str);
[PATCH] str = strip(str, true);
[PATCH] str = str.toLowerCase();
[PATCH] str = str.replace('/', '-');
[PATCH] str = stripTrailingSpaces(str);
[PATCH] str = normalise(str, width);
[PATCH] str = cleanBuffer(size);
[PATCH] str = width + str.length();
[PATCH] str = stick(str, size + width);
[PATCH] str = width > str.length();
[PATCH] str = filterNullText(str, size);
[PATCH] str = prepare(str);
[PATCH] str = validateRange(str, width);
[PATCH] str = validateBounds(str, size);
[PATCH] str = normalizePadChar(str);
[PATCH] str = normalize(str);
[PATCH] str = obj.toString();
[PATCH] str = convertWidth(str);
[PATCH] str = builder.append(str);
[PATCH] str = clean(str);
[PATCH] str = strip(str, false);
[PATCH] str = filterNullText(str);
[PATCH] str = prune(str);
[PATCH] str = _trim(str);
[PATCH] str = padChar + str.toUpperCase();
[PATCH] str = filter(str, width);
[PATCH] str = toStr(str);
[PATCH] str = removeWhitespace(str);
[PATCH] int len = str.length();
[PATCH] str = convert(str, false);
[PATCH] str = filter(str, size + width);
[PATCH] str = reverse(str);
[PATCH] str = new Str(str.length());
[PATCH] str = convert(str, true);
[PATCH] str = replace(str, width);
[PATCH] trimToSize(size);
[PATCH] validateWidth(width);
[PATCH] str = replace(str, size);
[PATCH] str = StrBuilder.append(str);
[PATCH] str = filterToString(str);
[PATCH] str = normalizeWidth(str);
[PATCH] str = Joiner.on("0");
[PATCH] str = validateBounds(str);
[PATCH] str = str.replace('/', '.');
[PATCH] str = maskNull(str);
