[PATCH] t.report(child, INVALIDATION);
[PATCH] checkState(child.getType() == Token.STRING);
[PATCH] JSType type = child.getJSType();
[PATCH] JSType typeSystem = typeSystem.getType(child);
[PATCH] t.report(child, ILLEGAL_NAME);
[PATCH] validateState(child.getType() == Token.STRING);
[PATCH] JSType qName = child.getJSType();
[PATCH] t.report(child, OBJECT_LITERAL_EXPECTED_ERROR);
[PATCH] child.setJSType(getNativeType(OBJECT_TYPE));
[PATCH] Node qName = child.getFirstChild();
[PATCH] t.report(child, UNSAFE_OBJECT_TYPE);
[PATCH] JSType typeSystem = t.getTypeFactory();
[PATCH] Preconditions.checkState(NodeUtil.isName(child));
[PATCH] boolean skipRenaming = child.getChildCount() < 2;
[PATCH] Preconditions.checkState(NodeUtil.isString(child));
[PATCH] assertState(child.getType() == Token.STRING);
[PATCH] child.getNext().setIsSyntheticBlock(true);
[PATCH] t.report(child, STRING_LITERAL_EXPECTED_ERROR);
[PATCH] ChildTraversal.traverse(compiler, child, this);
[PATCH] logger.info("JS property:" + child.getType());
[PATCH] t.report(child, OBJECT_LITERAL_ERROR);
[PATCH] while(child.getType() == Token.STRING){
[PATCH] child.setJSType(getNativeType(ARRAY_TYPE));
[PATCH] JSType typeSystem = getTypeSystem(t, child);
[PATCH] Node qName = child.getNext();
[PATCH] child.setIsSyntheticBlock(true);
[PATCH] JSType q = child.getJSType();
[PATCH] boolean skipRenaming = child.getChildCount() == 1;
[PATCH] t.report(child, PROTOTYPE_GET);
[PATCH] jsdoc.addChildToBack(child);
[PATCH] JSType typeSystem = t.getTypeRegistry();
[PATCH] rootTypes.put(child, new Property(child));
[PATCH] t.report(child, MULTIPLE_OBJECT_TYPE);
[PATCH] child.setType(getType(child));
[PATCH] Preconditions.checkNotNull(child);
[PATCH] final Node qName = child.getFirstChild();
[PATCH] new Node(Token.STRING, child);
[PATCH] JSType typeSystem = child.getJSType();
[PATCH] child.getType() = child.getType();
[PATCH] JSType typeSystem = getStandardType(t, child);
[PATCH] child = handleObjectLit(t, child);
[PATCH] Node qName = child.getType();
[PATCH] Token qName = child.getType();
[PATCH] t.report(child, UNSAFE_TYPE);
[PATCH] boolean skipRenaming = child.getNext().getType();
[PATCH] child.getType() == Token.STRING;
[PATCH] JSType type = t.getType(child);
[PATCH] JSType ctype = child.getJSType();
[PATCH] t.report(child, DUPLICATE_NAME);
[PATCH] child.setIsGetProp(true);
[PATCH] t.report(child, PARSE_ERROR);
[PATCH] Child q = child.getNext();
[PATCH] validateName(child, t.getModule());
[PATCH] child.getNext().setString("");
[PATCH] t.report(child, UNSAFE_COLLECTION);
[PATCH] t.report(child, UNDEFINED_TYPE);
[PATCH] JSType cv = child.getJSType();
[PATCH] child.getNext().setString(".");
[PATCH] processObjectLit(t, child);
[PATCH] child.getType() = Token.STRING;
[PATCH] t.report(child, SINGLE_NAME);
[PATCH] JSType typeSystem = getType(child);
[PATCH] child.getNext().setString("object");
[PATCH] JSType type = getValueType(child);
[PATCH] t.getCompiler().reportCodeChange();
[PATCH] final Node qName = child.getType();
[PATCH] child.setIsNoSideEffectsCall();
[PATCH] t.report(child, OBJECT_NAME);
[PATCH] JSType typeSystem = compiler.getTypeRegistry();
[PATCH] child.getNext().setString("[object");
[PATCH] t.report(child, OBJECT_Literals);
[PATCH] final Node qName = child.getNext();
[PATCH] child.getNext().setString("T");
[PATCH] child.getNext().setString("$$");
[PATCH] validateName(t, child);
[PATCH] JSType type = getType(child);
[PATCH] new Node(Token.NAME, child);
[PATCH] t.report(child, OBJECT_LIT);
[PATCH] JSType type = getJSType(child);
[PATCH] Child qName = child.getFirstChild();
[PATCH] child = child.getNext();
[PATCH] child.setIsQualifiedName(true);
[PATCH] child.setIsString(true);
[PATCH] child.setIsObjectLit();
[PATCH] validateName(child.getType());
[PATCH] tokenStream(t, child);
[PATCH] compiler.reportCodeChange();
[PATCH] n = child.getNext();
[PATCH] validateName(child, t);
[PATCH] child.setNext(null);
[PATCH] n.removeChild(child);
[PATCH] jscompiler.reportCodeChange();
[PATCH] t.report(child);
[PATCH] t.reportCodeChange();
[PATCH] validateName(child);
[PATCH] nextTimeMillis();
[PATCH] ;

);
;
