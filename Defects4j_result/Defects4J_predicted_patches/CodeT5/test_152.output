[PATCH] int indexOfDot = namespace.indexOf('.', minimumModule);
[PATCH] int indexOfDot = namespace.indexOf('.', prefixNS);
[PATCH] int indexOfDot = namespace.indexOf('.', prefixNs);
[PATCH] int indexOfDot = namespace.indexOf('.', minModule);
[PATCH] int indexOfDot = namespace.indexOf('.', prefixns);
[PATCH] int indexOfDot = namespace.indexOf('.', startIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', startModule);
[PATCH] int indexOfDot = namespace.indexOf('.', firstModule);
[PATCH] int indexOfDot = namespace.indexOf('.', startOffset);
[PATCH] int indexOfDot = namespace.indexOf('.', startingModule);
[PATCH] int indexOfDot = namespace.indexOf('.', start);
[PATCH] int indexOfDot = namespace.indexOf('.', lowerModule);
[PATCH] int indexOfDot = namespace.indexOf('.');
[PATCH] int indexOfDot = namespace.lastIndexOf('.');
[PATCH] int indexOfDot = namespace.indexOf('.', 4);
[PATCH] int indexOfDot = namespace.indexOf('.', prefix ns);
[PATCH] int indexOfDot = namespace.indexOf('.', prefixLen);
[PATCH] int indexOfDot = namespace.indexOf('.', startOfModule);
[PATCH] int indexOfDot = namespace.indexOf('.', ns);
[PATCH] int indexOfDot = namespace.indexOf('.', pos);
[PATCH] int indexOfDot = namespace.indexOf('.', startIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', offset);
[PATCH] int indexOfDot = namespace.indexOf('.', beforeModule);
[PATCH] int indexOfDot = namespace.indexOf('.', previousModuleIndex);
[PATCH] int indexOfDot = namespace.indexOf(".', minimumModule);
[PATCH] int indexOfDot = namespace.indexOf('.', baseModule);
[PATCH] int indexOfDot = namespace.indexOf('.', nextModuleIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', expectedModuleIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', startName);
[PATCH] int indexOfDot = namespace.indexOf('.', startBracket);
[PATCH] int indexOfDot = namespace.indexOf('.', numberNode);
[PATCH] int indexOfDot = namespace.indexOf('.', 3);
[PATCH] int indexOfDot = namespace.indexOf('.',minimumModule);
[PATCH] int indexOfDot = namespace.indexOf('.', getMinimumModuleIndex());
[PATCH] int indexOfDot = namespace.indexOf('.', startPosition);
[PATCH] int indexOfDot = namespace.indexOf('.', fromModule);
[PATCH] int indexOfDot = namespace.indexOf('.', offsetElement);
[PATCH] int indexOfDot = namespace.indexOf('.', version);
[PATCH] int indexOfDot = namespace.indexOf('.', START_MODULE);
[PATCH] int indexOfDot = namespace.indexOf('.', initialModule);
[PATCH] int indexOfDot = namespace.indexOf('.', startPos);
[PATCH] int indexOfDot = namespace.indexOf('.', 0);
[PATCH] int indexOfDot = namespace.indexOf('.', headerSize);
[PATCH] int indexOfDot = prefixNS.indexOf('.');
[PATCH] int indexOfDot = namespace.indexOf('.', width);
[PATCH] int indexOfDot = namespace.indexOf('.', index);
[PATCH] int indexOfDot = namespace.indexOf('.', startPosition);
[PATCH] int indexOfDot = namespace.indexOf('.', i);
[PATCH] int indexOfDot = namespace.indexOf('.', minimalModule);
[PATCH] int indexOfDot = namespace.indexOf('.', startAnnotation);
[PATCH] int indexOfDot = namespace.indexOf('.', absoluteModuleCount);
[PATCH] int indexOfDot = namespace.indexOf('.', startNode);
[PATCH] int indexOfDot = namespace.indexOf('.', startLocation);
[PATCH] int indexOfDot = namespace.indexOf('.', 2);
[PATCH] int indexOfDot = namespace.indexOf('.', beginningModule);
[PATCH] int indexOfDot = namespace.indexOf('.', lessThan);
[PATCH] int indexOfDot = namespace.indexOf('.', startOffset);
[PATCH] int indexOfDot = namespace.indexOf('.', prefixNameSpace);
[PATCH] int indexOfDot = namespace.indexOf('.", minimumModule);
[PATCH] int indexOfDot = namespace.indexOf('.', enclosingModule);
[PATCH] int indexOfDot = namespace.indexOf('.', lastModule);
[PATCH] int indexOfDot = namespace.indexOf('.', prefixSep);
[PATCH] int indexOfDot = namespace.indexOf('.', length);
[PATCH] int indexOfDot = namespace.indexOf('.', requiresLevel);
[PATCH] int indexOfDot = namespace.indexOf('.', minLength);
[PATCH] int indexOfDot = namespace.indexOf('.', namespaces.size());
[PATCH] int indexOfDot = namespace.indexOf('.', requiredModule);
[PATCH] int indexOfDot = namespace.indexOf('.', lowerModuleCount);
[PATCH] int indexOfDot = namespace.indexOf('.', simpleName);
[PATCH] int indexOfDot = namespace.indexOf('.', size);
[PATCH] int indexOfDot = namespace.indexOf('.', padding);
[PATCH] int indexOfDot = namespace.indexOf('.', position - 1);
[PATCH] int indexOfDot = namespace.indexOf('.', left);
[PATCH] int indexOfDot = namespace.indexOf('.', xmin);
[PATCH] int indexOfDot = namespace.indexOf('.', minValue);
[PATCH] int indexOfDot = namespace.indexOf('.', startLen);
[PATCH] int indexOfDot = namespace.indexOf('.', 1);
[PATCH] int indexOfDot = namespace.indexOf('.', len);
[PATCH] int indexOfDot = namespace.indexOf('.', absoluteModuleIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', argument);
[PATCH] int indexOfDot = namespace.indexOf('.', precedingModule);
[PATCH] int indexOfDot = namespace.indexOf('.', origName);
[PATCH] int indexOfDot = namespace.indexOf('.', name);
[PATCH] int indexOfDot = namespace.indexOf('.', startRelativeModule);
[PATCH] int indexOfDot = namespace.indexOf('.', variableName);
[PATCH] int indexOfDot = namespace.indexOf('.', idx);
[PATCH] int indexOfDot = namespace.indexOf('.', matchingModuleCount);
[PATCH] int indexOfDot = namespace.indexOf('.', expectedModuleCount);
[PATCH] int indexOfDot = namespace.indexOf('.', n);
[PATCH] int indexOfDot = namespace.indexOf('.', START_NAMESPACE);
[PATCH] int indexOfDot = namespace.indexOf('.', argumentNode);
[PATCH] int indexOfDot = namespace.indexOf('.', startPos);
[PATCH] int indexOfDot = namespace.indexOf('.', 21);
[PATCH] int indexOfDot = namespace.indexOf('.', signature);
[PATCH] int indexOfDot = namespace.indexOf('.', expectedModuleDepth);
[PATCH] int indexOfDot = namespace.indexOf('.', position);
[PATCH] int indexOfDot = namespace.indexOf('.', lastModuleIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', interval);
[PATCH] int indexOfDot = namespace.indexOf('.', lowerModuleIndex);
[PATCH] int indexOfDot = namespace.indexOf('.', root);
