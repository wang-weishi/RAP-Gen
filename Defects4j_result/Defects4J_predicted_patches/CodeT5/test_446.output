[PATCH] boolean hasClassOrEnum =(declaration == null || declaration.isClassOrEnum());
[PATCH] Preconditions.checkState(isClassOrEnum || type == Type.OBJECTLIT);
[PATCH] Preconditions.checkState(type == Type.OBJECTLIT);
[PATCH] Preconditions.checkState(isClassOrEnum || globalSets == 1);
[PATCH] boolean hasClassOrEnum =(type == Type.OBJECTLIT);
[PATCH] Preconditions.checkState(isClassOrEnum || isPropAssign == null);
[PATCH] Preconditions.checkState(isClassOrEnum || totalGets == 0);
[PATCH] boolean hasClassOrEnum =(isClassOrEnum || type == Type.OBJECTLIT);
[PATCH] boolean hasClassOrEnumDescendant = parent.canCollapseUnannotatedChildNames();
[PATCH] Preconditions.checkState(isClassOrEnum || hasClassOrEnumDescendant);
[PATCH] Preconditions.checkState(isClassOrEnum || propGets == 0);
[PATCH] Preconditions.checkState(isClassOrEnum || propAssign == null);
[PATCH] Preconditions.checkState(isClassOrEnum || isPropAssign);
[PATCH] Preconditions.checkState(nameMap.isEmpty());
[PATCH] Preconditions.checkState(isClassOrEnum || totalGets > 0);
[PATCH] Preconditions.checkState(isClassOrEnum || isPropAssign!= null);
[PATCH] boolean isClassOrEnum =(declaration == null || declaration.isClassOrEnum());
[PATCH] Preconditions.checkState(isClassOrEnum || props!= null);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSuperTypes());
[PATCH] Preconditions.checkState(type == Type.VAR);
[PATCH] Preconditions.checkState(isClassOrEnum || aliasingGets == 0);
[PATCH] Preconditions.checkState(isClassOrEnum || isUnannotatedChildNames());
[PATCH] boolean hasClassOrEnum =(declaration == null || declaration.hasClassOrEnumType());
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeTags());
[PATCH] boolean hasClassOrEnum =(type == Type.OBJECTLIT || globalSets == 1);
[PATCH] Preconditions.checkState(isClassOrEnum);
[PATCH] boolean hasClassOrEnum = parent.canCollapseUnannotatedChildNames();
[PATCH] Preconditions.checkState(isClassOrEnum || type == Type.GETPROP);
[PATCH] Preconditions.checkState(isClassOrEnum || type == Type.VAR);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenConstructor();
[PATCH] Preconditions.checkState(key == null || key.length() == 0);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeProperties());
[PATCH] Preconditions.checkState(declaration == null);
[PATCH] Preconditions.checkState(isClassOrEnum || grandparent == null);
[PATCH] boolean isClassOrEnum =(isClassOrEnum || type == Type.OBJECTLIT);
[PATCH] Preconditions.checkState(isClassOrEnum || isPropAssign, type);
[PATCH] boolean hasClassOrEnum = type == Type.OBJECTLIT;
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertype();
[PATCH] Preconditions.checkState(isClassOrEnum || type == Type.SCRIPT);
[PATCH] boolean hasClassOrEnum =(declaration.getTwin()!= null);
[PATCH] Preconditions.checkState(isClassOrEnum || isPropAssign == false);
[PATCH] boolean hasClassOrEnum =(declaration == null || docInfo.isClassOrEnum());
[PATCH] Preconditions.checkState(isClassOrEnum || prefix == null);
[PATCH] Preconditions.checkState(nameMap == null || nameMap.isEmpty());
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeMarker();
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeAnnotations());
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertype);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeProperties();
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenParentNames());
[PATCH] Preconditions.checkState(type == Type.CLASS);
[PATCH] Preconditions.checkState(isClassOrEnum || allChildNamesHaveSideEffects());
[PATCH] Preconditions.checkState(isClassOrEnum || globalSets == 0);
[PATCH] boolean hasClassOrEnum =(isClassOrEnum || globalSets == 1);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeDeclaration();
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypePropertyName());
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeAnnotations();
[PATCH] boolean hasClassOrEnum =(declaration == null || declaration.hasClassOrEnum());
[PATCH] boolean hasClassOrEnum =(isClassOrEnum || props!= null);
[PATCH] boolean hasClassOrEnum =(declaration!= null && declaration.isClassOrEnum());
[PATCH] boolean hasClassOrEnum =(isClassOrEnum || propGets == 0);
[PATCH] Preconditions.checkState(type == Type.GETPROP);
[PATCH] boolean hasClassOrEnum =(type == Type.OBJECTLIT || prefix == null);
[PATCH] boolean hasClassOrEnum =(parent == null || parent.canEliminate());
[PATCH] Preconditions.checkState(isClassOrEnum || generated == false);
[PATCH] Preconditions.checkState(docInfo == null || docInfo.isConstructor();
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypePropertyName();
[PATCH] boolean hasClassOrEnum =(isClassOrEnum || isPropAssign);
[PATCH] Preconditions.checkState(isClassOrEnum || type == Type.CLASS);
[PATCH] NodeTraversal.traverse(compiler, externsRoot, this);
[PATCH] Preconditions.checkState(isClassOrEnum || propGet == null);
[PATCH] Preconditions.checkState(isClassOrEnum || decl == null);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenConstructorArg();
[PATCH] Preconditions.checkState(isClassOrEnum || propGets > 0);
[PATCH] boolean hasClassOrEnum =(declaration == null || declaration.isClassOrEnumType());
[PATCH] boolean hasClassOrEnumDescendant =(type == Type.OBJECTLIT);
[PATCH] Preconditions.checkState(!generated);
[PATCH] Preconditions.checkState(topVarName == null);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenConstructorParameters();
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeParameters();
[PATCH] boolean hasClassOrEnumDescendant = type == Type.OBJECTLIT;
[PATCH] boolean hasClassOrEnum =(declaration.getTwin() == null);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenNativeProperties();
[PATCH] Preconditions.checkState(hasClassOrEnumType());
[PATCH] Preconditions.checkState(nameMap == null);
[PATCH] boolean hasClassOrEnum =(scope.getParentNode()!= null);
[PATCH] Preconditions.checkState(nameMap.isEmpty(), prefix);
[PATCH] boolean isClassOrEnum =(type == Type.OBJECTLIT);
[PATCH] boolean hasClassOrEnum =(declaration == null || declaration.hasClassDef);
[PATCH] Preconditions.checkState(generated == false);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenProps());
[PATCH] boolean isClassOrEnum =(type == Type.OBJECTLIT || globalSets == 1);
[PATCH] Preconditions.checkState(isClassOrEnum || hasOverridenSupertypeAnnotations);
[PATCH] Preconditions.checkState(docInfo == null || docInfo.isConstructor());
[PATCH] boolean hasClassOrEnumDescendant = isClassOrEnumType(parent);
[PATCH] boolean hasClassOrEnum =(isClassOrEnum || propAssign == null);
[PATCH] boolean hasClassOrEnumDescendant = isClassOrEnumDeclaration(node);
[PATCH] NodeTraversal.traverse(compiler, node, this);
[PATCH] Preconditions.checkState(isClassOrEnum || generated);
[PATCH] boolean hasClassOrEnumDescendant = parent.canCollapseClassOrEnum();
[PATCH] Preconditions.checkState(nameMap!= null);
