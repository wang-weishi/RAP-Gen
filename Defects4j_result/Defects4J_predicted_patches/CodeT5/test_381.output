[PATCH] v1D = line.intersect(subLine.line);
[PATCH] v1D = line.difference(subLine.line, loc1);
[PATCH] v1D = line.intersectWith(subLine.line);
[PATCH] v1D = line.difference(subLine.line);
[PATCH] v1D = line.addToSubLine(v1D);
[PATCH] v1D = line.intersects(subLine.line);
[PATCH] v1D = line.union(v1D);
[PATCH] v1D = line.addToBack(loc1);
[PATCH] v1D = line.intersect(subLine.line, loc1);
[PATCH] v1D = line.intersectWithSubLine(v1D);
[PATCH] v1D = line.addToBack(v1D);
[PATCH] v1D = line.unionWith(v1D);
[PATCH] v1D = line.toSubSpace(loc1);
[PATCH] v1D = line.intersectsWith(subLine.line);
[PATCH] v1D = line.addRange(v1D, remainingRegion);
[PATCH] v1D = line.add(loc1);
[PATCH] v1D = line.intersection(subLine.line);
[PATCH] v1D = line.subtract(loc1);
[PATCH] v1D = line.addMismatch(v1D, remainingRegion);
[PATCH] v1D = line.cut(loc1, v1D);
[PATCH] v1D = line.fromSubSpace(loc1);
[PATCH] v1D = line.subtract(loc1, v1D);
[PATCH] v1D = line.addIntersects(v1D);
[PATCH] v1D = line.addSubLine(v1D);
[PATCH] v1D = line.addDependency(loc1);
[PATCH] v1D = line.addEntity(v1D, loc1);
[PATCH] v1D = line.intersects(remainingRegion);
[PATCH] v1D = line.addIntersection(v1D);
[PATCH] v1D = super.intersect(v1D);
[PATCH] v1D = line.addDifference(v1D, remainingRegion);
[PATCH] v1D = line.addLocation(loc1);
[PATCH] v1D = subLine.line.intersect(loc1);
[PATCH] v1D = line.addEnd(loc1, v1D);
[PATCH] v1D = line.addIntersectWithSubLine(v1D);
[PATCH] v1D = line.remainingRegion.checkPoint(v1D);
[PATCH] v1D = line.toVector3D(loc1);
[PATCH] v1D = line.addEntity(v1D);
[PATCH] v1D = line.addMatch(loc1, v1D);
[PATCH] v1D = line.addRange(v1D, loc1);
[PATCH] v1D = line.addChildToBack(loc1);
[PATCH] v1D = line.withoutSubSpace(loc1);
[PATCH] v1D = line.addRectangle(loc1, v1D);
[PATCH] v1D = line.addRegion(loc1);
[PATCH] v1D.setY(loc1.getY());
[PATCH] v1D = line.addAfter(loc1, v1D);
[PATCH] v1D = line.addPoint(loc1);
[PATCH] v1D = line.addIntoSubLine(v1D);
[PATCH] v1D = line.differsFrom(loc1);
[PATCH] v1D = line.addBefore(loc1, v1D);
[PATCH] v1D = line.addToSubSpace(loc1);
[PATCH] v1D = this.remainingRegion.checkPoint(v1D);
[PATCH] v1D = intersection(v1D, loc1);
[PATCH] v1D = line.max(v1D, loc1);
[PATCH] v1D = line.addIgnorable(loc1);
[PATCH] v1D = line.addTrailingZeroes(v1D);
[PATCH] v1D = line.addIntersected(v1D);
[PATCH] v1D = line.addChildToBack(v1D);
[PATCH] v1D = line.addAllSubLines(v1D);
[PATCH] v1D = line.addToString(loc1);
[PATCH] v1D = line.addRange(v1D);
[PATCH] v1D = line.intersectWith(remainingRegion);
[PATCH] v1D = line.addLastPoint(v1D);
[PATCH] v1D = super.intersection(v1D);
[PATCH] v1D = line.addToSubDay(v1D);
[PATCH] v1D = line.addToFront(loc1);
[PATCH] v1D = line.addMismatch(v1D);
[PATCH] v1D = line.addCenterPoint(loc1);
[PATCH] v1D = line.addSeenSubLine(v1D);
[PATCH] v1D = line.addValidLocation(loc1);
[PATCH] v1D = line.addDifference(v1D);
[PATCH] v1D = line.unionWith(remainingRegion);
[PATCH] v1D = line.addIntersection(v1D, remainingRegion);
[PATCH] v1D = line.addPoint(v1D);
[PATCH] v1D = line.unionWith(subLine.line);
[PATCH] v1D = line.extend(v1D);
[PATCH] v1D.setLocation(loc1);
[PATCH] v1D = line.addToIndex(loc1);
[PATCH] v1D = line.upperBound(v1D.x);
[PATCH] v1D = line.addInvertedRectangle(v1D);
[PATCH] v1D = v1D.without(remainingRegion);
[PATCH] v1D = line.intersectsWith(remainingRegion);
[PATCH] v1D = line.addEndPoint(loc1);
[PATCH] v1D = line.addEnd(loc1);
[PATCH] v1D = line.addBack(loc1);
[PATCH] v1D = line.corner(loc1);
[PATCH] v1D = line.remove(loc1);
[PATCH] v1D = line.upperBound(v1D);
[PATCH] v1D = intersection(v1D, subLine.line);
[PATCH] v1D = line.addSuccessor(v1D);
[PATCH] v1D = line.addBoundingRectangle(loc1);
[PATCH] v1D = line.getBounds() [loc1];
[PATCH] v1D = difference(v1D, subLine.line);
[PATCH] v1D = line.addBeginningPoint(loc1);
[PATCH] v1D = line.addOverlappingRectangle(loc1);
[PATCH] v1D = line.intersect(remainingRegion);
[PATCH] v1D = line.contains(loc1);
[PATCH] v1D = line.minus(remainingRegion);
[PATCH] v1D = line.cut(loc1);
[PATCH] v1D = line.clone();
[PATCH] v1D = line.toVector();
