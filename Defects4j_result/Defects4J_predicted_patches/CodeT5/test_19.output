[PATCH] m = m.copy();
[PATCH] m = m.multiply(m);
[PATCH] m = m.divide(1.0);
[PATCH] m.clearResult(); m.zeroAll();
[PATCH] m = m.copy(); m.zeroAll();
[PATCH] m.zeroAll(); m.multiply(0.0);
[PATCH] m = m.copy(); m.clearResult();
[PATCH] m = m.divide(m.getData();
[PATCH] m = m.divide(m.getRowDimension());
[PATCH] m.zeroAll(); m.multiply(m.inverse());
[PATCH] m.zeroAll(); m.multiply(m);
[PATCH] m = m.divide(jTj.getData();
[PATCH] m.clearResult(); m.putRowKey(0);
[PATCH] m.zeroAll(); m.multiply(m.inv);
[PATCH] m = m.multiply(realMatrix);
[PATCH] m = m.divideAndCoefficients();
[PATCH] m = m.multiply(this);
[PATCH] m.zeroAll(); m.invert();
[PATCH] m = m.invert();
[PATCH] m.clearData(); m.zeroAll();
[PATCH] m = m.divideRealMatrix();
[PATCH] m.zeroAll(); m.multiply(1.0);
[PATCH] m = m.zeroAll();
[PATCH] m.clearResult(); m.multiply(0.0);
[PATCH] m.zeroAll(); m.multiply(m.value);
[PATCH] m.zeroAll(); m.divide(1.0);
[PATCH] m.clearResult(); m.divide(1.0);
[PATCH] m = m.divideRealIdentity();
[PATCH] m.clearResult(); m.getRowDimension();
[PATCH] m.zeroAll(); m.multiply(m.one);
[PATCH] m = m.zero(); m.clearResult();
[PATCH] m = m.divide(jF.getData();
[PATCH] m.clearResult(); m.getRowKey(0);
[PATCH] m = m.copy(); m.clearData();
[PATCH] m = m.divide(jTj.getData());
[PATCH] m.clearResult(); m.copyIn(0, 0);
[PATCH] m = m.divide(m.getData());
[PATCH] m = m.zero();
[PATCH] m.clearOut(); m.zeroAll();
[PATCH] m = m.zeroAll(); m.clearResult();
[PATCH] m.clearResult(); m.loadInfinity();
[PATCH] m.zeroAll(); m.multiply(m.abs());
[PATCH] m = m.multiply(new RealMatrix(m));
[PATCH] m.clearResult(); m.multiply(m);
[PATCH] m.zeroAll(); m.multiply(m.root);
[PATCH] m = m.convergence();
[PATCH] m.zeroAll(); m.oneAll();
[PATCH] m = m.divide(getCoefficients());
[PATCH] m = m.inverse();
[PATCH] m.clearData(); m.multiply(m);
[PATCH] m = m.divide(m.getOut());
[PATCH] m.clearData(); m.putRowKey(0);
[PATCH] m.clearResult(); m.zeroOut();
[PATCH] m = m.multiply(1.0);
[PATCH] m.clearResult(); m.putRowKey(i);
[PATCH] m = m.multiply(RealMatrix.this);
[PATCH] m.clearData();
[PATCH] m = m.restrictByNotNullOrUndefined();
[PATCH] m = m.divide(m.getInput());
[PATCH] m.clearResult(); m.getRowTest();
[PATCH] m.clearNode(); m.zeroAll();
[PATCH] m = m.multiply(Double.valueOf(0));
[PATCH] m.clearResult(); m.transpose();
[PATCH] m.clearOut(); m.multiply(m);
[PATCH] m.clearResult(); m.loadIncomes();
[PATCH] m = m.divideReal(0.0);
[PATCH] m = m.divide(getVariance());
[PATCH] m = m.transpose();
[PATCH] m = m.copyIn();
[PATCH] m = m.getData();
[PATCH] m.clearResult();
[PATCH] m.clearInfinity(); m.zeroOut();
[PATCH] m = m.zero(); m.clearData();
[PATCH] m = m.divide(m.getValues());
[PATCH] m = m.copyOut();
[PATCH] m = m.multiply(Double.NaN);
[PATCH] m = m.clone();
[PATCH] m = m.divideReal();
[PATCH] m = m.divide(0.5);
[PATCH] m.clear(); m.multiply(m);
[PATCH] m = m.denominator();
[PATCH] m = m.empty();
[PATCH] super.multiply(m);
[PATCH] m = m.constrain(m);
[PATCH] m = m.dup();
[PATCH] m = m.eliminate();
[PATCH] m = m.inverted();
[PATCH] m = m.conjugate();
[PATCH] m = m.clearData();
[PATCH] m = m.negate();
[PATCH] m = m.deepClone();
[PATCH] m.multiply(m);
[PATCH] m.clearOut();
[PATCH] m = m.getReal();
[PATCH] m = m.divide();
[PATCH] m = m.real();
[PATCH] m = m.abs();
[PATCH] m.clearNode();
[PATCH] m.zeroAll();
[PATCH] m = m.identity();
