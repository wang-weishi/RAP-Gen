[PATCH] super(id, gen, resolverType);
[PATCH] if(id == null){ return null; }
[PATCH] final Object id = gen.id(id);
[PATCH] super.findObjectId(gen, resolverType, id);
[PATCH] super.findObjectId(gen, resolverType);
[PATCH] super.findObjectId(id, gen, resolverType);
[PATCH] final Object id = resolverType.findObjectId(id);
[PATCH] final Object id = gen.generateObjectId(id);
[PATCH] if(id == null){ throw new IllegalArgumentException(""); }
[PATCH] super(id);
[PATCH] final Object id = resolverType.deserialize(id);
[PATCH] final Object id = resolverType.decodeObjectId(id);
[PATCH] final Object id = gen.buildObjectId(id);
[PATCH] _checkState(id!= null);
[PATCH] final Object id = gen.deserialize(id);
[PATCH] final Object id = gen.createObjectId(id);
[PATCH] final Object id = gen.build(id);
[PATCH] final Object id = gen.getObjectId(id);
[PATCH] final Object id = gen.init(id);
[PATCH] _checkInvalidId(id, gen, resolverType);
[PATCH] final Object id = gen.call1(id);
[PATCH] final Object id = gen.key(id);
[PATCH] super().findObjectId(id, gen, resolverType);
[PATCH] _validateId(id, gen, resolverType);
[PATCH] _checkNotNull(id);
[PATCH] super(gen, resolverType);
[PATCH] _checkInvalidObjectId(id, gen, resolverType);
[PATCH] super(IdGenerator.class, gen, resolverType);
[PATCH] final Object id = gen.idFromId(id);
[PATCH] if(id == null){ return new NullObjectId(); }
[PATCH] final Object id = gen.serialize(id);
[PATCH] super.findObjectId(gen, id, resolverType);
[PATCH] _checkInvalidState(id!= null);
[PATCH] final Object id = resolverType.encodeObjectId(id);
[PATCH] final Object id = resolverType.toObjectId(id);
[PATCH] final Object id = gen.objectId(id);
[PATCH] _resolveObjectId(id, gen, resolverType);
[PATCH] super().findObjectId(gen, resolverType);
[PATCH] super._findObjectId(id, gen, resolverType);
[PATCH] final Object id = resolverType.deserializeObjectId(id);
[PATCH] final Object id = gen.encodeObjectId(id);
[PATCH] final Object id = gen.idFromAny(id);
[PATCH] super(null, gen, resolverType);
[PATCH] super(id, gen);
[PATCH] _checkInvalidID(id, gen, resolverType);
[PATCH] final Object id = gen.newObjectId(id);
[PATCH] final Object id = gen.toObjectId(id);
[PATCH] final Object id = resolverType.findObjectId(gen);
[PATCH] _objectIdResolvers.put(id, gen);
[PATCH] final Object id = gen.decodeObjectId(id);
[PATCH] checkState(id!= null);
[PATCH] final Object id = resolverType.serialize(id);
[PATCH] _checkInvalidIndex(id, resolverType);
[PATCH] final Object id = resolverType.validate(id);
[PATCH] final Object id = gen.update(id);
[PATCH] final Object id = gen.generateObjectId(resolverType);
[PATCH] _checkNotNull(id, ObjectIdGenerator.class);
[PATCH] final Object id = gen.genObjectId(id);
[PATCH] final Object id = gen.encode(id);
[PATCH] final Object id = gen.idFromObject(id);
[PATCH] final Object id = gen.buildId(id);
[PATCH] final Object id =gen.id(id);
[PATCH] final int id = gen.id(id);
[PATCH] final Object id = gen.instantiate(id);
[PATCH] if(id == null){ return null; }
[PATCH] id = _fixObjectId(id, gen);
[PATCH] final Object id = gen.validate(id);
[PATCH] super(id, _objectIdResolvers);
[PATCH] super(id,gen, resolverType);
[PATCH] super(id, resolverType);
[PATCH] _checkArgument(id!= null);
[PATCH] _validateId(id, gen);
[PATCH] checkNotNull(id);
[PATCH] _objectIdResolvers.add(gen);
[PATCH] _checkNotNull(id, resolverType);
[PATCH] final Object id = gen.next();
[PATCH] id = gen.deserialize(id);
[PATCH] _initWithId(id, gen);
[PATCH] _assertArg(id!= null);
[PATCH] _checkInvalidId(id, gen);
[PATCH] id = _fixObjectId(id);
[PATCH] final Object id = gen.toObjectId();
[PATCH] super(( ObjectIdGenerator<?>)gen);
[PATCH] _checkState(gen!= null);
[PATCH] _checkId(id, gen);
[PATCH] _assertState(id!= null);
[PATCH] checkArgument(id!= null);
[PATCH] super(id.getClass());
[PATCH] _checkInvalidIndex(id);
[PATCH] _validateState();
[PATCH] _setId(id);
[PATCH] _assertNotNull(id);
[PATCH] setId(id);
[PATCH] super(void * id);
[PATCH] _checkNotNull(gen);
[PATCH] super(resolverType);
[PATCH] assertNotNull(id);
[PATCH] super(-1);
[PATCH] super();
[PATCH] validateState();
