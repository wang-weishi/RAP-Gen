[PATCH] return super.equals(obj);
[PATCH] return ObjectUtilities.equal(this.obj, obj);
[PATCH] return ObjectUtilities.equal(this.base, obj);
[PATCH] return ObjectUtilities.equal(super.obj, obj);
[PATCH] return ObjectUtilities.equals(this.obj, obj);
[PATCH] return ObjectUtilities.equal(this.shape, obj);
[PATCH] return ObjectUtilities.equal(this.object, obj);
[PATCH] return ObjectUtilities.equal(super.equals(obj));
[PATCH] return ObjectUtilities.equal(this.data, obj);
[PATCH] return ObjectUtilities.equal(getShape(), obj);
[PATCH] return ObjectUtilities.equal(this.items, obj);
[PATCH] return hashCode ==(( ShapeList)obj).hashCode();
[PATCH] return ObjectUtilities.equal(this.p, obj);
[PATCH] return(( ShapeList)obj).equals(this);
[PATCH] return ObjectUtilities.equal(this.item, obj);
[PATCH] return ObjectUtilities.equal(this.series, obj);
[PATCH] return ObjectUtilities.equal(this.parent, obj);
[PATCH] return ObjectUtilities.equal(this.elements, obj);
[PATCH] return ObjectUtilities.equals(this.base, obj);
[PATCH] return ObjectUtilities.equal(this.iterable, obj);
[PATCH] return ObjectUtilities.equal(this.values, obj);
[PATCH] return ObjectUtilities.equal(getValues(), obj);
[PATCH] return ObjectUtilities.equal(this.context, obj);
[PATCH] return ObjectUtilities.equal(getBase(), obj);
[PATCH] return ObjectUtilities.equal(this.collection, obj);
[PATCH] return ObjectUtilities.equal(this.list, obj);
[PATCH] return ObjectUtilities.equals(this.object, obj);
[PATCH] return getSeriesCount() == obj.getSeriesCount();
[PATCH] return ObjectUtilities.equal(this.prototype, obj);
[PATCH] return ObjectUtilities.equal(this.value, obj);
[PATCH] return ObjectUtilities.equals(getBase(), obj);
[PATCH] return Arrays.equals(( ShapeList)obj).shape;
[PATCH] return ObjectUtilities.equal(this.options, obj);
[PATCH] return ObjectUtilities.equal(super.equals(obj);
[PATCH] return object == this || super.equals(obj);
[PATCH] return ObjectUtilities.equal(this.chart, obj);
[PATCH] return objectUtilities.equal(this.obj, obj);
[PATCH] return parent.equals(obj);
[PATCH] return getImmediateParentPointer().equals(obj);
[PATCH] return AbstractShapeList.super.equals(obj);
[PATCH] return super.equals(obj && obj.getClass());
[PATCH] return ObjectUtilities.equal(this.properties, obj);
[PATCH] return findShape(obj).equals(this);
[PATCH] return ObjectUtilities.equal(this.legend, obj);
[PATCH] return ObjectUtilities.equals(super, obj);
[PATCH] return ObjectUtilities.equal(this.iterator, obj);
[PATCH] return ObjectUtilities.equal(this.name, obj);
[PATCH] return ObjectUtilities.equal(this.plain, obj);
[PATCH] return ObjectUtilities.equals(getShape(), obj);
[PATCH] return ObjectUtilities.equal(this.desc, obj);
[PATCH] return BaseShapeList.super.equals(obj);
[PATCH] return object == super.equals(obj);
[PATCH] return ObjectUtilities.equal(this.renderer, obj);
[PATCH] return ObjectUtilities.equal(this.next, obj);
[PATCH] return ObjectUtilities.equal(this.parameters, obj);
[PATCH] return ObjectUtilities.equal(this.prev, obj);
[PATCH] return objectUtilities.equals(this, obj);
[PATCH] return ObjectUtilities.equal(this.container, obj);
[PATCH] return findShape(obj).equals(this.shape);
[PATCH] return ObjectUtilities.equal(this.segments, obj);
[PATCH] return Arrays.equals(( ShapeList)obj).values;
[PATCH] return getToolTipText().equals(obj);
[PATCH] return super.equal(obj);
[PATCH] returnsuper.equals(obj);
[PATCH] return return super.equals(obj);
[PATCH] return ObjectUtilities.equal(obj, this);
[PATCH] return doPredicate.equals(obj);
[PATCH] return getWrappedObject().equals(obj);
[PATCH] return findRoot(obj).equals(this);
[PATCH] return 0 == super.equals(obj);
[PATCH] return equals(( ShapeList)obj);
[PATCH] return _obj.equals(obj);
[PATCH] return super.equals(obj));
[PATCH] return deepEquals(( ShapeList)obj);
[PATCH] return arrayEquals(( ShapeList)obj);
[PATCH] return superClass.equals(obj);
[PATCH] return superclass.equals(obj);
[PATCH] return Boolean.super.equals(obj);
[PATCH] return doObjectEquals(obj);
[PATCH] return!super.equals(obj);
[PATCH] return(super.equals(obj));
[PATCH] return super.equals(object);
[PATCH] return super. equals(obj);
[PATCH] return super.equals(obj)- 1;
[PATCH] return decorated().equals(obj);
[PATCH] return obj.equals(this);
[PATCH] return getShape().equals(obj);
[PATCH] return objectShapeEquals(obj);
[PATCH] return super.equals(obj);
[PATCH] return getObject().equals(obj);
[PATCH] return super.equals(obj);
[PATCH] return objectShape.equals(obj);
[PATCH] return getGraphics().equals(obj);
[PATCH] return super.equals(obj)) &&
[PATCH] return super.equalsObject(obj);
[PATCH] return super.isEqual(obj);
[PATCH] return getEntrySet().equals(obj);
[PATCH] return objectName.equals(obj);
[PATCH] return entrySet().equals(obj);
[PATCH] return super.Equals(obj);
