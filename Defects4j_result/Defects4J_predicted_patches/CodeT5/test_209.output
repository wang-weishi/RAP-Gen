[PATCH] accum.append(c);
[PATCH] accum.append(( char)c);
[PATCH] m.appendReplacement(accum, c);
[PATCH] accum.append(( char)(c == '-'?"" : c));
[PATCH] accum.append(( char)(c == '"'?"" : c));
[PATCH] accum.append(( accum == null)? c : c);
[PATCH] accum.append(( char)(c == '\\'? '/' : c));
[PATCH] accum.appendReplacement(accum, c);
[PATCH] accum.append(( char)(c == '-'? '/' : c));
[PATCH] accum.append(String.valueOf(c));
[PATCH] accum.append(( accum == null)?"" : c);
[PATCH] accum.append(( char)(c == '"'? '/' : c));
[PATCH] accum.append(( char)(c == '\\'?"" : c));
[PATCH] accum.append(( String)c);
[PATCH] accum.append(( char)(c +''));
[PATCH] accum.append(( char)(c == '\\')?"" : c);
[PATCH] accum.append(( char)(c + 1));
[PATCH] accum.append('\\'); accum.append(c);
[PATCH] accum.append(( char)(c + '0'));
[PATCH] accum.append(c == '"'?"" : c);
[PATCH] accum.append(( char)(c == '.'? '/' : c));
[PATCH] accum.append("\\u" + c +"$");
[PATCH] accum.append(( char)(c == '/'? '/' : c));
[PATCH] accum.append(Character.toHexString(c));
[PATCH] accum.append(( char)(c == '.'?"" : c));
[PATCH] accum.append(','); accum.append(c);
[PATCH] accum.append(Character.toUpperCase(c));
[PATCH] m.appendReplacement(accum, new String(c));
[PATCH] accum.append(escapeChar(c));
[PATCH] accum.append(( char)(c - '0'));
[PATCH] accum.append(addEscapes(c));
[PATCH] accum.append(( c == '\\')?"" : c);
[PATCH] accum.append(new String(c, base));
[PATCH] accum.append(( char)(c == '"'?"" : c);
[PATCH] accum.append(Character.forDigit(c, 16));
[PATCH] accum.append("\\u" + c +"'");
[PATCH] accum.append(c =="'"?"" : c);
[PATCH] accum.append(escapeMode? 2 : 1, c);
[PATCH] accum.append("\\u" + c +"]");
[PATCH] accum.append(Character.toChars(c, 16));
[PATCH] accum.append(String.valueOf(c), accum);
[PATCH] accum.append(m.group(0), c);
[PATCH] accum.append("\\u" + c +"/");
[PATCH] accum.append(( char)(c + 1)* c);
[PATCH] accum.append(c == '-'?"" : c);
[PATCH] accum.append(first +"\\u" + c);
[PATCH] accum.append("\\u" + c +">");
[PATCH] accum.append(n == null?"" : c);
[PATCH] accum.append(raw.substring(0, c));
[PATCH] accum.append(( char)(c / 16 + 1));
[PATCH] accum.append(c =="'"? name : c);
[PATCH] accum.append(( name == null?"" : c), accum);
[PATCH] accum.append(c +"\\u" + c);
[PATCH] accum.append(( char)(c + ''));
[PATCH] accum.append(( accum == null)? string : c);
[PATCH] accum.append(Character.toChars(c));
[PATCH] accum.append(( char)(c + 1)));
[PATCH] accum.append(); accum.append(c);
[PATCH] accum.append(new String(c));
[PATCH] accum.append(( char)(c / 16));
[PATCH] accum.appendGroup(accum, c);
[PATCH] accum.appendChild(c);
[PATCH] accum.append(( accum == null)? c : c));
[PATCH] accum.append(( name == null?"null" : c));
[PATCH] accum.appendCharacterReplacement(accum, c);
[PATCH] accum.appendLeftPad(accum, c);
[PATCH] m.appendTail(accum, c);
[PATCH] accum.append(( final String)c);
[PATCH] accum.append(( escapedChar[])c);
[PATCH] accum.append(( final char)c);
[PATCH] accum.append(unescapeChar(c));
[PATCH] accum.append(b);
[PATCH] accum.appendFirst(c);
[PATCH] accum.appendFirst(( char)c);
[PATCH] accum.append(push(c));
[PATCH] accum.append(buf, c);
[PATCH] accum.append(( long)c);
[PATCH] accum.appendCharToBack(c);
[PATCH] accum.append(g, c);
[PATCH] accum.append(escapeCharacter(c));
[PATCH] accum.append(( byte)c);
[PATCH] accum.append(( double)c);
[PATCH] accum.append(prefix + c);
[PATCH] accum.appendLeftChild(c);
[PATCH] accum.append(( Object[])c);
[PATCH] accum.append(quoteChar(c));
[PATCH] accum.append(jsString(c));
[PATCH] accum.append(( char[])c);
[PATCH] accum.append(( final Character)c);
[PATCH] accum.append(c +"->");
[PATCH] accum.appendCharacterEscape(c);
[PATCH] accum.appendAll(c);
[PATCH] accum.append(( CharSequence)c);
[PATCH] accum.appendString(c);
[PATCH] accum.append(l, c);
[PATCH] accum.append(( short)c);
[PATCH] accum.append().append(c);
[PATCH] accum.append(( char)(c);
[PATCH] accum.append((char)c);
[PATCH] accum.append(n);
