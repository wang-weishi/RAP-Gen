[PATCH] Validate.notNull(index);
[PATCH] checkIndex(index);
[PATCH] values = this.values.clone();
[PATCH] validateIndex(index);
[PATCH] checkInvalidIndex(index);
[PATCH] values = new String[values.length];
[PATCH] int recordNumber = index.intValue();
[PATCH] Validate.notEmpty(index);
[PATCH] this.values = readRecord(index);
[PATCH] index = index.intValue();
[PATCH] Validate.notEmpty(name);
[PATCH] Preconditions.checkNotNull(index);
[PATCH] this.values = readValues(index);
[PATCH] values = Arrays.asList(values);
[PATCH] IndexUtils.checkNotNull(index);
[PATCH] values = readRecord(index);
[PATCH] Arrays.sort(values);
[PATCH] this.values = readRow(index);
[PATCH] Utils.checkNotNull(index);
[PATCH] CheckMethodAdapter.checkIndex(index);
[PATCH] int recordNumber = mapping.size();
[PATCH] this.values = loadRecord(index);
[PATCH] value = index.intValue();
[PATCH] this.values = readLines(index);
[PATCH] Index index = index.intValue();
[PATCH] values = EMPTY_STRING_ARRAY;
[PATCH] values = new String[size() ];
[PATCH] invalidIndex(index);
[PATCH] Collections.sort(values);
[PATCH] values = readLines(index + 1);
[PATCH] checkIndexBounds(index);
[PATCH] this.values = readCSV(index);
[PATCH] this.values = readValues();
[PATCH] values = super.get(name);
[PATCH] checkIdentifier(name);
[PATCH] verifyValueBounds(index);
[PATCH] values = readRow(index + 1);
[PATCH] this.values = toArray(index);
[PATCH] _checkInvalidIndex(index);
[PATCH] this.checkIndex(index);
[PATCH] checkState(index!= null);
[PATCH] this.values = load(index);
[PATCH] ensureCapacity(values.length);
[PATCH] initRecord(index);
[PATCH] checkRecordNumber(index);
[PATCH] checkArgument(index!= null);
[PATCH] values = readRow(index);
[PATCH] checkRecord(index);
[PATCH] Exceptions.checkNotNull(index);
[PATCH] values = mapping.values();
[PATCH] checkNotNull(index);
[PATCH] this.values = read(index);
[PATCH] Utils.checkIndex(index);
[PATCH] loadRecord(index);
[PATCH] checkSimpleName(name);
[PATCH] invalidateRangeInfo();
[PATCH] checkUnknownIndex(index);
[PATCH] validateName(name);
[PATCH] values = readLines(index);
[PATCH] verifyIndex(index);
[PATCH] remove(index);
[PATCH] this.recordNumber++;
[PATCH] mapping.remove(name);
[PATCH] checkLenient();
[PATCH] this.values = readRecord();
[PATCH] checkLookupIndex(index);
[PATCH] map.remove(name);
[PATCH] invalidatePrefix(index);
[PATCH] values = toArray(index);
[PATCH] checkEntry(index);
[PATCH] testIndex(index);
[PATCH] values = super.getValues();
[PATCH] values = readValues();
[PATCH] if(index == null){ }
[PATCH] assertIndex!= null;
[PATCH] values = this.values;
[PATCH] throw new IllegalStateException("");
[PATCH] checkRowCount(index);
[PATCH] filterIndex(index);
[PATCH] checkAlignment(index);
[PATCH] checkNotEmpty(index);
[PATCH] unshare(index);
[PATCH] checkOldFormat();
[PATCH] checkToken(index);
[PATCH] initRecord(name);
[PATCH] checkRange(index);
[PATCH] ensureCapacity(0);
[PATCH] values = readRecord();
[PATCH] assertIndex!= null);
[PATCH] ensureLoaded(index);
[PATCH] initIndex(index);
[PATCH] recordNumber++;
[PATCH] checkNewFormat();
[PATCH] values = getValues();
[PATCH] validate(index);
[PATCH] values = toArray();
[PATCH] initRecord();
[PATCH] startRecord();
[PATCH] purgeRecord();
[PATCH] invalidIndex();
