[PATCH] return getNextZipEntry();
[PATCH] return new ZipArchiveInputStream(buf.position(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.contents(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.getName(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.size(), zipEncoding);
[PATCH] return new ZipArchiveEntry(buf.position(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(useUnicodeExtraFields, zipEncoding);
[PATCH] return new ZipArchiveInputStream(in.getEncoding(), false);
[PATCH] return new ZipArchiveInputStream(in.getName(), zipEncoding);
[PATCH] return super.getNextEntry();
[PATCH] startZipEntry(); return this;
[PATCH] return new ZipArchiveEntry(buf.getName(), zipEncoding);
[PATCH] return new ZipArchiveEntry(buf.contents(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.position(), encoding);
[PATCH] return new ZipArchiveInputStream(buf.contents(), encoding);
[PATCH] return new ZipArchiveInputStream(buf.name(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.position(), 1);
[PATCH] return new ZipArchiveEntry(entry.getName(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(in.getEncoding(), true);
[PATCH] return new ZipArchiveInputStream(in.getEntryCount());
[PATCH] return new ZipArchiveInputStream(openStream(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.capacity(), zipEncoding);
[PATCH] return firstEntry? getNextZipEntry() : null;
[PATCH] return new ZipArchiveInputStream(buf.access(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(buf.length(), zipEncoding);
[PATCH] return getNextEntry();
[PATCH] return new ZipArchiveInputStream(in.getSize());
[PATCH] return new ZipArchiveInputStream(buf.data(), zipEncoding);
[PATCH] return new ZipArchiveInputStream(in.getCompressedSize());
[PATCH] return new ZipArchiveInputStream(this.zipEncoding.toCharArray());
[PATCH] return new ZipArchiveInputStream(buf.position(), false);
[PATCH] return new ZipArchiveEntry(new String(encoding));
[PATCH] return new ZipArchiveInputStream(in.getCodec());
[PATCH] return new ZipArchiveInputStream(buf.position(), 0);
[PATCH] return new ZipArchiveInputStream(buf.getName());
[PATCH] return new ZipArchiveInputStream(buf.toByteArray());
[PATCH] return new ZipArchiveInputStream(0, buf.position());
[PATCH] setupZipEncoding(zipEncoding); return this;
[PATCH] return new ZipArchiveInputStream(in.getLocation());
[PATCH] return in.getZipEntry();
[PATCH] return openZipEntry();
[PATCH] return new ZipArchiveInputStream(in.getDataDescriptor());
[PATCH] return new ZipArchiveInputStream(0, buf.capacity());
[PATCH] return firstEntry? ZipArchiveEntry.this : null;
[PATCH] return createEntry(encoding);
[PATCH] return new ZipArchiveInputStream(buf.getPath());
[PATCH] return in.getNextEntry();
[PATCH] return(ZipArchiveEntry)in.clone();
[PATCH] return new ZipArchiveInputStream(in.toByteArray());
[PATCH] return new ZipArchiveInputStream(encoding, false);
[PATCH] return new ZipArchiveInputStream(in, zipEncoding);
[PATCH] return new ZipArchiveInputStream(in.getPath());
[PATCH] return this.in.createEntry();
[PATCH] return super.nextEntry();
[PATCH] return new ZipArchiveInputStream(in.getEncoding());
[PATCH] return this.in.getNextEntry();
[PATCH] return new ZipArchiveInputStream(buf.size());
[PATCH] return nextEntry();
[PATCH] return new ZipArchiveEntry(getNextEntry());
[PATCH] startEntry(); return this;
[PATCH] return in.createEntry();
[PATCH] init();
[PATCH] startLocalFileHeader(); return this;
[PATCH] startRootEntry(); return this;
[PATCH] reset(); return this;
[PATCH] start(); return this;
[PATCH] return createEntry(encoding, false);
[PATCH] return createNextEntry();
[PATCH] init(); return this;
[PATCH] return createZipEntry(encoding);
[PATCH] return super.getNextZipEntry();
[PATCH] initialize(); return this;
[PATCH] initialise(); return this;
[PATCH] returnZipEncoding.encode(in);
[PATCH] return openEntry();
[PATCH] return new ZipArchiveInputStream(getEncoding());
[PATCH] reset();
[PATCH] return getNextCentralDirectoryEntry();
[PATCH] zeroAllEntry(); return this;
[PATCH] endEntry(); return this;
[PATCH] return openNextEntry();
[PATCH] return getCurrentEntry();
[PATCH] startCompression(); return this;
[PATCH] return super.createEntry();
[PATCH] return computeNextEntry();
[PATCH] return in.getEntry();
[PATCH] return getNextLocalFileEntry();
[PATCH] return readNextEntry();
[PATCH] returnNextZipEntry();
[PATCH] return nextZipEntry();
[PATCH] zeroAllEntry();
[PATCH] return this;
[PATCH] return closeEntry();
[PATCH] initZipEntry();
[PATCH] initialise();
[PATCH] return ensureOpen();
[PATCH] return createEntry();
[PATCH] return nextToken();
[PATCH] startZipEntry();
[PATCH] return hasNextEntry();
