[PATCH] return super.createRangeMap();
[PATCH] return new PrefixRangeEntrySet(delegate.getPrefixStart(), delegate.getValue());
[PATCH] return delegate.createRangeMap();
[PATCH] return new PrefixRangeEntrySet(createPrefixRangeMap());
[PATCH] return super.createPrefixMap();
[PATCH] return new PrefixRangeEntrySet(delegate.createPrefixRangeMap());
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), this.delegate);
[PATCH] return new PrefixRangeEntrySet<K, V>(delegate.createPrefixMap());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), toPrefixEnd);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getBase());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getEndKey(), false);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getPrefixEnd());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getKey(), getValue());
[PATCH] return new PrefixRangeEntrySet(delegate.getPrefixStart(), prefixEnd);
[PATCH] return new PrefixRangeEntrySet().delegate.createPrefixRangeMap();
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), toPrefixEnd());
[PATCH] return new RangeEntrySet<K, V>(delegate.createRangeMap());
[PATCH] return new RangeEntrySetAdapter<K, V>(delegate.createRangeMap());
[PATCH] return new PrefixRangeEntrySet(delegate.createPrefixMap());
[PATCH] return newPrefixRangeEntrySet(delegate.createPrefixRangeMap());
[PATCH] return(SortedMap<K, V>)super.createRangeMap();
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getValue());
[PATCH] return new PrefixRangeEntrySet<K, V>(delegate);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), this.delegate);
[PATCH] return new PrefixRangeEntrySet(delegate.getKey(), delegate.getValue());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart().getKey(), toPrefix);
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), super.getValue());
[PATCH] return new PrefixRangeEntrySet(parent.getPrefixStart(), parent.getValue());
[PATCH] return new RangeEntrySetImpl<K, V>(delegate.createRangeMap());
[PATCH] return new PrefixRangeEntrySet(new PrefixRangeEntrySet(this.delegate));
[PATCH] return new PrefixRangeEntrySet<K, V>(delegate.getPrefixStart());
[PATCH] return newPrefixRangeEntrySet(delegate.getPrefixStart(), delegate.getValue());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getEndKey());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), prefixEnd);
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), prefixEnd);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), upperBound);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getEndKey(), true);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getEndMap());
[PATCH] return new PrefixRangeEntrySet(delegate.getPrefixStart(), delegate.getName());
[PATCH] return new prefixRangeEntrySet(delegate.getPrefixStart(), delegate.getValue());
[PATCH] return new PrefixRangeEntrySetImpl<K, V>(delegate);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart().getKey(), getValue());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart().getKey(), getBase());
[PATCH] return new PrefixRangeEntrySet(createPrefixRangeMap(), true);
[PATCH] return new PrefixRangeEntrySet.PrefixRangeMap<K, V>(delegate);
[PATCH] return Collections.<Map.Entry<K, V>>emptyList();
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getEndKey(), getBase());
[PATCH] return(SortedMap<K, V>)delegate.createRangeMap();
[PATCH] return new PrefixRangeEntrySet(this.delegate.createPrefixMap());
[PATCH] return new PrefixRangeEntrySet().delegate.createPrefixMap();
[PATCH] return new PrefixRangeEntrySet.<K, V>(delegate.createPrefixMap());
[PATCH] return new PrefixRangeEntrySet<K, V>(createPrefixRangeMap());
[PATCH] return new PrefixRangeEntrySet( delegate.getPrefixStart(), delegate.getValue());
[PATCH] return delegate.createPrefixMap();
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), toPrefixEnd);
[PATCH] return this.delegate.createRangeMap();
[PATCH] return new PrefixRangeEntrySet(delegate.isPrefixStart, prefixEnd);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getLongPrefix());
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), parentMap);
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getEndIndex());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), getMaximumValue());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart(), delegate);
[PATCH] return new PrefixRangeEntrySet(super.createPrefixMap());
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), false);
[PATCH] return new PrefixRangeEntrySet(delegate.prefixStart, prefixEnd);
[PATCH] return new StandardPrefixRangeEntrySet(delegate.createPrefixRangeMap());
[PATCH] return new DefaultPrefixRangeMap<K, V>(delegate);
[PATCH] return new PrefixRangeEntrySetAdapter<K, V>(delegate);
[PATCH] return new PrefixRangeEntrySet(super.createPrefixRangeMap());
[PATCH] return new PrefixRangeEntrySet(super.getPrefixStart(), delegate);
[PATCH] return new PrefixRangeEntrySet(new PrefixRangeEntrySet(delegate));
[PATCH] return new FlatMap<K, V>(delegate.createPrefixMap());
[PATCH] public final boolean isToInclusive() { return true;
[PATCH] return super.createPrefixRangeMap();
[PATCH] return new prefixRangeEntrySet(createPrefixRangeMap());
[PATCH] return new RangeEntrySet(delegate.createRangeMap());
[PATCH] return new RangeEntrySet(createPrefixRangeMap());
[PATCH] return newPrefixRangeEntrySet(createPrefixRangeMap());
[PATCH] return new RangeEntrySet(super.createRangeMap());
[PATCH] return delegate.createPrefixRangeMap();
[PATCH] return new PrefixRangeEntrySet(delegate.next());
[PATCH] return new PrefixRangeEntrySet(entrySet());
[PATCH] return new PrefixRangeEntrySet(delegate);
[PATCH] return new PrefixRangeEntrySet(generatePrefixNames());
[PATCH] return new PrefixRangeEntrySet(getPrefixStart());
[PATCH] return new PrefixRangeEntrySet(generatePrefixMap());
[PATCH] return decorated().createRangeMap();
[PATCH] return parent.createPrefixMap();
[PATCH] return new RangeEntrySet(createRangeMap());
[PATCH] return this.delegate.createPrefixMap();
[PATCH] return Collections.<K, V>emptyMap();
[PATCH] return super.createPrefixedMap();
[PATCH] return Collections.<K, V>emptyList();
[PATCH] return new PrefixRangeEntrySet("");
[PATCH] return new PrefixRangeEntrySet(getValue());
[PATCH] return parent.createRangeMap();
[PATCH] return createPrefixRangeMap();
[PATCH] return createPrefixMap();
[PATCH] returnsuper.createRangeMap();
[PATCH] return super.isToInclusive();
