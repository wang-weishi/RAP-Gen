[PATCH] docData = docData.limit(byteData.position());
[PATCH] docData = docData.limit(ByteBuffer.class);
[PATCH] docData = docData.limit(ByteBuffer.DEFAULT_BUFFER);
[PATCH] docData = docData.asUnquotedUTF8();
[PATCH] docData = docData.limit(ByteBuffer.EMPTY_BUFFER);
[PATCH] docData = docData.limit(ByteBuffer.allocate(1));
[PATCH] Document doc = Document.createShell(baseUri);
[PATCH] docData = docData.truncated();
[PATCH] docData = docData.array();
[PATCH] Validate.notEmpty(docData,"Document not found");
[PATCH] if(docData!= null){ throw new IllegalArgumentException(""); }
[PATCH] docData = docData.limit(ByteBuffer.initialCapacity());
[PATCH] documentData = docData.limit(byteData.position());
[PATCH] logger.info("Parsing:" + baseUri);
[PATCH] Validate.notEmpty(docData,"No document to parse");
[PATCH] docData = docData.limit(ByteBuffer.WRAP_BUFFER);
[PATCH] Validate.notEmpty(docData,"Invalid XML document data");
[PATCH] logger.fine("Parsing:" + baseUri);
[PATCH] docData = docData.limit(ByteBuffer.allocate(BUFFER));
[PATCH] docData = docData.limit(ByteBuffer.size());
[PATCH] docData = docData.trim();
[PATCH] Validate.notEmpty(docData,"No doc data available");
[PATCH] foundCharset = CharacterEncodingNames.getDefaultCharset();
[PATCH] docData = docData.limit(ByteBuffer.MAX_VALUE);
[PATCH] Validate.notEmpty(docData,"Missing doc data.");
[PATCH] Validate.notEmpty(docData);
[PATCH] docData = ByteBuffer.wrapWithBuffer(docData);
[PATCH] docData = docData.limit(byteData);
[PATCH] Validate.notEmpty(docData,"Document cannot be parsed");
[PATCH] docData = docData.rewind();
[PATCH] docData = docData.limit(byteData.remaining());
[PATCH] Validate.notEmpty(docData,"No document to parse.");
[PATCH] docData = docData.slice(byteData.position());
[PATCH] Validate.notEmpty(docData,"Invalid XML doc data");
[PATCH] docData = TextUtilities.emptyIfNull(docData);
[PATCH] docData = byteData.limit(byteData.position());
[PATCH] docData = String.valueOf(docData.limit());
[PATCH] Validate.notEmpty(docData,"Document not found.");
[PATCH] Validate.notNull(docData);
[PATCH] Validate.notEmpty(charsetName,"No charset name found.");
[PATCH] docData = Document.createShell(docData.limit());
[PATCH] docData.limit(byteData.position());
[PATCH] docData = docData.limit(ByteBuffer.INT_VALUE);
[PATCH] docData = docData.limit(bufferSize);
[PATCH] setBaseUri(baseUri);
[PATCH] logger.fine("Parsing:" + charsetName);
[PATCH] Validate.notEmpty(docData,"Invalid doc data");
[PATCH] String charsetName = CharacterEncodingNames.getDefaultCharset();
[PATCH] docData = docData.duplicate();
[PATCH] Validate.notEmpty(docData,"Error parsing byte data");
[PATCH] Validate.notEmpty(docData,"Missing doc data");
[PATCH] docData = Document.createShell(docData);
[PATCH] document = Document.createShell(baseUri);
[PATCH] Validate.notEmpty(charsetName,"No charset name found");
[PATCH] foundCharset = Character.name(docData.limit());
[PATCH] Document docData = Document.createShell(docData.limit());
[PATCH] docData = docData.EMPTY_BUFFER();
[PATCH] byteData.limit(docData.position());
[PATCH] Validate.notEmpty(charsetName,"No charset to parse");
[PATCH] Validate.notEmpty(charsetName);
[PATCH] docData = docData.flip();
[PATCH] docData = docData.notNull();
[PATCH] docData = docData.remaining();
[PATCH] docData = docData.asMutableBuffer();
[PATCH] docData = docData. flip();
[PATCH] docData = docData.emptyIfNull();
[PATCH] foundCharset = charsetName.toLowerCase();
[PATCH] docData = docData. flipBuffers();
[PATCH] docData = docData. getArrayBuffer();
[PATCH] this.setCharsetName(charsetName);
[PATCH] docData = docData.Prune();
[PATCH] Validate.notEmpty(baseUri);
[PATCH] docData = docData.position();
[PATCH] docData = docData.flush();
[PATCH] docData = docData.capacity();
[PATCH] setCharsetName(charsetName);
[PATCH] docData = docData.nonNull();
[PATCH] docData = docData.wrappedBuffer();
[PATCH] xmlValidator.validate(docData);
[PATCH] docData = docData.compact();
[PATCH] this.setCharset(charsetName);
[PATCH] docData = docData.arrays();
[PATCH] String defaultCharset = getDefaultCharset();
[PATCH] meta = parser.getMetaData();
[PATCH] parser.validate(docData);
[PATCH] reset();
[PATCH] setCharset(charsetName);
[PATCH] super(baseUri);
[PATCH] throw new IllegalArgumentException("");
[PATCH] parser.validate();
[PATCH] ensureLoaded(1);
[PATCH] throw new IllegalStateException("");
[PATCH] super(null);
[PATCH] RegExp.reset();
[PATCH] collectMeta();
[PATCH] clearBuffer();
[PATCH] normalize();
[PATCH] validate();
[PATCH] initialize();

