[PATCH] Collections.sort(markers);
[PATCH] Arrays.sort(markers);
[PATCH] Validate.notNull(markers);
[PATCH] Collections.sort(markers, new LayerComparator());
[PATCH] Collections.filter(markers, new LayerPredicate(layer));
[PATCH] Validate.notNull(marker);
[PATCH] Collections.sort(markers, new LayerOrderComparator());
[PATCH] Collections.sort(markers, new LayerOrder());
[PATCH] Collections.remove(marker.getPaint(), index);
[PATCH] Collections.sort(markers, Layer.DESCENDING);
[PATCH] Collections.sort(markers, new LayerPredicate(layer));
[PATCH] Preconditions.checkState(markers.contains(marker));
[PATCH] Validate.isTrue(markers.size() == 1);
[PATCH] removeMarkerAnnotations(markers, marker.getClass());
[PATCH] Collections.remove(marker.getBounds(), index);
[PATCH] Collections.sort(markers, new Integer(index));
[PATCH] Collections.filter(markers, new DuplicatesPredicate());
[PATCH] Preconditions.checkNotNull(markers);
[PATCH] Collections.filter(markers, new LayerPredicate(index));
[PATCH] Collections.remove(marker.getMarker(), index);
[PATCH] removeDomainMarker(index, marker);
[PATCH] removeDomainMarker(index, layer, markers);
[PATCH] if(markers!= null){ throw new IllegalArgumentException(""); }
[PATCH] Validate.isTrue(markers.contains(marker));
[PATCH] Collections.filter(markers, new LayerPredicate(0));
[PATCH] CollectionUtils.remove(markers, index);
[PATCH] Collections.filter(markers, new LayerConstraint(layer));
[PATCH] Preconditions.checkState(markers!= null);
[PATCH] boolean removed =!markers.contains(marker);
[PATCH] RefineryUtilities.removeMarker(markers, index);
[PATCH] Collections.remove(marker.getLabel(), layer);
[PATCH] Preconditions.checkState(!markers.isEmpty());
[PATCH] Collections. sort(markers);
[PATCH] Collections.filter(markers, new LayerAnnotation(layer));
[PATCH] Collections.filter(markers, new LayerCondition(layer));
[PATCH] Collections.sort(markers, new DomainMarkerComparator());
[PATCH] removeDomainMarker(layer, index, markers);
[PATCH] Collections.sort(markers, new MarkerComparator());
[PATCH] Collections.remove(marker.getLabel(), marker);
[PATCH] Collections.sort(markers, new AxisOrder.SortOrder());
[PATCH] Collections.remove(markers, index);
[PATCH] Collections.sort(markers, new Evaluator.DomainComparator());
[PATCH] Collections.sort(markers, new AxisOrder());
[PATCH] markers =(ArrayList)markers.clone();
[PATCH] Collections.sort(markers, new AxisOrderComparator());
[PATCH] Collections.sort(markers, new LayerOrder());
[PATCH] Collections.remove(marker.getKey());
[PATCH] Marker[] annotations = Layer.getAnnotations(layer);
[PATCH] Collections.sort(markers, new SortOrder());
[PATCH] Collections.remove(markers, marker);
[PATCH] Collections.remove(marker.getPaint());
[PATCH] Collections.sort(markers, new RemoveDomainMarker());
[PATCH] Collections.sort(markers, new ValueComparator());
[PATCH] Collections.reverse(markers);
[PATCH] removeDomainMarker(marker, layer);
[PATCH] Collections.sort(markerList(markers));
[PATCH] Arrays.sort(markers, new LayerComparator());
[PATCH] Marker[] annotations = marker.getAnnotations();
[PATCH] removeMarkerInsets(markers, index);
[PATCH] collection =(Collection)markers.clone();
[PATCH] debuggingInfo.removeMarker(marker);
[PATCH] Collections.unmodifiableList(markers);
[PATCH] Collections.remove(marker, layer);
[PATCH] CollectionUtils.remove(markers, marker);
[PATCH] index = Validate.notNull(index);
[PATCH] removeDomainMarkerAnnotations(markers, index);
[PATCH] Collections.sort(markers, new Predicate());
[PATCH] Validate.notEmpty(markers);
[PATCH] Collections.emptyIfNull(markers);
[PATCH] Collections.sort(markers, new LinkedList());
[PATCH] Collections.sort(markers, new Visitor());
[PATCH] Collections.removeAll(markers, marker);
[PATCH] addDomainMarker(marker, layer);
[PATCH] removeDomainInsets(markers, index);
[PATCH] layer.removeMarker(marker);
[PATCH] Preconditions.checkNotNull(marker);
[PATCH] Collections.sort(markers);
[PATCH] Collections.<Marker>sort(markers);
[PATCH] Collections.checkNotNull(markers);
[PATCH] markers.remove(marker);
[PATCH] removeMarker(marker, layer);
[PATCH] registry.removeMarker(marker);
[PATCH] Collections.clear(markers);
[PATCH] model.removeMarker(marker);
[PATCH] Collections.unsort(markers);
[PATCH] Sort.sort(markers);
[PATCH] Collections.SortKeys(markers);
[PATCH] Collections.shuffle(markers);
[PATCH] recalculateBounds(markers);
[PATCH] Collections.sort( markers);
[PATCH] Collections.sort(markers);
[PATCH] Collections.trim(markers);
[PATCH] removeAllAnnotations(markers);
[PATCH] Arrays.sort(markers);
[PATCH] Collections.sort(marks);
[PATCH] whitelist.remove(marker);
[PATCH] sort(markers);
[PATCH] validateState(markers);
[PATCH] sortAnnotations(markers);
[PATCH] validateIndex(index);
