[PATCH] return parseTypeExpression(token);
[PATCH] return parseContextTypeExpression(token);
[PATCH] return parseJSTypeExpression(token);
[PATCH] return parseTopLevelTypeExpression(token);
[PATCH] return parseAndRecordTypeExpression(token);
[PATCH] return createContextTypeExpression(token);
[PATCH] return parseExpression(token);
[PATCH] return parseFunctionTypeExpression(token);
[PATCH] return new JSTypeExpression(token);
[PATCH] return nextToken(token);
[PATCH] return parseUnionTypeExpression(token);
[PATCH] return parseClassType(token);
[PATCH] return createJSTypeExpression(token);
[PATCH] return parseFieldTypeExpression(token);
[PATCH] return parseTemplateTypeExpression(token);
[PATCH] return parseClassTypeExpression(token);
[PATCH] return getContextTypeExpression(token);
[PATCH] return parseAndIgnoreWhitespace(token);
[PATCH] return parseConstructorTypeExpression(token);
[PATCH] return readContextTypeExpression(token);
[PATCH] return parseExpr(token);
[PATCH] return createTypeExpression(token);
[PATCH] return parseBaseTypeExpression(token);
[PATCH] return parseBasicTypeExpression(token);
[PATCH] return parseSimpleTypeExpression(token);
[PATCH] return parseTypeParameterExpression(token);
[PATCH] return handleContextTypeExpression(token);
[PATCH] return handleTypeExpression(token);
[PATCH] return parseConcreteTypeExpression(token);
[PATCH] return parseParameterType(token);
[PATCH] return parseONTypedTypeExpression(token);
[PATCH] return parsecontextTypeExpression(token);
[PATCH] return parseParameterizedTypeExpression(token);
[PATCH] return parseGenericTypeExpression(token);
[PATCH] return parse JSTypeExpression(token);
[PATCH] return parseNativeTypeExpression(token);
[PATCH] return nextExpr(token);
[PATCH] return parseJsDocTypeExpression(token);
[PATCH] return applyCommonRestriction(token);
[PATCH] return parseClassTypeExpression(token);
[PATCH] return parseTypedTypeExpression(token);
[PATCH] return parseFormalTypeExpression(token);
[PATCH] return parseInnerClassTypeExpression(token);
[PATCH] return parse ContextTypeExpression(token);
[PATCH] return parsetypeExpression(token);
[PATCH] return nextExpression(token);
[PATCH] return nextContextTypeExpression(token);
[PATCH] return extractContextTypeExpression(token);
[PATCH] return nextNode();
[PATCH] return contextTypeExpression(token);
[PATCH] return parseAndMoveToFront(token);
[PATCH] return parseParseTypeExpression(token);
[PATCH] return initContextTypeExpression(token);
[PATCH] return parseFirstChild(token);
[PATCH] return nextNodeFromStack(token);
[PATCH] return nextNodeWithType(token);
[PATCH] return readTypeExpression(token);
[PATCH] return finishBuildTypeExpression(token);
[PATCH] return parseCompositeTypeExpression(token);
[PATCH] return parseDomainTypeExpression(token);
[PATCH] return _parseTypeExpression(token);
[PATCH] return parseExpression(token);
[PATCH] return parseGenericTypeExpression(token);
[PATCH] return parseParsedTypeExpression(token);
[PATCH] return parseGenericParameterType(token);
[PATCH] return next();
[PATCH] return parseONT(token);
[PATCH] return parseTypeParameter(token);
[PATCH] return parseClassExpression(token);
[PATCH] return nextNodeForId(token);
[PATCH] return parseSubTypeOfExpression(token);
[PATCH] return parseElementType(token);
[PATCH] return parse negatedExpression(token);
[PATCH] return handleUnexpectedToken(token);
[PATCH] return nextNode(token);
[PATCH] return parseLT(token);
[PATCH] return parseTypeExpr(token);
[PATCH] return expr(token);
[PATCH] return parseSubTypeOfType(token);
[PATCH] return parseShortCircuitExpression(token);
[PATCH] return parseONTYPEExpression(token);
[PATCH] return parseEnumParameterType(token);
[PATCH] return parseTextNode(token);
[PATCH] return parsedTypeExpression(token);
[PATCH] return parseShortExpression(token);
[PATCH] return parseToken(token);
[PATCH] return parseType(token);
[PATCH] return parseObjectType(token);
[PATCH] return parseEXPRESSION(token);
[PATCH] return parseAndResetContext(token);
[PATCH] return parseTypes(token);
[PATCH] return createName(token);
[PATCH] return parseGenericType(token);
[PATCH] return addToken(token);
[PATCH] return next(token);
[PATCH] return parseAndResetContext();
[PATCH] return token == null? null : nextToken();
[PATCH] return nextToken();
);
;
