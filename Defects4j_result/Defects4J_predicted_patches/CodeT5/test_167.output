[PATCH] Context rhsContext = getContextForNoInOperator(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context), Context.OTHER;
[PATCH] Context rhsContext = createContextForNoInOperator(context, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context), p;
[PATCH] Context rhsContext = getContextForNoInOperator(context).getRValue();
[PATCH] Context rhsContext = getContextForNoInOperator(context)- p;
[PATCH] Context rhsContext = getContextForNoInOperator(context).createChildContext();
[PATCH] Context rhsContext = getContextForNoInOperator(context), context;
[PATCH] Context rhsContext = getContextForNoInOperator(context), false;
[PATCH] Context rhsContext = getContextForNoInOperator(context], p);
[PATCH] Context rhsContext = getContextForNoInOperator(context, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context): Context.OTHER;
[PATCH] Context rhsContext = getContextForNoInOperator(context), Context.LOCAL;
[PATCH] Context rhsContext = getContextForNoInOperator(context).getRP();
[PATCH] Context rhsContext = getContextForNoInOperator(type, p);
[PATCH] Context rhsContext = getContextForNoInequality(context);
[PATCH] Context rhsContext = getContextForNoInOperator(contextp);
[PATCH] Context rhsContext = getContextForNoInOperator(context,"?", p);
[PATCH] Context rhsContext = getContextForNoFail(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context), true;
[PATCH] Context rhsContext = getContextForNoEqual(context, p);
[PATCH] Context rhsContext = getContextForNoReturn(context);
[PATCH] Context rhsContext = getContextForNoInequality(context, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context)- 1;
[PATCH] Context rhsContext = getContextForNoInOperator(context), Context.STATEMENT;
[PATCH] Context rhsContext = getContextForConstant(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context), Context.OTHER);
[PATCH] Context rhsContext =(context == Context.START_OF_EXPR);
[PATCH] Context rhsContext = getContextForNoInOperator(context), p + 1;
[PATCH] Context rhsContext = getContextFornoInOperator(context, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context).getNext();
[PATCH] Context rhsContext = getContextForNoInOperator(context), p);
[PATCH] Context rhsContext = getContextForNoDanglingElse(context);
[PATCH] Context rhsContext = getContextFornoInOperator(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context), Context.INTERNAL;
[PATCH] Context rhsContext = getContextForNoInOperator(context), null, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context), context);
[PATCH] Context rhsContext = Context.IN_FOR_INIT_CLAUSE;
[PATCH] Context rhsContext = getContextForNoInOperator(context2, p);
[PATCH] Context rhsContext = getContextForNoInOperator(ctxt, p);
[PATCH] Context rhsContext = getContextForNoImplicitReturn(context);
[PATCH] Context rhsContext = getContextForNoInOperator(contextType, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context p);
[PATCH] Context rhsContext = getContextForNoInExpression(context);
[PATCH] Context rhsContext = getContextBeforeDanglingElse(context, p);
[PATCH] Context rhsContext = createContextForNoInOperator(type, p);
[PATCH] Context rhsContext = getContextForNoMoreThanOneArg(context);
[PATCH] Context rhsContext = createContext(context, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context), null;
[PATCH] Context rhsContext = getContextForNoSideEffects(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context), true);
[PATCH] context rhsContext = getContextForNoInOperator(context);
[PATCH] Context rhsContext = getContextForNoInequal(context, p);
[PATCH] Context rhsContext = getContextForNoInfixExpression(context);
[PATCH] Context rhsContext = getContextforNoInOperator(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context context);
[PATCH] Context rhsContext = getContextForNoOutOperator(context);
[PATCH] Context rhsContext = getContextForNoDeprecation(context);
[PATCH] Context rhsContext = getContextForNoDup(context);
[PATCH] Context rhsContext = getContextForNot(context, p);
[PATCH] Context rhsContext = getContextForNoIntrinsics(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context)};
[PATCH] Context rhsContext = getContextForNoSuccessor(context);
[PATCH] Context rhsContext = createContextForNoInOperator(context);
[PATCH] Context rhsContext = getContextForNoInAssignment(context);
[PATCH] Context rhsContext = getContextForNoMoreExpressions(context);
[PATCH] Context rhsContext = createContextForNoInOperator(p);
[PATCH] Context rhsContext = getContextForEmpty(context, p);
[PATCH] Context rhsContext =getContextForNoInOperator(context);
[PATCH] Context rhsContext = getContextForNOP(context);
[PATCH] Context rhsContext = getContextForNoInComparison(context);
[PATCH] Context rhsContext = getContextForNoInOperator( context);
[PATCH] Context rhsContext = getContextForNoDeadExpr(context);
[PATCH] Context rhsContext = getContextForNoInOperator(p);
[PATCH] Context rhsContext = getContextForChild(n, p);
[PATCH] Context rhsContext = getContextForNoInOperator(context));
[PATCH] Context rhsContext = getContextForNoInfinity(context);
[PATCH] Context rhsContext = getContextForNoParens(context);
[PATCH] Context rhsContext = getContextForNonEmptyExpression(context);
[PATCH] Context rhsContext = getContextForNoInOperator(context;
[PATCH] Context rhsContext = getContextForNoPeek(context);
[PATCH] Context rhsContext = getContextForNoArg(context);
[PATCH] Context rhsContext = getContextForNoThrow(context);
[PATCH] Context rhsContext = getContextForNoEmpty(context);
[PATCH] Context rhsContext = getContextForNoSquare(context);
[PATCH] Context rhsContext = getContextForCodeInsertion(context);
[PATCH] Context rhsContext = getContextForNoAgain(context);
[PATCH] Context rhsContext = new Context(context, p);
[PATCH] Context rhsContext = getContextForNoUndefined(context);
[PATCH] Context rhsContext = getContextForEmpty(context);
[PATCH] Context rhsContext = getContextFromStack(context);
[PATCH] Context rhsContext = newContext(context, p);
[PATCH] Context rhsContext = getPseudoContext(context);
[PATCH] Context rhsContext = getContextFromScope(context);
[PATCH] Context rhsContext = getContextForUnknown(context);
[PATCH] Context rhsContext = getContextForNothing(context);
[PATCH] Context rhsContext = getContextForConstants(context);
[PATCH] Context rhsContext = currentContext(context);
);
