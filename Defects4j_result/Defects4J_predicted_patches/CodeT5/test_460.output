[PATCH] id = deserializeObjectId(jp, ctxt, id);
[PATCH] id = deserialize(jp, ctxt, id);
[PATCH] id = ctxt.findObjectId(id);
[PATCH] id = ctxt.convertObjectId(id);
[PATCH] if(id == null){ return null; }
[PATCH] id = ctxt.deserializeIfNatural(id);
[PATCH] id = ctxt.unwrappingObjectId(id);
[PATCH] id = ctxt.deserializeObjectId(id);
[PATCH] id = ctxt.fixObjectId(id);
[PATCH] id = ctxt.findObjectReference(id, id);
[PATCH] id = ctxt.findRootValue(id);
[PATCH] id = ctxt.decodeObjectId(id);
[PATCH] id = ctxt.removeObjectId(id);
[PATCH] id = ctxt.deserializeInt(id);
[PATCH] id = ctxt.unwrappingId(id);
[PATCH] id = ctxt.findObjectId(id, id);
[PATCH] id = ctxt.getObjectId(id);
[PATCH] id = ctxt.unwrappingObject(id);
[PATCH] id = ctxt.findIndexValue(id);
[PATCH] id = ctxt.unwrappingInstance(id);
[PATCH] id = ctxt.unwrapId(id);
[PATCH] id = ctxt.stripLeadingAndTrailingQuotes(id);
[PATCH] id = ctxt.unboxObjectId(id);
[PATCH] id = ctxt.unwrapAndIgnoreWhitespace(id);
[PATCH] id = ctxt.unwrapAndBind(id);
[PATCH] id = ctxt.deserialize(jp, ctxt);
[PATCH] id = ctxt.unbox(id);
[PATCH] id = ctxt.findContextualValueId(id);
[PATCH] id = ctxt.findctxtObjectId(id);
[PATCH] id = ctxt.stripTrailingZeroes(id);
[PATCH] id = handleObjectId(jp, ctxt, id);
[PATCH] id = ctxt.findInjectableValueId(id);
[PATCH] id = ctxt.unescapeObjectId(id);
[PATCH] id = ctxt.findContextReference(id, id);
[PATCH] id = ctxt.findIdValue(id);
[PATCH] id = ctxt.deserializeIndex(id);
[PATCH] id = deserialize(ctxt, id);
[PATCH] id = ctxt.unwrapAndClearId(id);
[PATCH] id = ctxt.deserializeId(id);
[PATCH] id = ctxt.restrictByNotNullOrUndefined(id);
[PATCH] id = ctxt.convertId(id);
[PATCH] id = ctxt.unwrapAndClearBuffer(id);
[PATCH] id = ctxt.unwrapReference(id);
[PATCH] id = ctxt.unwrappingIterator(id);
[PATCH] id = ctxt.unwrapAndResolveId(id);
[PATCH] id = ctxt.deserializeOptionalObjectId(id);
[PATCH] id = ctxt.unwrapAndValidateObjectId(id);
[PATCH] id = ctxt.deserializeObjectId(jp);
[PATCH] id = ctxt.unwrappingHandlerInstance(id);
[PATCH] id = convertId(id);
[PATCH] id = ctxt.filterObjectId(id, true);
[PATCH] jp.nextToken();
[PATCH] id = ctxt.unwrapAndClose(id);
[PATCH] id = ctxt.removeId(id);
[PATCH] id = ctxt.findReferenceValue(id);
[PATCH] id = ctxt.findIndex(id);
[PATCH] id = ctxt.findHiddenValue(id);
[PATCH] id = ctxt.findReferenceId(id);
[PATCH] id = ctxt.unwrapObjectId(id);
[PATCH] id = ctxt.processId(id);
[PATCH] ctxt.setValue(id);
[PATCH] id = ctxt.translateId(id);
[PATCH] id = ctxt.translateValue(id);
[PATCH] id = ctxt.deserializeUID(id);
[PATCH] id = convertObjectId(id);
[PATCH] id = ctxt.normalizeObjectId(id);
[PATCH] id = ctxt.validateObjectId(id);
[PATCH] id = ctxt.findIndexvalue(id);
[PATCH] id = ctxt.deserializeObjectId(jp, ctxt);
[PATCH] id = ctxt.rehashObjectId(id);
[PATCH] id = ctxt.findTypedValue(id);
[PATCH] id = ctxt.expandObjectId(id);
[PATCH] ctxt.setObjectId(id);
[PATCH] id = ctxt.toObjectId(id);
[PATCH] id = ctxt.deserializeHiddenValue(id);
[PATCH] id = ctxt.resolveObjectId(id);
[PATCH] id = ctxt.findContextReference(id);
[PATCH] id = ctxt.escapeObjectId(id);
[PATCH] id = ctxt.removeContextualValue(id);
[PATCH] id = ctxt.findIdValue(id, id);
[PATCH] id = ctxt.translateName(id);
[PATCH] id = ctxt.translateObjectId(id);
[PATCH] id = ctxt.setObjectId(id);
[PATCH] id = ctxt.transformObjectId(id);
[PATCH] id = ctxt.rehash(id);
[PATCH] _objectIdReader.validate(id);
[PATCH] id = ctxt.serializeObjectId(id);
[PATCH] id = ctxt.deserializeInteger(id);
[PATCH] id = ctxt.filterObjectId(id);
[PATCH] id = ctxt.unwrapAndConvert(id);
[PATCH] id = ctxt.findctxtObjectId(id, id);
[PATCH] throw ctxt.mappingException("");
[PATCH] id = decodeObjectId(id);
[PATCH] id = normalizeObjectId(id);
[PATCH] ctxt.setId(id);
[PATCH] id = ctxt.filterObjectId(id, false);
[PATCH] id = ctxt.deserializeSetAndReturn(id);
[PATCH] id = id.toString();
[PATCH] id = ctxt.deserializer.deserialize(jp);
[PATCH] id = ctxt.unwrapAndDeserialize(id);
