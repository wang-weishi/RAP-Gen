[PATCH] case REGULA_FALSI: f0 *= Math.exp(-f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(f1, -fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-x1 - x0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.sqrt(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= 1.0 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-x1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(2.0, f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.cos(fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.floor(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(1.0, f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(x1 - fx, f0); break;
[PATCH] case REGULA_FALSI: f0 *=(1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.log(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.sqrt(fx); break;
[PATCH] case REGULA_FALSI: f0 *=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-4.0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.floor(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(2.0, fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.floor(1.0 - f1); break;
[PATCH] case REGULA_FALSI: f0 *= 1.5 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.sin(fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.cos(f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(f1, fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.sqrt(2.0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-2.0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.cos(x1 - x0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.floor(f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(f1, 2.0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.cos(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.sqrt(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-pi *(f1 - fx)); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(f1, 0.5); break;
[PATCH] case REGULA_FALSI: f0 *= Math.log(f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.rint(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-15.0); break;
[PATCH] case REGULA_FALSI: f0 /= Math.exp(-f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(x, f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.floor(x1 - x0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(x1, f0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(fx, f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, x1 - x0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.ceil(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-f1 -fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(f1, -x0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.floor(functionValueAccuracy); break;
[PATCH] case REGULA_FALSI: f0 *= 1.0 -(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, f1 - f0); break;
[PATCH] case REGULA_FALSI: f0 /= Math.sqrt(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, f1 / fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.abs(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-x0 - fx); break;
[PATCH] case REGULA_FALSI: f0 /= Math.sqrt(fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(functionValueAccuracy, fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10, absoluteAccuracy); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(functionValueAccuracy, f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-x1 - min); break;
[PATCH] case REGULA_FALSI: f0 *= Math.log(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(f1, 1.0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.pow(10,f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.abs(fx - f1); break;
[PATCH] case REGULA_FALSI: return Math.exp(-f0 /(f1 - fx));
[PATCH] case REGULA_FALSI: f0 *= Math.sqrt(functionValueAccuracy); break;
[PATCH] case REGULA_FALSI: f0 *= Math.cos(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-7.0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.sqrt(f1); break;
[PATCH] case REGULA_FALSI: f0 *=(1.0 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.exp(-30.0); break;
[PATCH] case REGULA_FALSI: if(f0 >= 1.0){ throw new IllegalArgumentException(""); }
[PATCH] case REGULA_FALSI: f0 *= Math.sin(f1); break;
[PATCH] case REGULA_FALSI: f0 *= Math.cos(x0); break;
[PATCH] case REGULA_FALSI: f0 *= Math.max(f0, 1.0); break;
[PATCH] case REGULA_FALSI: if(f0 >= 1.0){ f0 -= 1.0; }
[PATCH] case REGULA_FALSI: return f0 /(f1 - fx);
[PATCH] case REGULA_FALSI: case 0.5 : return f0;
[PATCH] case REGULA_FALSI: f0 *= Math.random(); break;
[PATCH] case REGULA_FALSI: return Math.exp(-f0);
[PATCH] case REGULA_FALSI: return f0;
[PATCH] case REGULA_FALSI: break;
[PATCH] case REGULA_FALSI: reverse(); break;
[PATCH] case REGULA_FALSI: pass; break;
[PATCH] case REGULA_FALSI: continue;
[PATCH] case REGULA_FALSI: pass;
[PATCH] default: throw new IllegalArgumentException("");
[PATCH] default: throw new IllegalStateException("");
[PATCH] default: throw new UnsupportedOperationException("");
[PATCH] default: throw new RuntimeException("");
[PATCH] default: throw new AssertionError("");
[PATCH] default: throw new Exception("");
[PATCH] codeBug(); break;
[PATCH] getResult(); break;
[PATCH] getResult();
;
