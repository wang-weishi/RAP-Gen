[PATCH] found = propToRm.equals(prop.getName());
[PATCH] found = key.equals(prop.getName());
[PATCH] found = prop.getName().equals(key);
[PATCH] found = key.equals(prop.getKey());
[PATCH] found = key.equals(propToRm.getName());
[PATCH] found = propToRm.getName().equals(key);
[PATCH] found = propToRm.equals(_hashArea[i]);
[PATCH] found = propToRm.equalsIgnoreCase(prop.getName());
[PATCH] found = key.equals(prop.getInternalName());
[PATCH] found = proptoRm.equals(prop.getName());
[PATCH] found = propToRm.hasProperty(prop.getName());
[PATCH] found = propToRm.containsKey(prop.getName());
[PATCH] found = props.contains(prop.getName());
[PATCH] found = _hashArea[i].equals(prop.getName());
[PATCH] found = propToRm.equalsKey(prop.getName());
[PATCH] found = propToRm.hasKey(prop.getName());
[PATCH] found = propertyToRm.equals(prop.getName());
[PATCH] found = propToRm.name().equals(key);
[PATCH] found = prop toRm.equals(prop.getName());
[PATCH] found = propToRm.hasName(prop.getName());
[PATCH] found = propToRm.equals(Prop.getName());
[PATCH] found = key.equals(prop.getName());
[PATCH] found =!key.equals(prop.getName());
[PATCH] found = key.equals(prop.getName() +".");
[PATCH] found = key == null || key.equals(prop.getName());
[PATCH] found = props.contains(propToRm.getName());
[PATCH] found = propToRm.matches(key);
[PATCH] found = propToRm.equalsName(prop.getName());
[PATCH] found = key.equals(prop.getName() +"'");
[PATCH] found = propToRm.isDeclared(prop.getName());
[PATCH] found = propToRm.isValidName(prop.getName());
[PATCH] found = KEY_FACTORY.find(key, prop.getName());
[PATCH] found = propToRm.find(prop.getName());
[PATCH] found = _hashMask.equals(prop.getName());
[PATCH] found = propTo Rm.equals(prop.getName());
[PATCH] found = key.equals(prop2Rm.getName());
[PATCH] found = propToRm.equalsPath(prop.getName());
[PATCH] found = key.equals(prop.getName() +"=");
[PATCH] found = prop.equals(propToRm.getName());
[PATCH] found = keys.equals(prop.getName());
[PATCH] found = prevToRm.equals(prop.getName());
[PATCH] found = propToRm.isValidKey(prop.getName());
[PATCH] found = propTORm.equals(prop.getName());
[PATCH] found = key.equals(prop.getName() +")");
[PATCH] found = KeyUtils.equals(key, prop.getName());
[PATCH] found = prop2Rm.equals(prop.getName());
[PATCH] found = key.equals(prop.getkey());
[PATCH] found = KEY_MATCHER.equals(prop.getName());
[PATCH] found = key.equals(prop.getPropertyName());
[PATCH] found = propName.equals(prop.getName());
[PATCH] found = Key.equals(propToRm.getName());
[PATCH] found =Key.equals(propToRm.getName());
[PATCH] found = p.equals(propToRm.getName());
[PATCH] found = key.equals(prop.getName() + 1);
[PATCH] found = key.equals(prop.hashCode());
[PATCH] found = propToRm.isValid(prop.getName());
[PATCH] found = prop.getName().equals(prop.getName());
[PATCH] found = propToRm. getName().equals(key);
[PATCH] found = propToRm. equals(prop.getName());
[PATCH] found = KeyUtil.equals(key, prop.getName());
[PATCH] found = propToRm.equals(Prop.name());
[PATCH] found = key.equals(prop.getId());
[PATCH] found =propToRm.equals(prop.getName());
[PATCH] found = propToRm.equals(property.getName());
[PATCH] found = propToRm.equals(prop.getName());
[PATCH] found = proptoRm.getName().equals(key);
[PATCH] found = KEY_HASH.equals(prop.getName());
[PATCH] found = PROP_HASH.equals(prop.getName());
[PATCH] found = KEY_EMPTY.equals(prop.getName());
[PATCH] found = PROPERTY_HASH.equals(prop.getName());
[PATCH] found = key.equals(prop.getName()));
[PATCH] found = key.equals(prop.getName())== false;
[PATCH] found = key.equals(prop.getName() +"");
[PATCH] found = key.equals(prop.getFullName());
[PATCH] found = PROPERTY_NAME.equals(prop.getName());
[PATCH] found = this.key.equals(prop.getName());
[PATCH] found = prop.name().equals(key);
[PATCH] found = key.equals(prop.getName());
[PATCH] found = key.equals(prop.getName() +"=?");
[PATCH] found = key.equals(prop.getKeys());
[PATCH] found = propToRm.equals(Prop.NAME());
[PATCH] found = KEY_ONLY.equals(prop.getName());
[PATCH] found = key.equals(prop.getName() +"$");
[PATCH] found = propToRm.equals(props.iterator());
[PATCH] found = key.equals(prop.getName() +"#");
[PATCH] found = props.equals(prop.getName());
[PATCH] found = propToRm.name.equals(key);
[PATCH] found = propToRm.equals(Prop.NAME);
[PATCH] found = name.equals(prop.getName());
[PATCH] found = key.equals(prop.findKey());
[PATCH] found = key.equals(prop.getName() +"");
[PATCH] found = propToRm.equals(key);
[PATCH] found = Key.equals(prop.getName());
[PATCH] found = key.equals(prop.getName() +"-");
[PATCH] found =key.equals(prop.getName());
[PATCH] found = k.equals(prop.getName());
[PATCH] found = keys.equals(prop.getKeys());
[PATCH] found = key.equals(prop.getDisplayName());
[PATCH] found = key.equals(prop.getValue());
[PATCH] found = 1.equals(prop.getName());
