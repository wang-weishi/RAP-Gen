[PATCH] c = in.read();
[PATCH] c = in.read(); checkEscapeChar(c);
[PATCH] c = in.read(); throw new IOException("");
[PATCH] c = in.read(); append(( char)c);
[PATCH] c = in.read(); readEscapeCharacter();
[PATCH] c = in.read(); maybeLineBreak();
[PATCH] c = in.read(); checkEscape(c);
[PATCH] c = in.read(); checkLenient();
[PATCH] c = in.read(); validateEscapeChar(c);
[PATCH] c = in.read(); illegalChar(c);
[PATCH] c = in.read(); ensureLoaded(1);
[PATCH] c = in.read(); checkEscapeCharacter(c);
[PATCH] c = in.read(); escape = DISABLED;
[PATCH] c = in.read(); add(( char)c);
[PATCH] c = in.read(); ensureWhitespace();
[PATCH] c = in.read(); ungetChar(c);
[PATCH] c = in.read(); escape = readEscapeCharacter();
[PATCH] ungetChar(c); c = in.read();
[PATCH] c = in.read(); readEscapeChar(c);
[PATCH] c = in.read(); addToString(c);
[PATCH] c = in.read(); ensureChar(c);
[PATCH] c = in.read(); validateEscape(c);
[PATCH] c = in.read(); processEscapeChar(c);
[PATCH] c = in.read(); validEscapeChar(c);
[PATCH] c = in.read(); invalidWhitespace(c);
[PATCH] c = in.read(); ensureCharacterEscape(c);
[PATCH] c = in.read(); doEscapeChar(c);
[PATCH] c = in.read(); invalidChar(c);
[PATCH] illegalSurrogate(c);
[PATCH] c = in.read(); fillBuffer(c);
[PATCH] c = in.read(); unescapeChar(c);
[PATCH] parser.addError("msg.illegal.character");
[PATCH] c = in.read(); decodeEscaped();
[PATCH] c = in.read(); invalidToken(c);
[PATCH] c = in.read(); assert(c == escape);
[PATCH] c = in.read();, escape = DISABLED;
[PATCH] c = in.read(); skipWhitespace();
[PATCH] c = in.read(); handleInvalidChar(c);
[PATCH] c = in.read(); replaceTop(c);
[PATCH] ungetChar(c);
[PATCH] c = in.read(); checkForEscape(c);
[PATCH] c = in.read(); mustBeWhitespace();
[PATCH] c = in.read(); mustEscapeChar(c);
[PATCH] c = in.read(); consume();
[PATCH] c = in.read(); quoteChar = DISABLED;
[PATCH] c = in.read(); doEscape(c);
[PATCH] c = in.read(); readEscaped();
[PATCH] c = in.read(); unescape(c);
[PATCH] c = in.read(); doReadChar();
[PATCH] c = in.read(); assert(c == '\\');
[PATCH] c = in.read(); wrapChar(c);
[PATCH] c = in.read(); ensureLenient();
[PATCH] c = in.read(); verifyState();
[PATCH] c = in.read(); escape = getNextChar();
[PATCH] c = in.read(); decodeEscapeCharacter();
[PATCH] c = in.read(); ch = DISABLED;
[PATCH] c = in.read(); reset();
[PATCH] c = in.read(); advance();
[PATCH] illegalChar(c);
[PATCH] c = in.read(); rewind();
[PATCH] c = in.read(); readWhitespace();
[PATCH] c = in.read(); break;
[PATCH] in.read();
[PATCH] illegalToken(c);
[PATCH] throw new IOException("");
[PATCH] illegalCharacter(c);
[PATCH] illegalWhitespace(c);
[PATCH] c =in.read();
[PATCH] in.skipWS();
[PATCH] in.skipChildren();
[PATCH] in.skipWhitespace();
[PATCH] invalidChar(c);
[PATCH] checkLenient();
[PATCH] readNonWhitespace();
[PATCH] c = readEscape();
[PATCH] badChar(c);
[PATCH] in.skipSpace();
[PATCH] c = read();
[PATCH] illegalByte(c);
[PATCH] invalidToken(c);
[PATCH] processEscape(c);
[PATCH] loadMoreGuaranteed();
[PATCH] in.throwInternal();
[PATCH] In.throwInternal();
[PATCH] in.skipBytes();
[PATCH] badToken(c);
[PATCH] c = readEscaped();
[PATCH] in.readLine();
[PATCH] badCharacter(c);
[PATCH] throw new IllegalStateException("");
[PATCH] in.skipLine();
[PATCH] out.read();
[PATCH] _throwInternal();
[PATCH] readEscapeCharacter();
[PATCH] decodeEscaped();
[PATCH] rewind();
[PATCH] illegalCharacter();
[PATCH] illegalWhitespace();
[PATCH] readEscape();
[PATCH] readFully();
