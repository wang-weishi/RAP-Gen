[PATCH] return getPct(( Comparable<?>)v);
[PATCH] return getPct(new Comparable<?>(v));
[PATCH] return getPct(new Comparable<?>)v);
[PATCH] return getCount(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v, freqTable);
[PATCH] return getPct(v,(Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)+ 1.0;
[PATCH] return getPct(( Comparable<?>)v)- 1.0;
[PATCH] return getPct(( Comparable<?>)v).doubleValue();
[PATCH] return getPct(( Comparable<?>)v)- 1;
[PATCH] return getCount(v,(Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)+ 1;
[PATCH] return getCumPct(( Comparable<?>)v)- 1;
[PATCH] return getPct(( Comparable<?>)v)+ 0.5;
[PATCH] return getPct(( Comparable<?>)v, null);
[PATCH] return getPct(( Comparable<?>)v, true);
[PATCH] return getCumPct(( Comparable<?>)v);
[PATCH] return getCumPct(( Comparable<?>)v)+ 1;
[PATCH] return getPct(( Comparable<?>)v)- 0.5;
[PATCH] return getPct(( Class<?>)v);
[PATCH] return getPct(( Comparable<?>)v)- 0.0;
[PATCH] return getNumber(v,(Comparable<?>)v);
[PATCH] return getTotal(v,(Comparable<?>)v);
[PATCH] return count(v,(Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)- 1D;
[PATCH] return Pct(( Comparable<?>)v);
[PATCH] return getPct(( final Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)+ 1D;
[PATCH] return getPct((Comparable<?>)v);
[PATCH] return getCumPct(new Comparable<?>(v));
[PATCH] return getPct(( Comparable<?>)v)- 100.0;
[PATCH] return getTwo(v,(Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)/ 100.0;
[PATCH] return getPct(null,(Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)+ 100.0;
[PATCH] return getPct(( Collection<?>)v);
[PATCH] return getSumPct(( Comparable<?>)v);
[PATCH] return getPct(new Comparable<?>(v);
[PATCH] return getPct(( Comparable<?>)v)- 0.01;
[PATCH] return getFreq(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)- 0.001;
[PATCH] return getPct(( Comparable<?>)v)- 1d;
[PATCH] return getPeriod(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)+ getCount(v);
[PATCH] return calcPct(( Comparable<?>)v);
[PATCH] return getTotalPct(( Comparable<?>)v);
[PATCH] return getPct(this.freqTable.get(v);
[PATCH] return getPct(( Comparable<?>)v)? 1 : 0;
[PATCH] return getPct(this.freqTable.get(v));
[PATCH] return setPct(( Comparable<?>)v);
[PATCH] return getPct(( java.math.BigDecimal)v);
[PATCH] return getPct(new Class<?>(v));
[PATCH] return getPct(( Comparable<?>)v, false);
[PATCH] return getPct(( Serializable)v);
[PATCH] return getPct(( Comparable<?>)v)- pctOffset;
[PATCH] return getPct(( Comparable<?>)v)+ 0.01;
[PATCH] return getPct(( Comparable<?>)v)- 0.0001;
[PATCH] return getPct(( Comparable<?>)v, 0);
[PATCH] return getTotalCount(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v,"pct");
[PATCH] return getPct(( Comparable<?>)v,freqTable);
[PATCH] return getPct(( Comparable<?>)v)+ 0.001;
[PATCH] return getPct(( Comparable<?>)v)+ 1d;
[PATCH] return getCumPct(( Comparable<?>)v, null);
[PATCH] return getCount(new Comparable<?>(v));
[PATCH] return getPct(( Comparable<?>)v)[0];
[PATCH] return pct(( Comparable<?>)v);
[PATCH] return getMaxPct(( Comparable<?>)v);
[PATCH] return getPct(new QName(( Comparable<?>)v));
[PATCH] return getPct(( Comparable<?>)v + 1);
[PATCH] return getPct(new Supplier<?>(v));
[PATCH] return getPct(( Comparable<?>)v)/ pct;
[PATCH] return getPct(new Comparable<?>>(v));
[PATCH] return getPct(( comparable<?>)v);
[PATCH] return getPct(new QName(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)/ 100;
[PATCH] return count(new Comparable<?>(v));
[PATCH] return getPct(( Object<?>)v);
[PATCH] return getNumerator(( Comparable<?>)v);
[PATCH] return new Double(getCount(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v)- null;
[PATCH] return getPct(((Comparable<?>)v);
[PATCH] return getPctValue(( Comparable<?>)v);
[PATCH] return getP ct(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v.toString());
[PATCH] return getPct(( Comparable<?>)v);
[PATCH] return getTotal(v(( Comparable<?>)v);
[PATCH] return calculatePct(( Comparable<?>)v);
[PATCH] return getPct(( OfType<?>)v);
[PATCH] return getItemCount(( Comparable<?>)v);
[PATCH] return getPercent(( Comparable<?>)v);
[PATCH] return getMinPct(( Comparable<?>)v);
[PATCH] return getPct(new Object[] {v });
[PATCH] return getTotal(new Comparable<?>(v));
[PATCH] return getPeriodType(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>)v);
[PATCH] return getPc(( Comparable<?>)v);
[PATCH] return getPCT(( Comparable<?>)v);
[PATCH] return getPct(( Comparable<?>) v);
[PATCH] return getPct(( Serializable<?>)v);
