[PATCH] if(stackSize == 0){ return; }
[PATCH] this.skipValue();
[PATCH] x1 = stack[stackSize - 1];
[PATCH] x = stack[stackSize - 1];
[PATCH] push(JsonScope.EMPTY_OBJECT);
[PATCH] x2 = stack[stackSize - 1];
[PATCH] Arrays.fill(stack, null);
[PATCH] goTo(stackSize - 2);
[PATCH] push(JsonScope.NONEMPTY_OBJECT);
[PATCH] Array.setLength(stackSize - 2);
[PATCH] values[stackSize - 1] = null;
[PATCH] Stack.this.skipValue();
[PATCH] values[stackSize - 2] = null;
[PATCH] fillStack(stackSize - 2);
[PATCH] Path.setLength(stackSize - 2);
[PATCH] setPos(stackSize - 2);
[PATCH] goTo(stackSize - 1);
[PATCH] checkLenient();
[PATCH] Stack.this.reset();
[PATCH] initStack(stackSize - 2);
[PATCH] setPosition(stackSize - 2);
[PATCH] JsonToken.NAME = peek();
[PATCH] iterator.skipValue();
[PATCH] pathIndices[stackSize - 2];
[PATCH] if(size == 0){ return; }
[PATCH] error("msg.unterminated.property");
[PATCH] this.skipChildren();
[PATCH] this.getStack().push(null);
[PATCH] nextValue();
[PATCH] setCurrentName(null);
[PATCH] traverseBranch(stackSize - 2);
[PATCH] JsonToken.NAME = nextValue();
[PATCH] Arrays.sort(stack);
[PATCH] replaceTop(stackSize - 2);
[PATCH] initStack(stackSize - 1);
[PATCH] nextToken();
[PATCH] appendPath(stackSize - 2);
[PATCH] while(!fillStack(1));
[PATCH] Path.setLength(0);
[PATCH] setPos(stackSize - 1);
[PATCH] error("msg.unreachable");
[PATCH] setPos(stackSize + 1);
[PATCH] this.skipStack();
[PATCH] throw new IllegalStateException("");
[PATCH] this.nextValue();
[PATCH] Stack.setLength(0);
[PATCH] loadMoreGuaranteed();
[PATCH] builder.skipChildren();
[PATCH] builder.skipValue();
[PATCH] nextName();
[PATCH] callback.skipValue();
[PATCH] this.checkLenient();
[PATCH] super.skipValue();
[PATCH] x.skipValue();
[PATCH] setPosition(0);
[PATCH] size = stack.length;
[PATCH] value = pop();
[PATCH] JsonStreamContext.skipValue();
[PATCH] IteratorUtils.skip(this);
[PATCH] reset();
[PATCH] it.skipValue();
[PATCH] initStack();
[PATCH] validator.skipValue();
[PATCH] nextLiteral();
[PATCH] this.skipValues();
[PATCH] nextNull();
[PATCH] skipChildren();
[PATCH] matcher.skipValue();
[PATCH] this.nextName();
[PATCH] value = null;
[PATCH] this.value = null;
[PATCH] setPosition(1);
[PATCH] parser.skipChildren();
[PATCH] doSkipValue();
[PATCH] this.value = pop();
[PATCH] parser.skipValue();
[PATCH] this.skipNode();
[PATCH] value = getNextNull();
[PATCH] parser.addNull();
[PATCH] appendNull();
[PATCH] x1 = null;
[PATCH] x1 = pop();
[PATCH] nextNode();
[PATCH] value = getNextObject();
[PATCH] mustBeNull();
[PATCH] nextNonNull();
[PATCH] traverseBranch();
[PATCH] nextNonWhitespace();
[PATCH] Builder.reset();
[PATCH] initIterator();
[PATCH] advance();
[PATCH] nextNotNull();
[PATCH] nextIndex();
[PATCH] asPath();
[PATCH] skipValues();
[PATCH] validateState();
[PATCH] skipStack();
[PATCH] readFieldName();
[PATCH] buildPath();
[PATCH] addNull();
