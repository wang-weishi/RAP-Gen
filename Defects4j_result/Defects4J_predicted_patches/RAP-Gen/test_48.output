[PATCH] return getPct(( Comparable<?>)v);
[PATCH] return getCumPct(( Comparable<?>)v);
[PATCH] return getPct(( Comparable)v);
[PATCH] return getCumPct(( Comparable)v);
[PATCH] return(( Comparable<?>)v).getPct();
[PATCH] return getPct(new Comparable<?>(v)));
[PATCH] return getPct(new Comparable<?>(v));
[PATCH] return(Comparable<?>)freqTable.get(v);
[PATCH] return getCumPct(new Comparable<?>(v));
[PATCH] return getCount(new Comparable<?>(v)));
[PATCH] return getCumPct(((Comparable<?>)v);
[PATCH] return getPct(((Comparable<?>)v).value);
[PATCH] return getPct(((Comparable)v).getCount());
[PATCH] return getCount(new Comparable<?>(v));
[PATCH] return getPct(( Class<?>)v);
[PATCH] return(Comparable)freqTable.get(v);
[PATCH] return getCount(new Comparable<?>(v)) * 100;
[PATCH] return getPct(((Comparable<?>)v).getValue());
[PATCH] return getCumPct(( Class<?>)v);
[PATCH] return getCount(new Comparable<?>(v)) - 1;
[PATCH] return(( Comparable<?>)v).getCount();
[PATCH] return(( Comparable<?>)v).pct();
[PATCH] return getFreq(( Comparable<?>)v);
[PATCH] return getPct(new Comparable<? super T>(v));
[PATCH] return getPct(((Comparable<?>)v).percent);
[PATCH] return getPct(((Comparable)v).value);
[PATCH] return getPct(((Comparable)v).getCount();
[PATCH] return getPct(((Comparable)v).toSerial();
[PATCH] return getPct(new Comparable<?>)v;
[PATCH] return getCount(new Comparable<?>(v)) + 1;
[PATCH] return getCumPct(((Comparable<?>)v));
[PATCH] return getFreq(new Comparable<?>(v)));
[PATCH] return getPct(((Comparable)v).toCount();
[PATCH] return getPct(new Comparable<?>(v), true);
[PATCH] return getPct(((Comparable<?>)v).count);
[PATCH] return getPct(((Comparable<?>)v).size();
[PATCH] return getPct(((Comparable)v).toFrequency();
[PATCH] return getCount(new Comparable<?>(v)) / 100;
[PATCH] return(( Comparable<?>)v);
[PATCH] return getPct(new Class<?>(v));
[PATCH] return getPct(( Comparable)v, freqTable);
[PATCH] return getPct(((Comparable)v).getValue());
[PATCH] return getPct(((Comparable<?>)v).values());
[PATCH] return(Comparable<?>)v;
[PATCH] return getPct(((Comparable<?>)v).size());
[PATCH] return getPct(((Comparable)v).getMillis());
[PATCH] return(Double.valueOf(v)).doubleValue();
[PATCH] return getPct(((Comparable<?>)v).pct);
[PATCH] return getPct(( NaturalComparator<?>)v);
[PATCH] return getPct(((Comparable<?>)v).length);
[PATCH] return(( Comparable<?>)v).count();
[PATCH] return getPct(new Comparable<Object>(v));
[PATCH] return getFreq(new Comparable<?>(v));
[PATCH] return getGumPct(( Comparable<?>)v);
[PATCH] return getPct(((Comparable<?>)v);
[PATCH] return Pct.valueOf(( Comparable<?>)v);
[PATCH] return getPct(new Long(v));
[PATCH] return(( Comparable<?>)v)/ freqTable.size();
[PATCH] return CumPct(( Comparable<?>)v);
[PATCH] return(( Comparable<?>)v).toPct();
[PATCH] return pct(( Comparable<?>)v);
[PATCH] returnPct(( Comparable<?>)v);
[PATCH] return getFreq(v, null);
[PATCH] return getSumPct(( Comparable<?>)v);
[PATCH] return getPct(((Comparable<?>)v));
[PATCH] return getCount(new Comparable<?>(v));
[PATCH] return getCount(v, null);
[PATCH] return calculatePct(( Comparable<?>)v);
[PATCH] return getPct(( Class<Comparable>)v);
[PATCH] returnCumPct(( Comparable<?>)v);
[PATCH] return getCount(new Comparable<?>)v;
[PATCH] return cumPct(( Comparable<?>)v);
[PATCH] return getCumPct(new Long(v));
[PATCH] return getPct(new Object[] { v });
[PATCH] return getCount(new Class<?>(v));
[PATCH] return getPct(( Comparable)v, true);
[PATCH] return getCumPct(( Number)v);
[PATCH] return getPct(( Number)v);
[PATCH] return getPct(( Comparable)v, null);
[PATCH] return getCumPct(( Object)v);
[PATCH] return(( Comparable<?>)v).getValue();
[PATCH] return getPct(( Comparable<?>)v;
[PATCH] return getPct(new ClassKey(v));
[PATCH] return(( Comparable<?>)v).Pct();
[PATCH] return getGumPct(( Comparable)v);
[PATCH] return(( Comparable)v).getPct();
[PATCH] return(( Comparable<?>)v).percent();
[PATCH] return getPct(( Comparable<>)v);
[PATCH] return getCumPct(v, null);
[PATCH] return CumPct(( Comparable)v);
[PATCH] return getPct(( Object)v);
[PATCH] return getPct(new Comparable<?>)v);
[PATCH] return getPeriod(( Comparable<?>)v);
[PATCH] return getCount(( Comparable<?>)v);
[PATCH] return getCount(new Long(v));
[PATCH] return calculatePct(( Comparable)v);
[PATCH] return(( Comparable<?>)v).count;
[PATCH] return getPct(( ComparableType)v);
[PATCH] returnCpct(( Comparable<?>)v);
[PATCH] return getFreq(v, true);
