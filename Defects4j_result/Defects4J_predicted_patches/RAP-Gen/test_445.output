[PATCH] maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] typeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] thisTypeNode = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType castedThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType type = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] ObjectType baseType = ObjectType.cast(typeOfThis);
[PATCH] JSType superType = maybeTypeOfThis.getImplicitPrototype();
[PATCH] ObjectType baseType = ObjectType.cast(maybeTypeOfThis);
[PATCH] JSType convertedThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] valueOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType baseType = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] typesOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] maybeTypeOfThis = this.restrictByNotNullOrUndefined();
[PATCH] NodeTraversal.traverse(compiler, maybeTypeOfThis, this);
[PATCH] ObjectType maybeSuperInstanceType = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] newTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType typeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType implementedInterfaces = getImplementedInterfaces();
[PATCH] JSType typedThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] maybeTypeOfThis = typeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType implementedInterfaces = getImplementedInterfaces(typeOfThis);
[PATCH] ObjectType newTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType expectedThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType returnType = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] ObjectType baseType = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType baseType = ObjectType.cast(typeOfThis);
[PATCH] JSType baseType = ObjectType.cast(maybeTypeOfThis);
[PATCH] JSType thisTypeNode = maybeTypeOfThis.autoboxesTo();
[PATCH] JSType rawTypeThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] implementedInterfaces = maybeTypeOfThis.getImplementedInterfaces();
[PATCH] JSType superType = maybeTypeOfThis.getConstructor();
[PATCH] JSType superType = maybeTypeOfThis.autoboxesTo();
[PATCH] thisTypeNode.setJSType(maybeTypeOfThis);
[PATCH] JSType superclass = maybeTypeOfThis.getImplicitPrototype();
[PATCH] currentType = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] thisTypeNode.setJSType(typeOfThis);
[PATCH] JSType maybeSuperInstanceType = maybeTypeOfThis.getImplicitPrototype();
[PATCH] objectType = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] typeOfThis = this.restrictByNotNullOrUndefined(typeOfThis);
[PATCH] JSType implementedInterfaces = maybeResolve(implementedInterfaces, t, scope);
[PATCH] maybeTypeOfThis = super.resolve(t, scope, typeOfThis);
[PATCH] JSType value = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType newThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] JSType super = maybeTypeOfThis.getImplicitPrototype();
[PATCH] registry.registerTypeOfThis(this, maybeTypeOfThis);
[PATCH] ObjectType maybeSuperInstanceType = maybeTypeOfThis.getImplicitPrototype();
[PATCH] super.resolve(t, scope, maybeTypeOfThis);
[PATCH] NodeTraversal.traverse(this, maybeTypeOfThis, this);
[PATCH] JSType maybeSuperInstanceType = maybeTypeOfThis.toObjectType();
[PATCH] JSType convertedThis = maybeTypeOfThis.autoboxesTo();
[PATCH] JSType castedThis = maybeTypeOfThis.autoboxesTo();
[PATCH] boolean implementedInterfaces = maybeTypeOfThis.isInterface();
[PATCH] JSType superType = maybeTypeOfThis.visit(this, t);
[PATCH] JSType implementedInterfaces = maybeGetImplementedInterfaces(typeOfThis);
[PATCH] JSType superInstanceType = maybeTypeOfThis.getImplicitPrototype();
[PATCH] JSType implementedInterfaces = findImplementedInterfaces(typeOfThis);
[PATCH] JSType castedThis = maybeTypeOfThis.visit(this, t);
[PATCH] JSType superType = maybeTypeOfThis.toObjectType().getInstanceType();
[PATCH] JSType thisTypeNode = maybeTypeOfThis.toObjectType();
[PATCH] Preconditions.checkNotNull(typeOfThis);
[PATCH] JSType superThis = maybeTypeOfThis.getImplicitPrototype();
[PATCH] JSType implementedInterfaces = findImplementedInterfaces(typeOfThis, t);
[PATCH] registry.registerTypeThis(this, maybeTypeOfThis);
[PATCH] JSType thisTypeNode = maybeTypeOfThis.getImplicitPrototype();
[PATCH] ObjectType maybeSuperInstanceType = maybeTypeOfThis.toObjectType();
[PATCH] JSType implementedInterfaces = maybeResolveImplementedInterfaces(t, scope);
[PATCH] ObjectType superType = maybeTypeOfThis.getImplicitPrototype();
[PATCH] JSType right = maybeTypeOfThis.restrictByNotNullOrUndefined();
[PATCH] final List<ObjectType> implementedInterfaces = getImplementedInterfaces();
[PATCH] ObjectType baseType = ObjectType.cast(( JSType)typeOfThis);
[PATCH] JSType superType = maybeTypeOfThis.visit(t, scope);
[PATCH] JSType thisTypeNode = maybeTypeOfThis.getRestrictedWithoutUndefined();
[PATCH] JSType implementedInterfaces = maybeGetImplementedInterfaces();
[PATCH] JSType superTypeNode = maybeTypeOfThis.getImplicitPrototype();
[PATCH] JSType thisTypeNode = maybeTypeOfThis.visit(t);
[PATCH] JSType implementedInterfaces = this.getImplementedInterfaces();
[PATCH] JSType superClass = maybeTypeOfThis.getImplicitPrototype();
[PATCH] JSType superType = maybeTypeOfThis.getSuperType();
[PATCH] JSType result = maybeTypeOfThis.visit(this, t);
[PATCH] JSType super = maybeTypeOfThis.getConstructor();
[PATCH] JSType maybeSuperInstanceType = maybeTypeOfThis.getConstructor();
[PATCH] maybeTypeOfThis = this.restrictByNotNullOrUndefined(t);
[PATCH] JSType implementedInterfaces = extractImplementedInterfaces(typeOfThis);
[PATCH] JSType superType = maybeTypeOfThis.toObjectType();
[PATCH] JSType baseType = typeOfThis.restrictByNotNullOrUndefined();
[PATCH] visitThis(t, scope, maybeTypeOfThis);
[PATCH] JSType thisTypeNode = maybeTypeOfThis.getRestrictedWithoutNull();
[PATCH] typeOfThis = this.restrictByNotNullOrUndefined();
[PATCH] JSType superType = maybeTypeOfThis.visit(t);
[PATCH] JSType superType = maybeTypeOfThis.getSubTypes(registry);
[PATCH] JSType superType = maybeTypeOfThis.toObjectType().getConstructor();
[PATCH] n.setJSType(typeOfThis);
[PATCH] Preconditions.checkNotNull(maybeTypeOfThis);
[PATCH] JSType implementedInterfaces = registry.getImplementedInterfaces();
[PATCH] thisTypeNode = scope.getTypeOfThis();
[PATCH] e.setJSType(typeOfThis);
[PATCH] getImplementedInterfaces().add(typeOfThis);
);
;
*/
