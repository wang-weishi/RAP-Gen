[PATCH] currEntry = new TarArchiveEntry(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, false);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, true);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 0);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, blockSize);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, headerBuf.length);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuf);
[PATCH] currEntry = new TarArchiveEntry(readTarBuffer(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, null);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, skipBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 1);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, this);
[PATCH] currEntry = TarArchiveEntry.fromTarBytes(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf,!hasHitEOF);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, currEntry.getName());
[PATCH] currEntry = new TarArchiveEntry(readBuf, headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, headerBuf);
[PATCH] currEntry = new TarArchiveEntry(readTarHeader(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 0, 1);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuf, false);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, headerBuf[0]);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, this.skipBuf);
[PATCH] currEntry = new TarArchiveEntry(parseTarHeader(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(rewind(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.getChunkSize());
[PATCH] currEntry = new TarArchiveEntry(readBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, flags);
[PATCH] currEntry = new TarArchiveEntry(TarBuffer.getValue(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuf, 0);
[PATCH] currEntry = new TarArchiveEntry(rewind(headerBuf)));
[PATCH] currEntry = new TarArchiveEntry(new String(headerBuf), true);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuffer);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 8);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, READ_SIZE);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.getBlockSize());
[PATCH] currEntry = new TarArchiveEntry(( TarBuffer)headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.getSize());
[PATCH] currEntry = new TarArchiveEntry(entrySize, headerBuf);
[PATCH] currEntry = new TarArchiveEntry(readTarStream(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuf, true);
[PATCH] currEntry = TarArchiveEntry.parseTarHeader(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(getTarBuffer(), headerBuf);
[PATCH] currEntry = new TarArchiveEntry(entryOffset, entrySize);
[PATCH] currEntry = new TarArchiveEntry(buffer.readRecord(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(( byte[])headerBuf, false);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, size);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.toByteArray());
[PATCH] currEntry = new TarArchiveEntry(( byte[])headerBuf, 0);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, & 0x03);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.read());
[PATCH] currEntry = new TarArchiveEntry(headerBuf[0]);
[PATCH] currEntry = new TarArchiveEntry(new String(headerBuf), buffer);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, numRead);
[PATCH] currEntry = new TarArchiveEntry(( byte[])headerBuf, true);
[PATCH] currEntry = parseTarHeader(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(( byte[])headerBuf);
[PATCH] currEntry = new TarArchiveEntry(( TarBuffer)headerBuf, false);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.position);
[PATCH] currEntry = TarArchiveEntry.parse(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(decodeTarHeader(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(readShort(headerBuf)));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 2);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, this.buffer);
[PATCH] currEntry = new TarArchiveEntry(headerBuf.length);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuf, blockSize);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.isCompressed());
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuffer());
[PATCH] currEntry = new TarArchiveEntry(headerBuf.length, headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, getRecordSize());
[PATCH] currEntry = new TarArchiveEntry(( TarBuffer)headerBuf, true);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, getTarBuffer());
[PATCH] currEntry = new TarArchiveEntry(headerBuf, readBuf.length);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, blockSize - 1);
[PATCH] currEntry = new TarArchiveEntry(buffer, headerBuf);
[PATCH] currEntry = new TarArchiveEntry(readTarBuffer(headerBuf)));
[PATCH] currEntry = createTarEntry(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(readTarInputStream(headerBuf));
[PATCH] currEntry = new TarArchiveEntry(headerBuf, offset, length);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, getCompressedSize());
[PATCH] currEntry = new TarArchiveEntry(headerBuf, isSkip);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, length);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.getLength());
[PATCH] currEntry = TarArchiveEntry.fromTarBuffer(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.readShort());
[PATCH] currEntry = new TarArchiveEntry(headerBuf, ctxt);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.readLen);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, buffer.size);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, currentSize);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 0, -1);
[PATCH] currEntry = createTarArchiveEntry(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, 0.0);
[PATCH] currEntry = new TarArchiveEntry(new String(headerBuf), false);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, _skipBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf).getHeader();
[PATCH] currEntry = new TarArchiveEntry(headerBuf, offset, size);
[PATCH] currEntry = parseTarArchiveEntry(headerBuf);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, _currentSegment);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, SHIFT);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, mode);
[PATCH] currEntry = new TarArchiveEntry(headerBuf, EOF);
