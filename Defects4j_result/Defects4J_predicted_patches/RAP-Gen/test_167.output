[PATCH] Context rhsContext = Context.OTHER;
[PATCH] Context rhsContext = getContextForNoFail(context);
[PATCH] Context rhsContext = context.OTHER;
[PATCH] Context rhsContext = getContextForNonEmptyExpr(context);
[PATCH] Context rhsContext = getContextForNonEmptyExpression(context);
[PATCH] Context rhsContext = getContextForNonEmptyExpressions(context);
[PATCH] Context rhsContext = getContextForNoArg(context);
[PATCH] context rhsContext = Context.OTHER;
[PATCH] Context rhsContext = getContextForNoFail();
[PATCH] Context rhsContext = getContextForNoFail(type);
[PATCH] Context rhsContext = getContextForNoFail(p);
[PATCH] Context rhsContext = Context.STATEMENT;
[PATCH] Context rhsContext = getContextForNoPass(context);
[PATCH] Context rhsContext = getContext(context);
[PATCH] Context rhsContext = getContextForNoExpr(context);
[PATCH] Context rhsContext = getContextForNoThrow(context);
[PATCH] Context rhsContext = getContextForNoArgs(context);
[PATCH] Context rhsContext = Context.INTERNAL;
[PATCH] Context rhsContext = Context.NONE;
[PATCH] Context rhsContext = getContextForNoEqual(context);
[PATCH] Context rhsContext = context.RANGE_BLOCK;
[PATCH] Context rhsContext = getContextForAddingChildren(context);
[PATCH] Context rhsContext = Context.Opcodes.RETURN;
[PATCH] Context rhsContext = getContextForNonEmptyStatements(context);
[PATCH] Context rhsContext = getContextForNoPg(context);
[PATCH] Context rhsContext = Context.ALL;
[PATCH] Context rhsContext = Context.FOR;
[PATCH] Context rhsContext = Context.UNINITIALIZED;
[PATCH] Context rhsContext = getContextForNoSuccess(context);
[PATCH] Context rhsContext = Context.OF_STATEMENT;
[PATCH] Context rhsContext = getContextForNoMatch(context);
[PATCH] Context rhsContext = getContextForNoAgain(context);
[PATCH] Context rhsContext = Context.LOCAL;
[PATCH] Context rhsContext = getContext(context, p);
[PATCH] Context rhsContext = getContextForNothing(context);
[PATCH] Context rhsContext = getContextForReading(context);
[PATCH] Context rhsContext = Context.IN_STATEMENT;
[PATCH] Context rhsContext = Context.USE_DEFAULT;
[PATCH] Context rhsContext = Context.STATEMENT;
[PATCH] Context rhsContext = context.RValue();
[PATCH] Context rhsContext = Context.SIGNAL;
[PATCH] Context rhsContext = Context.SIGNAL_BLOCK;
[PATCH] Context rhsContext = context.getRootContext();
[PATCH] Context rhsContext = Context.DEFAULT;
[PATCH] Context rhsContext = getContextForNoReturn();
[PATCH] Context rhsContext = context.rhsContext;
[PATCH] Context rhsContext = context == Context.OTHER;
[PATCH] Context rhsContext = Context.NORMAL;
[PATCH] Context rhsContext = Context.INITIALIZER;
[PATCH] Context rhsContext = Context.ON_BLOCK;
[PATCH] Context rhsContext = Context.INIT_BLOCK;
[PATCH] Context rhsContext = getContextForReading(n);
[PATCH] Context rhsContext = getContextForNoFail(value);
[PATCH] Context rhsContext = getContextForNoFail(n);
[PATCH] Context rhsContext = NodeUtil.contextFor(context);
[PATCH] Context rhsContext = getContext(context, true);
[PATCH] Context rhsContext = context.other;
[PATCH] Context rhsContext = Context.other;
[PATCH] Context rhsContext = Context.CURRENT;
[PATCH] Context rhsContext = Context.READ_ONLY;
[PATCH] Context rhsContext = Context.TARGET;
[PATCH] Context rhsContext = contexts[p - 1];
[PATCH] Context rhsContext = Context.WHOLE;
[PATCH] Context rhsContext = Context.Other;
[PATCH] Context rhsContext = Context.OTHER;
[PATCH] Context rhsContext = getContext(context, false);
[PATCH] Context rhsContext = Context.ON_STATEMENT;
[PATCH] Context rhsContext = getContextForNoReturn(context);
[PATCH] Context rhsContext = Context.INIT_STATEMENT;
[PATCH] Context rhsContext = Context.STROKE;
[PATCH] Context rhsContext = Context.INITIAL;
[PATCH] Context rhsContext = Context.NEW;
[PATCH] Context rhsContext = getContextForAddingExpr(first);
[PATCH] Context rhsContext = Context.SIGNAL_STATEMENT;
[PATCH] Context rhsContext = Context.OF_EXPR;
[PATCH] Context rhsContext = getContextForNoZero(context);
[PATCH] Context rhsContext = Context.DIRECT;
[PATCH] Context rhsContext = Context.UNKNOWN;
[PATCH] Context rhsContext = CONTEXT.OTHER;
[PATCH] Context rhsContext = Context.CENTER;
[PATCH] Context rhsContext = getContext();
[PATCH] Context rhsContext = getContextForNonEmptyExpression(n);
[PATCH] Context rhsContext = getContextForNonEmptyExpr(first);
[PATCH] Context rhsContext = Context.OPTIONAL;
[PATCH] Context rhsContext = context.RVContext;
[PATCH] Context rhsContext = Context.INIT_ERROR;
[PATCH] Context rhsContext = Context.BLOCK;
[PATCH] Context rhsContext = getContext(context, null);
[PATCH] Context rhsContext = Context.ON_TRUE;
[PATCH] Context rhsContext = Context. OTHER;
[PATCH] Context rhsContext = Node.OTHER;
[PATCH] Context rhsContext = this.context;
[PATCH] Context rhsContext = Context.OF_BLOCK;
[PATCH] Context rhsContext = Context.THREAD;
[PATCH] Contexts rhsContext = Context.OTHER;
[PATCH] Context rhsContext = Context.ELEMENT;
[PATCH] Context rhsContext = context.context;
[PATCH] ContextFactory rhsContext = Context.OTHER;
[PATCH] Context rhsContext = Contexts.OTHER;
[PATCH] Context rhsContext = Context.CUSTOM;
