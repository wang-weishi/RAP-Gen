[PATCH] typeAdapter = typeAdapter.withTypeSetter(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeFactory(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeProperty(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.narrowBy(fieldType);
[PATCH] typeAdapter = typeAdapter.getTypeFactory();
[PATCH] typeAdapter = typeAdapter.withTypeHandler(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withClass(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeAdapters(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.intern();
[PATCH] typeAdapter = typeAdapter.withTypeBind(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeDeserializer(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypePrototype(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.notNullSafe();
[PATCH] typeAdapter = typeAdapter.withTypeResolver(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeOverride(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.narrowBy(value);
[PATCH] typeAdapter = typeAdapter.withTypeRegistry(gson);
[PATCH] typeAdapter = typeAdapter.getAnnotation(TypeAdapter.class);
[PATCH] typeAdapter = typeAdapter.withStaticTyping(annotation);
[PATCH] typeAdapter = typeAdapter.withTypeSetter(typeAdapterFactory);
[PATCH] typeAdapter = typeAdapter.withTypeBound(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.createUsingDefault();
[PATCH] typeAdapter = typeAdapter.withTypeBindings(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withCreator(gson);
[PATCH] typeAdapter = typeAdapter.getTypeAdapter();
[PATCH] typeAdapter = super.getTypeAdapter(annotation);
[PATCH] typeAdapter = super.getTypeAdapter(annotation, typeAdapter);
[PATCH] typeAdapter = value.narrowBy(typeAdapter);
[PATCH] typeAdapter = typeAdapter.withTypeListener(this);
[PATCH] typeAdapter = typeAdapter.withTypeBinding(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeDefault(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypePrefix(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.nonNullSafe();
[PATCH] typeAdapter = typeAdapter.getAnnotation(JsonAdapter.class);
[PATCH] typeAdapter = typeAdapter.withTypeInterceptor(annotation);
[PATCH] typeAdapter = typeAdapter.withConstructor(gson);
[PATCH] typeAdapter = converter.withTypeAdapter(typeAdapter);
[PATCH] typeAdapter = typeAdapter.converterInstance(gson, fieldType);
[PATCH] typeAdapter = typeAdapter.withTypeConverters(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.switchTo(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.getFactory();
[PATCH] typeAdapter = typeAdapter.annotationType().getTypeAdapter();
[PATCH] typeAdapter = TypeAdapter.narrowBy(typeAdapter);
[PATCH] typeAdapter = typeAdapter.withTypeProvider(typeAdapterClass);
[PATCH] typeAdapter = typeAdapter.withTypeHandler(this);
[PATCH] typeAdapter = typeAdapter.unionWith(annotation);
[PATCH] typeAdapter = typeAdapter.converterInstance(gson);
[PATCH] typeAdapter = typeAdapter.withFactory(gson);
[PATCH] typeAdapter = typeAdapter.withTypeBind(gson);
[PATCH] typeAdapter = typeAdapter.getTypeHandler();
[PATCH] typeAdapter = typeAdapter.orInstance(gson, fieldType);
[PATCH] typeAdapter = typeAdapter.allowUnknownType();
[PATCH] typeAdapter = typeAdapter.select(TypeAdapter.class);
[PATCH] typeAdapter = converter.resolve(typeAdapter);
[PATCH] typeAdapter = typeAdapter.select(this);
[PATCH] typeAdapter = converter.map(typeAdapter);
[PATCH] typeAdapter = typeAdapter.withTypeConverters(typeAdapterFactory);
[PATCH] typeAdapter = typeAdapter.wrapperInstance(gson, fieldType);
[PATCH] typeAdapter = typeAdapter.getConstructor();
[PATCH] typeAdapter = this.annotation.resolve(typeAdapter);
[PATCH] typeAdapter = typeAdapter.autoboxesTo();
[PATCH] typeAdapter = typeAdapter.getAbstractTypeAdapter();
[PATCH] typeAdapter = typeAdapter.withTypeResolver(typeAdapterFactory);
[PATCH] typeAdapter = typeAdapter.orInstance(gson);
[PATCH] typeAdapter = typeAdapter.wrapWithTypeParameters();
[PATCH] typeAdapter = typeAdapter.wrap();
[PATCH] typeAdapter = typeAdapter.withConverters(gson);
[PATCH] typeAdapter = typeAdapter.withValueInstantiator(gson);
[PATCH] typeAdapter = typeAdapter.withTypeInAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.withTypeChanged();
[PATCH] typeAdapter = typeAdapter.withTypeBind(this);
[PATCH] typeAdapter = checkTypeAdapter(typeAdapter, fieldType);
[PATCH] typeAdapter = typeAdapter.narrowBy(deserializers);
[PATCH] typeAdapter = checkTypeAdapter(typeAdapter);
[PATCH] typeAdapter = typeAdapter.notNull();
[PATCH] typeAdapter = typeAdapter.withValueInstantiator(annotation);
[PATCH] typeAdapter = typeAdapter.withTypeHandler(typeAdapterFactory);
[PATCH] typeAdapter = typeAdapter.createWithTypeParameters();
[PATCH] typeAdapter = typeAdapter.withDeserializer(deserializer);
[PATCH] typeAdapter = value.getTypeAdapter();
[PATCH] typeAdapter = converter.converterInstance(typeAdapter);
[PATCH] typeAdapter = typeAdapter.maybeCreateUsingDefault();
[PATCH] typeAdapter = typeAdapter.asTypeAdapter();
[PATCH] typeAdapter = typeAdapter.resolve(gson);
[PATCH] typeAdapter = typeAdapter.withMethod(annotation);
[PATCH] typeAdapter = typeAdapter.withTypeConverters(typeAdapter);
[PATCH] typeAdapter = typeAdapter.withTypeBound(typeAdapterFactory);
[PATCH] typeAdapter = typeAdapter.wrapperInstance(gson);
[PATCH] typeAdapter = typeAdapter.unwrappingInstance(gson);
[PATCH] typeAdapter = typeAdapter.narrowBy(annotation);
[PATCH] typeAdapter = typeAdapter.anyTypeAdapter();
[PATCH] typeAdapter = converter.configure(typeAdapter);
[PATCH] typeAdapter = typeAdapter.getAnnotation(annotation);
[PATCH] typeAdapter = typeAdapter.withConstructor(annotation);
[PATCH] typeAdapter = typeAdapter.narrowBy(1);
[PATCH] typeAdapter = typeAdapter.withConstructor(fieldType);
[PATCH] typeAdapter = typeAdapter.withoutNull();
[PATCH] typeAdapter = typeAdapter.withTypeBind(fieldType);
[PATCH] typeAdapter = typeAdapter.wrapWithTypeParameters(fieldType);
[PATCH] typeAdapter = wrapWithArray(typeAdapter);
