[PATCH] pos.setErrorIndex(startIndex);
[PATCH] getImaginaryCharacter().reset();
[PATCH] parseAndIgnoreWhitespace(source, pos);
[PATCH] getImaginaryCharacter().charAt(endIndex);
[PATCH] pos.setIndex(initialIndex);
[PATCH] pos.getErrorIndex(startIndex);
[PATCH] parseNextCharacter(source, pos);
[PATCH] pos.resetWithIndex(startIndex);
[PATCH] pos.setErrorIndex(endIndex);
[PATCH] pos.clearErrorIndex();
[PATCH] getImaginaryCharacter().setLength(endIndex);
[PATCH] pos.reset();
[PATCH] Preconditions.checkState(endIndex < n);
[PATCH] pos.clearIndex();
[PATCH] pos.clearErrorIndex(startIndex);
[PATCH] getImaginaryCharacter().next();
[PATCH] getImaginaryCharacter().trim();
[PATCH] pos.resetWithIndex(initialIndex);
[PATCH] re = parseAndIgnoreWhitespace(source, pos);
[PATCH] char c = getImaginaryCharacter();
[PATCH] parseNegativeImaginary(source, pos);
[PATCH] getImaginaryCharacter().setIndex(endIndex);
[PATCH] checkNegativeImaginary(re, imaginaryCharacter);
[PATCH] pos.next();
[PATCH] pos.validateRange(startIndex, endIndex);
[PATCH] checkNextCharacter(source, pos);
[PATCH] pos.setErrorIndex(initialIndex);
[PATCH] pos.removeErrorIndex(startIndex);
[PATCH] pos.setIndex(endIndex);
[PATCH] re = parse(source, pos);
[PATCH] parseImaginaryCharacter(source, pos);
[PATCH] pos.validate(startIndex, endIndex);
[PATCH] re.doubleValue() = getImaginaryCharacter();
[PATCH] parseUnsignedShort(source, pos);
[PATCH] re.add(getImaginaryCharacter());
[PATCH] pos.errorIndex(startIndex);
[PATCH] getImaginaryCharacter().charAt(startIndex);
[PATCH] getImaginaryCharacter().clear();
[PATCH] addNegativeCharacter(getImaginaryCharacter());
[PATCH] pos.resetWithIndex(endIndex);
[PATCH] getImaginaryCharacter().length();
[PATCH] checkNegativeImaginary(startIndex, endIndex);
[PATCH] getImaginaryCharacter().toLowerCase(this);
[PATCH] checkImaginaryCharacter(source, pos);
[PATCH] pos.addErrorIndex(startIndex);
[PATCH] checkNextCharacter(getImaginaryCharacter());
[PATCH] n = getImaginaryCharacter().length();
[PATCH] getImaginaryCharacter().toLowerCase(pos);
[PATCH] cur.setErrorIndex(startIndex);
[PATCH] getImaginaryCharacter().consume(endIndex);
[PATCH] checkSign(getImaginaryCharacter(), pos);
[PATCH] parseNegatedCharacter(source, pos);
[PATCH] pos.seterrorIndex(startIndex);
[PATCH] getImaginaryCharacter().lastIndexOf(c);
[PATCH] getImaginaryCharacter().lastIndexOf('.');
[PATCH] imaginaryCharacter = getImaginaryCharacter();
[PATCH] checkSign(startIndex, endIndex);
[PATCH] c = getImaginaryCharacter();
[PATCH] pos.setIndex(startIndex);
[PATCH] checkState(endIndex < n);
[PATCH] checkNegativeImaginary(endIndex, n);
[PATCH] checkNegativeImaginary(n);
[PATCH] getImaginaryCharacter().consume(startIndex);
[PATCH] getImaginaryCharacter().chompTo(re);
[PATCH] getImaginaryCharacter().lastChar();
[PATCH] checkNegativeImaginary(source, pos);
[PATCH] addToString(getImaginaryCharacter());
[PATCH] getImaginaryCharacter().setLength(startIndex);
[PATCH] pos.resetTo(startIndex);
[PATCH] checkNegativeImaginary(n, imaginaryCharacter);
[PATCH] pos.validateIndex(endIndex);
[PATCH] pos.limit(endIndex, 0);
[PATCH] pos.setEndIndex(endIndex);
[PATCH] re = new Complex(re, im);
[PATCH] getImaginaryCharacter().chompTo(pos);
[PATCH] checkLastChar(source, pos);
[PATCH] checkParser(source, pos);
[PATCH] checkIndex(endIndex);
[PATCH] String c = getImaginaryCharacter();
[PATCH] getImaginaryCharacter().reverse(pos);
[PATCH] getImaginaryCharacter().toLowerCase(true);
[PATCH] checkNegativeImaginary(n, false);
[PATCH] setErrorIndex(startIndex);
[PATCH] parseSign(source, pos);
[PATCH] pos.clear();
[PATCH] getImaginaryCharacter().inc();
[PATCH] checkLength(endIndex);
[PATCH] getImaginaryCharacter();
[PATCH] checkLenient();
[PATCH] pos.nextToken();
[PATCH] re.reset();
[PATCH] re.clear();
[PATCH] re.trim();
[PATCH] checkFormat();
[PATCH] checkSign();

);
;
*/
());
