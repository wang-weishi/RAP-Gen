[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharacterUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharMatcherUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharTypes.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharsUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return cs1.regionMatches(cs2, false, 0, cs1, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.min(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharTypes.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return Character.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringBufferUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return charUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, null, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharacterUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return Chars.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] returnCharUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharacterUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharSequenceUtils.regionMatches( cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringBuilderUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharMatcherUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return ArrayUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.min(cs1.length() - cs2.length(), 0));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, null, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return BitSetUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharsUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] returnCharMatcherUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharsetUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.min(cs1.length(), cs2.length()));
[PATCH] return CharMatcherUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharacterUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharacterMatcherUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharStreams.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringBufferUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return BigDecimalUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return charUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharsUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length()), null);
[PATCH] return StringUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return cs1.regionMatches(cs2, false, 0, cs1, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharArrays.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches(cs1, false, 0, cs2, 0, Math.min(cs1.length(), cs2.length()));
[PATCH] return Character.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Integer.max(cs1.length(), cs2.length()));
[PATCH] return StringBuilderUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return Character.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringBufferUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return Chars.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharArrayUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, false, 0, cs2, 0, Math.min(cs1.length(), cs2.length()));
[PATCH] returnCharUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharacterUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return charUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharTypes.regionMatches(cs1, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches( cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] returnCharTypes.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, null, 0, cs2, 0, Math.min(cs1.length(), cs2.length()));
[PATCH] returnCharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return cs1.regionMatches(cs2, false, 0, null, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharNames.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharMatchUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return StringUtils.regionMatches(cs1, null, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return csUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return Charps.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, null, 0, Math.max(cs1.length() - cs2.length(), 0));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, ts2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharStreamUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches( cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharFilter.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] returnCharsUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CHARS.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length() - cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, null, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharTypes.regionMatches(cs1, false, 0, null, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return charTypes.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharSequenceUtils.regionMatches(cs1, true, 0, null, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtilities.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return Characters.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return ArrayUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
[PATCH] return CharUtils.regionMatches(cs1, false, 0, null, 0, Math.max(cs1.length(), cs2.length()));
