[PATCH] t = _fixAccess(t);
[PATCH] t = _skipWS(t);
[PATCH] _readAndBind(t, ctxt);
[PATCH] _handleTypePropertyValue(t, ctxt);
[PATCH] _checkAndFixAccess(t, ctxt);
[PATCH] t = _handleTypePropertyValue(ctxt, t);
[PATCH] t = _addTypeMapping(t, ctxt);
[PATCH] _deserializeAndSet(t, ctxt);
[PATCH] t = _handleTypePropertyValue(t, ctxt);
[PATCH] t = _decodeWellDefinedTypes(t);
[PATCH] t = _typeFactory.constructType(t);
[PATCH] t = _addReference(t, ctxt);
[PATCH] _readAndResolveTypes(t, ctxt);
[PATCH] t = _resolveType(t, ctxt);
[PATCH] _maybeAddAutoboxes(t, ctxt);
[PATCH] t = _deserialize(t, ctxt);
[PATCH] _checkAndFixAccess(t, id);
[PATCH] _addTypeMapping(t, ctxt);
[PATCH] t = _checkAndFixAccess(t);
[PATCH] t = _decodeXmlTypeName(t);
[PATCH] t = t.getRawClass();
[PATCH] t = _fillInAnnotations(t, ctxt);
[PATCH] t = _deserialize(ctxt, t);
[PATCH] _typeRegistry.registerType(t, ctxt);
[PATCH] t = _maybeAddReference(t, ctxt);
[PATCH] _decodeXmlTypeName(t, ctxt);
[PATCH] t = _addBeanProps(t, ctxt);
[PATCH] _readAndResolve(t, ctxt);
[PATCH] t = _fixTypeBindings(t);
[PATCH] t = _resolveTypeParameters(t, ctxt);
[PATCH] t = _maybeResolveType(t, ctxt);
[PATCH] t = _typeFactory.resolveType(t);
[PATCH] t = _expandTypeParameters(t, ctxt);
[PATCH] _readType(t, ctxt);
[PATCH] _addDeserializer(t, ctxt);
[PATCH] _addBeanProps(t, ctxt);
[PATCH] _readAndResolveType(t, ctxt);
[PATCH] _fillInAnnotations(t, ctxt);
[PATCH] id = t.getSimpleName();
[PATCH] t = _addTypeParameters(t, ctxt);
[PATCH] _assignToRoot(t, ctxt);
[PATCH] t = _fillInAnnotations(ctxt, t);
[PATCH] t.setIndex(0);
[PATCH] t = _maybeFixAccess(t, ctxt);
[PATCH] t = _decompose(t, ctxt);
[PATCH] _verifyValueInstantiator(t, ctxt);
[PATCH] t = _fixUnresolvedTypes(t);
[PATCH] t = _reclassify(t, ctxt);
[PATCH] t = _decodeWellDefinedType(t);
[PATCH] t = _typeFactory.findType(t);
[PATCH] _checkAndFixAccess(t);
[PATCH] t = _fixAccess(t, ctxt);
[PATCH] t = _expandType(t, ctxt);
[PATCH] id = t.getRawClass().getName();
[PATCH] _typeMapping(t, ctxt);
[PATCH] _validateAndFixAccess(t, ctxt);
[PATCH] _typeRegistry.resolveType(t, ctxt);
[PATCH] t = _decodeBaseType(t);
[PATCH] _startType(t, ctxt);
[PATCH] t = _decode(t, ctxt);
[PATCH] t = _fixTypeBindings(t, ctxt);
[PATCH] t = _addTypeProperties(t, ctxt);
[PATCH] t = _addReference(t, id);
[PATCH] _addTypeToRoot(t, t);
[PATCH] t = _decodeXmlTypeName(t, ctxt);
[PATCH] t = _fillInFieldType(t, id);
[PATCH] t = _reclassify(t);
[PATCH] _property(t,"type", t);
[PATCH] t = _fixUnders(t);
[PATCH] throw ctxt.weirdKeyException("");
[PATCH] t = _fillInBounds(t, id);
[PATCH] t = _addTypeProperties(t);
[PATCH] t = _skipWS(t, ctxt);
[PATCH] t.setInternalName(id);
[PATCH] t = _property(t, id);
[PATCH] t = _decodeType(t);
[PATCH] t = _translate(t, ctxt);
[PATCH] t = _skipSpace(t);
[PATCH] id = id.substring(1);
[PATCH] _readClass(t, ctxt);
[PATCH] t = _fixTypes(t);
[PATCH] t = _maybeFixAccess(t);
[PATCH] _addReference(t, ctxt);
[PATCH] _addTypeToRoot(t, id);
[PATCH] t = _skipWS(t, id);
[PATCH] t = _resolveType(t);
[PATCH] _typeMap.put(t, id);
[PATCH] t = _skipWSOrEnd(t);
[PATCH] t = _fillInFieldType(t, ctxt);
[PATCH] t = _expandType(t, id);
[PATCH] t.setPrimitive(false);
[PATCH] t = _expandTypeParameters(t, id);
[PATCH] _verifyValueInstantiator(ctxt, t);
[PATCH] t.setReferenceName(id);
[PATCH] _addTypeName(t, id);
[PATCH] _validate(t, id);
[PATCH] _addTypeToRoot(t, ctxt);
[PATCH] _typeRegistry.resolveType(t);
[PATCH] _addType(t, ctxt);
[PATCH] _typeRegistry.resolveType(t, id);
