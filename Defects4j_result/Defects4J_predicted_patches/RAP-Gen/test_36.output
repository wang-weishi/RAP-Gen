[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx); break; case REGULA_FALSI: f0 *= f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 - fx; break; case REGULA_FALSI: f0 *= f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx); break; case REGULA_FALSI: f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 - fx; break; case REGULA_FALSI: f0 = f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx); break; case REGULA_FALSI: f0 = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 2.0; break;
[PATCH] case REGULA_FALSI: f0 = f1 - fx; break; case REGULA_FALSI: f0 = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 * = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 - fx; break; case REGULA_FALSI: f0 * = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 * = f1 - fx; break; case REGULA_FALSI: f0 *= f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx); break; case REGULA_FALSI: f0 = f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 - fx; break; case REGULA_FALSI: f0 = f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx * 2.0); break;
[PATCH] case REGULA_FALSI: f0 *= f1 - fx; break; case REGULA_FALSI: f0 = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 - fx; break; case REGULA_FALSI: f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1; break; case REGULA_FALSI: f0 = f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx); break; case REGULA_FALSI: f0 *= f1 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 - fx; break;
[PATCH] case REGULA_FALSI: f0 = f1; break; case REGULA_FALSI: f0 = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx); break; case REGULA_FALSI: f0 /=(f1 - fy); break;
[PATCH] case REGULA_FALSI: f0 = 1.0 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx); break; case REGULA_FALSI : f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx); break; case REGULA_FALSI: f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx * 2.0); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx); break; case REGULA_FALSI: f0 *= f1 /(f1 - fy); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx); break; case REGULA_FALSI: return 0.5;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx); break; case REGULA_PASSED: f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx)* 2.0; break;
[PATCH] case REGULA_FALSI: f0 = f1 *(f1 - fx); break; case REGULA_FALSI: f0 /=(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx + 2.0); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx * rtol); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 10.0; break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 1.0; break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx * 3); break;
[PATCH] case REGULA_FALSI: f0 *= g1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 3.0; break;
[PATCH] case REGULA_FALSI: f0 *= 1.0 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 0.5; break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx)* 2.0; break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx + 1); break;
[PATCH] case REGULA_FALSI: f0 *= r1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 100.0; break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 + fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 *(f1 - fx)* 2.0; break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx * 2.0); break;
[PATCH] case REGULA_FALSI: f0 = f1 - fx; break;
[PATCH] case REGULA_FALSI : f0 *= f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx + 2.0); break;
[PATCH] case REGULA_FALSI: f0 *= w1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx)* 10.0; break;
[PATCH] case REGULA_FALSI: f0 = 0.5 *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *=(f1 - fx)* 2.0; break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 * fx); break;
[PATCH] case REGULA_FALSI: f0 * = f1 - fx; break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* rtol; break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx * 3); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 2; break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx + 1.0); break;
[PATCH] case REGULA_FALSI: f0 = f1 *(f1 - fx + 2.0); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 -fx); break;
[PATCH] case REGULA_FALSI: f0 * = 1.0 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= Math.abs(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 /(f1 - fx * rtol); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx; break;
[PATCH] case REGULA_FALSI: f0 -= Math.abs(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 * fx /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(f1 - fx + 2); break;
[PATCH] case REGULA_FALSI: f0 = Math.abs(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 +=(f1 - fx)* 2.0; break;
[PATCH] case REGULA_FALSI: f0 *= g *(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 = f1 *(f1 + fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1/(f1 - fx); break;
[PATCH] case REGULA_FALSI : f0 = f1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* 3; break;
[PATCH] case REGULA_FALSI: f0 *= fn1 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* delta; break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)/(f1 - sig); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(max - fx); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* p; break;
[PATCH] case REGULA_FALSI: f0 = 1.0 - fx; break;
[PATCH] case REGULA_FALSI: f0 /(f1 - fx); break;
[PATCH] case REGULA_FALSI: f0 *= f1 /(max - min); break;
[PATCH] case REGULA_FALSI: f0 /=(f1 - fx)* max; break;
[PATCH] case REGULA_FALSI: f0 = f1 * fx; break;
[PATCH] case REGULA_FALSI: f0 = f1; break;
[PATCH] case REGULA_FALSI: f0 *= f1; break;
[PATCH] case REGULA_FALSI: f0 *= p; break;
[PATCH] case REGULA_FALSI: break;
[PATCH] default: throw new IllegalArgumentException("");
[PATCH] default: throw new RuntimeException("");
[PATCH] default: throw new IllegalStateException("");
[PATCH] default: break;
[PATCH] negate();
;
);
