[PATCH] m.appendReplacement(accum, c);
[PATCH] m.appendReplacements(accum, c);
[PATCH] m.append(accum, c);
[PATCH] accum.append(c);
[PATCH] m.replaceReplacement(accum, c);
[PATCH] m.appendReplacement(accum, c);
[PATCH] m.appendReplacement(accum,c);
[PATCH] m.setReplacement(accum, c);
[PATCH] m.appendReplace(accum, c);
[PATCH] m.append replacement(accum, c);
[PATCH] m.prependReplacement(accum, c);
[PATCH] m.appendreplacement(accum, c);
[PATCH] m.appendLiteral(accum, c);
[PATCH] accum.appendReplacement(c);
[PATCH] accum.appendReplacement(c, c);
[PATCH] m.replace(accum, c);
[PATCH] m.replaceWith(accum, c);
[PATCH] accum.append(( char)c);
[PATCH] accum.append("\\u" + c);
[PATCH] m.appendWithReplacement(accum, c);
[PATCH] m.addReplacement(accum, c);
[PATCH] m.appendToReplacement(accum, c);
[PATCH] m.append1(accum, c);
[PATCH] m.appendStringReplacement(accum, c);
[PATCH] m.appendreplace(accum, c);
[PATCH] m.appendDeclaration(accum, c);
[PATCH] m.appendLineBreak(accum, c);
[PATCH] m.appendTo(accum, c);
[PATCH] m.appendLeft(accum, c);
[PATCH] m.appendWithChar(accum, c);
[PATCH] m.appendArgument(accum, c);
[PATCH] m.appendToFront(accum, c);
[PATCH] m.setChar(accum, c);
[PATCH] m.appendPrefix(accum, c);
[PATCH] accum.setCharAt(0, c);
[PATCH] m.appendReplacementTo(accum, c);
[PATCH] m.append("\\u" + c);
[PATCH] m.replaceAll(accum, c);
[PATCH] m.appendReplacement(acc um, c);
[PATCH] m.appendReplacement(accum, s);
[PATCH] m.appendEndsWith(accum, c);
[PATCH] m.appendFirst(accum, c);
[PATCH] m.appendReplacement(accum, ch);
[PATCH] m.appendMatcher(accum, c);
[PATCH] m.appendInto(accum, c);
[PATCH] m.replaceChild(accum, c);
[PATCH] m.append Replace(accum, c);
[PATCH] m.appendUsing(accum, c);
[PATCH] m.appendStartingWith(accum, c);
[PATCH] m.appendObject(accum, c);
[PATCH] m.appendAll(accum, c);
[PATCH] m.appendAssignment(accum, c);
[PATCH] m.appendCharReplacement(accum, c);
[PATCH] m.insert(0, c);
[PATCH] m.getReplacement(accum, c);
[PATCH] m.appendStarting(accum, c);
[PATCH] m.appendStart(accum, c);
[PATCH] m. appendReplacement(accum, c);
[PATCH] m.appendText(accum, c);
[PATCH] m.appendLeading(accum, c);
[PATCH] m.appendParticipant(accum, c);
[PATCH] m.appendChild(accum, c);
[PATCH] m.appendReason(accum, c);
[PATCH] m.append0(accum, c);
[PATCH] m.appendReplacement(accum, '\n');
[PATCH] m.appendLeftPad(accum, c);
[PATCH] m.appendReplacement(accum, r);
[PATCH] m.appendReplacement(accum, cx);
[PATCH] m.replaceInto(accum, c);
[PATCH] m.appendPlaceholder(accum, c);
[PATCH] m.appendReplacement(accum, c;
[PATCH] m.appendChars(accum, c);
[PATCH] m.appendFor(accum, c);
[PATCH] m.appendPrevious(accum, c);
[PATCH] m.appendToGo(accum, c);
[PATCH] m.appendW(accum, c);
[PATCH] m.prepend(accum, c);
[PATCH] m.appendToString(accum, c);
[PATCH] m.appendReplacement(accum, c);
[PATCH] g.appendReplacement(accum, c);
[PATCH] m.appendValues(accum, c);
[PATCH] m.appendReplacer(accum, c);
[PATCH] m.appendEscaped(accum, c);
[PATCH] M.appendReplacement(accum, c);
[PATCH] m.appendCopy(accum, c);
[PATCH] mi.appendReplacement(accum, c);
[PATCH] m.append2(accum, c);
[PATCH] m.appendSegment(accum, c);
[PATCH] m.copyTo(accum, c);
[PATCH] m.appendEntity(accum, c);
[PATCH] m.append(( char)c);
[PATCH] accum.append('\\');
[PATCH] m.insert(accum, c);
[PATCH] l.append(accum, c);
[PATCH] c = Character.toLowerCase(c);
[PATCH] m.appendPattern(c, accum);
[PATCH] m.appendLiteral('\\', c);
[PATCH] m.appendReplacement(accum,"\\u");
[PATCH] m.appendReplacement(accum,"");
[PATCH] accum.append("\\u" + c;
