[PATCH] return parseJSTypeExpression(token);
[PATCH] return parseTypeExpression(token);
[PATCH] return parseAndIgnoreWhitespace(token);
[PATCH] return parseContextTypeExpression(token);
[PATCH] return parseAndRecordTypeExpression(token);
[PATCH] return parseConcreteTypeExpression(token);
[PATCH] return parseContextTypeExpression(token, true);
[PATCH] return createContextTypeExpression(token);
[PATCH] return parseTypeExpression(token,"type");
[PATCH] return parseClassTypeExpression(token);
[PATCH] return parseFormalTypeParameters(token);
[PATCH] return parseContextTypeExpression(token, null);
[PATCH] return parseJSType(token);
[PATCH] return parseAndRecordTypeNode(token);
[PATCH] return parseTypeExpression(token, true);
[PATCH] return parseInlineTypeExpression(token);
[PATCH] return parseContextTypeExpr(token);
[PATCH] return parseConcreteType(token);
[PATCH] return parseJsDocToken(token);
[PATCH] return parseNativeTypeExpression(token);
[PATCH] return parseContextTypeExpression(token, false);
[PATCH] return parseParameterType(token);
[PATCH] return parseQualifiedTypeExpression(token);
[PATCH] return parseJSTypeExpression(token,"type");
[PATCH] return parseBasicTypeExpression(token);
[PATCH] return parseSimpleTypeExpression(token);
[PATCH] return parseJsTypeExpression(token);
[PATCH] return parseAndRecordTypeToken(token);
[PATCH] return parseAndRecordTypeExpr(token);
[PATCH] return parseToken(token, Token.TYPE);
[PATCH] return parseJSTypeExpression(token, true);
[PATCH] return parseAndRecordType(token);
[PATCH] return parseAndResetTypeExpression(token);
[PATCH] return parseExpression(token);
[PATCH] return parseTypeExpr(token);
[PATCH] return parseJSTypeExpression(token, token);
[PATCH] return parseBaseTypeExpression(token);
[PATCH] return new JSTypeExpression(token);
[PATCH] return parseStrictTypeExpression(token);
[PATCH] return parseAndRecordType("type", token);
[PATCH] return parseAndResetContextTypeExpression(token);
[PATCH] return parseType(token, Token.TYPE);
[PATCH] return parseExpr(token);
[PATCH] return parseAndRecordType(token,"type");
[PATCH] return parseAstRoot(token);
[PATCH] return parseTypeExpression(token, false);
[PATCH] return createJSTypeExpression(token);
[PATCH] return parseUnionTypeExpression(token);
[PATCH] return parseAndIgnoreComment(token);
[PATCH] return parseConcreteExpression(token);
[PATCH] return parseTypeParameterExpression(token);
[PATCH] return parseAndThrow(token,"type");
[PATCH] return parseNativeTypeExpression(token,"type");
[PATCH] return parseTextNode(token);
[PATCH] return parseName(token);
[PATCH] return parseNativeType(token,"type");
[PATCH] return new JSTypeExpression(token, getTokenName());
[PATCH] return parseJSTypeExpr(token);
[PATCH] return parseClassTypeToken(token);
[PATCH] return parseClassExpression(token);
[PATCH] return parseFunctionTypeExpression(token);
[PATCH] return parseParameterizedTypeExpression(token);
[PATCH] return parseAndIgnoreTypeExpression(token);
[PATCH] return Parser.newExpr(token);
[PATCH] return parseTypeNode(token);
[PATCH] return parseTypeExpression(token, token);
[PATCH] return parseToken(token,"type");
[PATCH] return parseTypeExpression(token, 0);
[PATCH] return parseAndIgnoreComments(token);
[PATCH] return parseTypeExpression(token, null);
[PATCH] return parseAndResetToken(token);
[PATCH] return parseClassTypeExpression(token);
[PATCH] return Token.EXPR_RESULT;
[PATCH] return parseGenericParameterType(token);
[PATCH] return parseClassDefToken(token);
[PATCH] return parseFieldTypeExpression(token);
[PATCH] return parseClassType(token);
[PATCH] return parseAndIgnoreToken(token);
[PATCH] return parseConcreteFunction(token);
[PATCH] return parseAndResetType(token);
[PATCH] return parsePropertyName(token);
[PATCH] return createName(token);
[PATCH] return parseGenericTypeExpression(token);
[PATCH] return parseEnumParameterType(token);
[PATCH] return parseTypeReference(token);
[PATCH] return parseExpression(token);
[PATCH] return parseToken(token);
[PATCH] return parseClassToken(token);
[PATCH] return applyCommonRestriction(token);
[PATCH] return parseJSDocInfo(token);
[PATCH] return getContextTypeExpression(token);
[PATCH] return parseTypeProperty(token);
[PATCH] return parseObjectType(token);
[PATCH] return parseAst(token);
[PATCH] return parseTokenType(token);
[PATCH] return parseTypes(token);
[PATCH] return parseType(token);
[PATCH] return parseTypeName(token);
[PATCH] return parseTypeParameter(token);
[PATCH] return parseStringLiteral(token);
