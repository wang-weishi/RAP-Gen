[PATCH] return false;
[PATCH] return value == null;
[PATCH] return locals.apply(value);
[PATCH] return value.getType() == Token.NEW;
[PATCH] return!NodeUtil.isImmutableValue(value);
[PATCH] return!NodeUtil.isExpressionNode(value);
[PATCH] return!NodeUtil.isLiteralValue(value);
[PATCH] return!isToStringMethodCall(value);
[PATCH] return true;
[PATCH] return value.getType()!= Token.NEW;
[PATCH] return isToStringMethodCall(value);
[PATCH] return!isImmutableValue(value);
[PATCH] return value == null || isToStringMethodCall(value);
[PATCH] return!NodeUtil.isNew(value);
[PATCH] return value.getFirstChild()!= null;
[PATCH] return!NodeUtil.isExprAssign(value);
[PATCH] return newHasLocalResult(value);
[PATCH] return value == new Node(Token.NEW);
[PATCH] return value == null || isToStringCall(value);
[PATCH] return constructorHasLocalResult(value);
[PATCH] return value.getNext()!= null;
[PATCH] return!NodeUtil.isJSIdentifier(value);
[PATCH] return newNode(Token.NEW);
[PATCH] return value.getNext() == null;
[PATCH] return value == null || locals.apply(value);
[PATCH] return locals == null || locals.apply(value);
[PATCH] return!isCall(value);
[PATCH] return!callHasLocalResult(value);
[PATCH] return value.getJSType().isConstructor();
[PATCH] return isConstructorCall(value)? true : false;
[PATCH] return!isCallOrNew(value);
[PATCH] return!NodeUtil.isJSType(value);
[PATCH] return isToStringCall(value);
[PATCH] return NodeUtil.isLiteralValue(value);
[PATCH] return value.getJSType()!= null;
[PATCH] return isToStringMethodCall(value)? true : false;
[PATCH] return nodeHasLocalResult(value);
[PATCH] return isConstructorCall(value);
[PATCH] return value == null || isToStringMutator(value);
[PATCH] return value.getFirstChild() == null;
[PATCH] return!isObjectLitKey(value);
[PATCH] return super.evaluatesToLocalValue(value);
[PATCH] return isConstructor(value)? true : false;
[PATCH] return!isConstructor() || isInterface(value);
[PATCH] return locals == null;
[PATCH] return newNode(Token.NEW, value);
[PATCH] return NodeUtil.isExprAssign(value);
[PATCH] return!isExpressionNode(value);
[PATCH] return!isConstructor(value)? false : false;
[PATCH] return!isToStringCall(value);
[PATCH] return!isConstructor(value);
[PATCH] return!isExprAssign(value);
[PATCH] return state == Token.NEW;
[PATCH] return type == Token.NEW;
[PATCH] return!isNewType(value);
[PATCH] return value == parent.getLastChild();
[PATCH] return value == scope.getRootNode();
[PATCH] return value instanceof Node;
[PATCH] return value instanceof Token.NEW;
[PATCH] return!isStringMethodCall(value);
[PATCH] return!isCallThis(value);
[PATCH] return parentHasLocalResult(value);
[PATCH] return value == node.getFirstChild();
[PATCH] return ctorHasLocalResult(value);
[PATCH] return!isParameterType(value);
[PATCH] return value == null? false : true;
[PATCH] return new Node(Token.NEW);
[PATCH] return!isSafeAssign(value, false);
[PATCH] return new Node(Token.NEW, value);
[PATCH] return!isLiteralValue(value);
[PATCH] return value!= null;
[PATCH] return parameterHasLocalResult(value);
[PATCH] return value == newNode;
[PATCH] return!isCallToNew();
[PATCH] return!isFromObjectLit(value);
[PATCH] return!isCallSite(value);
[PATCH] return!isConstructorCall(value);
[PATCH] return!isSafeAssign(value);
[PATCH] return NodeUtil.isNew(value);
[PATCH] return locals.apply(newNode);
[PATCH] return isConstructor(value);
[PATCH] return!isToStringMethod(value);
[PATCH] return newLiteralValue(value);
[PATCH] return!Token.NEW;
[PATCH] return!isStringLiteral(value);
[PATCH] return state!= Token.NEW;
[PATCH] return newNode(value);
[PATCH] return isToStringMethod(value);
[PATCH] return!isObjectType(value);
[PATCH] return value == this;
[PATCH] return newValue(value);
[PATCH] return this == value;
[PATCH] return newValue(value);
[PATCH] return isCall(value);
[PATCH] return isParameterType(value);
[PATCH] return newExpr(value);
[PATCH] return value instanceof Token;
[PATCH] return newNode("");
[PATCH] return!isThis();
[PATCH] return newValue();
