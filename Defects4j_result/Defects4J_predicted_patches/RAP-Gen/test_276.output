[PATCH] found = prop.equals(propToRm.getName());
[PATCH] found = prop.find(propToRm.getName());
[PATCH] found = prop.remove(propToRm.getName());
[PATCH] found = prop.containsKey(propToRm.getName());
[PATCH] found = prop.addAll(propToRm.getName());
[PATCH] found = prop.getName().equals(propToRm.getName());
[PATCH] found = prop.key.equals(propToRm.getName());
[PATCH] found = prop.deserialize(propToRm.getName());
[PATCH] found = findProperty(prop.getName(), propToRm);
[PATCH] found = prop.hasProperty(propToRm.getName());
[PATCH] found =!prop.equals(propToRm.getName());
[PATCH] found = prop.removeAll(propToRm.getName());
[PATCH] found = prop.addChangeListener(propToRm);
[PATCH] found = prop.compareTo(propToRm.getName());
[PATCH] found = prop.hasName(propToRm.getName());
[PATCH] found = prop.matches(propToRm.getName());
[PATCH] found = key.equals(prop.getBeanClass().getName());
[PATCH] found = prop.isAssignableFrom(propToRm.getName());
[PATCH] found = prop.withName(propToRm.getName());
[PATCH] found = _props.contains(prop.getName());
[PATCH] found = prop.getProperty(propToRm.getName());
[PATCH] found = key.equals(prop.getKey());
[PATCH] found = prop.canRemove(propToRm.getName());
[PATCH] found = prop.containsName(propToRm.getName());
[PATCH] found = prop.setName(propToRm.getName());
[PATCH] found = prop.validate(propToRm.getName());
[PATCH] found = prop.hasKey(propToRm.getName());
[PATCH] found = prop.match(propToRm.getName());
[PATCH] found = prop.equals(propToRm);
[PATCH] found = key.equals(prop.getName());
[PATCH] found = prop.addAll(propToRm.getProperties());
[PATCH] found = prop.name().equals(propToRm.getName());
[PATCH] found = prop.addAll(propToRm);
[PATCH] found = prop.filter(propToRm.getName());
[PATCH] found = prop.search(propToRm.getName());
[PATCH] found = prop.hasReferenceName(propToRm.getName());
[PATCH] found = prop.renameTo(propToRm.getName());
[PATCH] found = prop.deserialize().equals(propToRm.getName());
[PATCH] found = prop.intersects(propToRm);
[PATCH] found = prop.contains(propToRm.getName());
[PATCH] found = key.equals(prop.getInternalName());
[PATCH] found = prop.deserialize().contains(propToRm.getName());
[PATCH] found = _key.equals(prop.getKey());
[PATCH] found = propToRm.equals(prop.getName());
[PATCH] found = prop.addType(propToRm.getType());
[PATCH] found = this.key.equals(prop.getKey());
[PATCH] found = props.contains(prop.getName());
[PATCH] found = prop.addKey(propToRm.getName());
[PATCH] found = prop.mergeWith(propToRm.getName());
[PATCH] found = prop.indexOf(propToRm.getName());
[PATCH] found = findProperty(propToRm.getName());
[PATCH] found = propToRm.containsKey(prop.getName());
[PATCH] found = find(prop.getName(), propToRm);
[PATCH] found = prop.get(propToRm.getName());
[PATCH] found = propName.equals(propToRm.getName());
[PATCH] found = prop.init(propToRm.getName());
[PATCH] found = prop.checkEquals(propToRm.getName());
[PATCH] found = this.key.equals(prop.getName());
[PATCH] found = prop.add(propToRm.getName());
[PATCH] found = propToRm.contains(prop.getName());
[PATCH] found = findProperty(prop.getBeanClass());
[PATCH] found = findProperty(prop.getType());
[PATCH] found = prop.addType(propToRm.getName());
[PATCH] found = _find(prop.getType());
[PATCH] found = find(prop.getType());
[PATCH] found = prop.containsKey(propToRm.getKey());
[PATCH] found = prop.equals(propToRm.getKey());
[PATCH] found = propToRm.equals(prop.getInternalName());
[PATCH] found = findProperty(prop.getName());
[PATCH] found = _key.equals(prop.getName());
[PATCH] found = prop.removeChangeListener(propToRm);
[PATCH] found = _properties.contains(prop.getName());
[PATCH] found = prop.add(propToRm);
[PATCH] found = propToRm.equals(prop.getType());
[PATCH] found = findProperty(prop.getBeanClass().getName());
[PATCH] found = prop.update(propToRm);
[PATCH] found = prop.addChangeListener(propToRm.getName());
[PATCH] found = _find(prop.getBeanClass());
[PATCH] found = prop.addAll(propToRm.getPropertyNames());
[PATCH] found = prop.deserialize(propToRm.getType());
[PATCH] found = name.equals(prop.getName());
[PATCH] found = prop.validate(propToRm);
[PATCH] found = prop.filter(propToRm.getPredicate());
[PATCH] found = prop.addChangeListener(propToRm, this);
[PATCH] found = prop.addChangeListener(this);
[PATCH] found = prop.addAll(propToRm.getNames());
[PATCH] found = find(prop.getBeanClass());
[PATCH] found = findProperty(propToRm.getName(), prop);
[PATCH] found = prop.find(propToRm);
[PATCH] found = prop.remove(propToRm);
[PATCH] found = prop.removeAll(propToRm);
[PATCH] found = prop.addAll(propToRm.getValues());
[PATCH] found = prop.addAll(propToRm.getAll());
[PATCH] found = prop.hasAllProperties();
[PATCH] found = prop.addAll(propToRm.getKeys());
[PATCH] found = prop.addAll(propToRm.getFields());
[PATCH] found = prop.addAll(propToRm.getElements());
[PATCH] found = propToRm.containsKey(prop.getPropertyName());
[PATCH] found = prop.addAll(propToRm.getProps());
[PATCH] found = propToRm.containsKey(prop.getMember());
