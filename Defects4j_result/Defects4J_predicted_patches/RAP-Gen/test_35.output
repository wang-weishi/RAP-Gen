[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Math.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Gamma.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Ra.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Gamma.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Double.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), epsilon)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * %.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(relativeAccuracy * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), 1)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Gradient.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(radix * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * 100000.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Rais.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(min * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Math.max(rtol * Gamma.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), rtol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Rs.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Double.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Float.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Logger.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * CollectionUtils.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(min * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * BufferedInputStream.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - mu.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] f0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(relativeAccuracy * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Exp.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * BigDecimal.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeFunctionValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Moore.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Visibility.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Filesystem.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(relativeAccuracy * Gamma.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * gcd.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Ra.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), itol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Logger.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Collections.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * ClassUtils.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(radial * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Limit.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(fx * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * sv, 0.0), atol); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Paris.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), eps)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * NaN.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - BufferedInputStream.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * 1.0), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeClassiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * exp(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(radix * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.min(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - %.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Ri.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), Infinity)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(freq * Gamma.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Not.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeFloatValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), freq); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Agg.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Expect.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Math.abs(x1), epsilon)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = compute ObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * mu.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * const.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Gamma.max(rtol * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeRegularValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Math.max(rtol * FastMath.abs(x1), rtol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Integer.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * R.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), etol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(freq * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeScalarValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * 1.0, 0.0), atol); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - Math.max(rtol * FastMath.abs(x1), epsilon)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * denom.abs(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(f0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol *], 0.0), atol); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol *FastForward(x1), atol)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), 1); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeFiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * 1.0, 0.0)); f0 = computeObjectiveValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeBooleanValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeConstantValue(x0);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); }
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x00);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0;
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x2);
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Math.abs(x1), atol)); f0 = computeObjectiveValue(x0); }
[PATCH] x0 = 0.5 *(x0 + x1 - Math.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0); }
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0));
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * Gamma.abs(x1), atol)); f0 = computeObjectiveValue(x0); }
[PATCH] x0 = 0.5 *(x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol)); f0 = computeObjectiveValue(x0)];
