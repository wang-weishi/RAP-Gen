[PATCH] validate(charBuf, start, count);
[PATCH] ensureCapacity(stringCache.length + count);
[PATCH] enlarge(count, maxStringCacheLen);
[PATCH] trim(charBuf, start, count);
[PATCH] checkCache(stringCache, start, count);
[PATCH] checkRange(charBuf, start, count);
[PATCH] validate(stringCache, start, count);
[PATCH] Arrays.sort(stringCache);
[PATCH] rewind(charBuf, start, count);
[PATCH] ensureCapacity(stringCache.length);
[PATCH] checkCache(stringCache);
[PATCH] checkRange(stringCache, start, count);
[PATCH] Arrays.fill(stringCache, null);
[PATCH] rehash(stringCache, start, count);
[PATCH] trimTo(charBuf, start, count);
[PATCH] rehash(charBuf, start, count);
[PATCH] checkLimits(stringCache, start, count);
[PATCH] recache(stringCache, start, count);
[PATCH] unshare(charBuf, start, count);
[PATCH] rangeCheck(charBuf, start, count);
[PATCH] cache = Arrays.asList(stringCache);
[PATCH] checkCacheLength(stringCache, count);
[PATCH] remap(charBuf, start, count);
[PATCH] reuse(stringCache, start, count);
[PATCH] enlarge(count - maxStringCacheLen);
[PATCH] ensureCapacity(count);
[PATCH] stringCache = Arrays.sort(stringCache);
[PATCH] rehash();
[PATCH] checkBounds(stringCache, start, count);
[PATCH] rewind(stringCache, start, count);
[PATCH] ensureCacheCapacity(stringCache, count);
[PATCH] cache = Arrays.sort(stringCache);
[PATCH] ensureCacheCapacity(stringCache.length);
[PATCH] checkCache(stringCache, true);
[PATCH] trimTo(stringCache, start, count);
[PATCH] sort(charBuf, start, count);
[PATCH] checkChars(charBuf, start, count);
[PATCH] normalize(charBuf, start, count);
[PATCH] validateCache(stringCache, start, count);
[PATCH] checkCacheCapacity(stringCache, count);
[PATCH] invalidateRangeInfo();
[PATCH] ensureCapacity(stringCache, count);
[PATCH] testCache(stringCache, start, count);
[PATCH] clearStringCache();
[PATCH] invalidateBounds(start, count);
[PATCH] clean(charBuf, start, count);
[PATCH] ensureCapacity(stringCache.length + 1);
[PATCH] recache(stringCache, 0, count);
[PATCH] unshare(stringCache, start, count);
[PATCH] checkCache(stringCache, false);
[PATCH] endStringCacheLen(stringCache, count);
[PATCH] checkCapacity(stringCache, start, count);
[PATCH] copyTo(charBuf, start, count);
[PATCH] trim(stringCache, start, count);
[PATCH] checkCacheCapacity(stringCache.length);
[PATCH] mask(charBuf, start, count);
[PATCH] recache(stringCache);
[PATCH] Validate.isTrue(start < 0);
[PATCH] filter(charBuf, start, count);
[PATCH] checkBounds(start, count);
[PATCH] checkCacheLen(stringCache, count);
[PATCH] checkCacheBounds(stringCache);
[PATCH] rewindTo(start, count);
[PATCH] checkCacheCapacity(stringCache);
[PATCH] checkMaxStringCacheLen(count);
[PATCH] copyTo(charBuf, start, 0);
[PATCH] checkCapacity(stringCache.length);
[PATCH] initStringCache(stringCache);
[PATCH] validateCache(stringCache);
[PATCH] clearStringCache(stringCache);
[PATCH] trimTo(charBuf, start);
[PATCH] endStringCache(stringCache);
[PATCH] validate(start, count);
[PATCH] unshare(stringCache.length);
[PATCH] enlarge(count);
[PATCH] checkMinStringCacheLen(count);
[PATCH] checkRange(start, count);
[PATCH] Validate.isTrue(stringCache!= null);
[PATCH] trimTo(start, count);
[PATCH] trim(charBuf, start);
[PATCH] checkCacheLength(stringCache);
[PATCH] rangeCheck(start, count);
[PATCH] checkLimit(start, count);
[PATCH] endStringCacheLen(count);
[PATCH] clearCache();
[PATCH] ensureCacheInitialized(stringCache);
[PATCH] checkLookup(stringCache);
[PATCH] lengthCache(stringCache);
[PATCH] rehash(stringCache);
[PATCH] unshare(count);
[PATCH] endCache(stringCache);
[PATCH] reCache(stringCache);
[PATCH] endCache();
[PATCH] unshare(stringCache);
[PATCH] endStringCacheLen();
[PATCH] removePrefix(start);
[PATCH] clear(stringCache);
[PATCH] invalidateBounds();
[PATCH] initStringCache();
[PATCH] rehash(count);
