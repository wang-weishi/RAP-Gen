[PATCH] type = null;
[PATCH] type = Option.TYPE;
[PATCH] type =(Class)Option.class;
[PATCH] type = Option.class;
[PATCH] type = OptionBuilder.class;
[PATCH] type = Option.CLASS;
[PATCH] type = new Class(argName);
[PATCH] type = Option.LONGOPT_TYPE;
[PATCH] type = Option.VOID_TYPE;
[PATCH] type =(Class)Option.TYPE;
[PATCH] type = Option.DEFAULT;
[PATCH] type = Class.class;
[PATCH] type =(Class)Option.CLASS;
[PATCH] type = Option.TYPE_UNKNOWN;
[PATCH] type = Option.UNKNOWN;
[PATCH] type = System.class;
[PATCH] type = Option.LONGPLUS;
[PATCH] type = Option.OPTIONAL_TYPE;
[PATCH] type = OptionBuilder.DEFAULT_TYPE;
[PATCH] type = Option.TYPE_LONGOPT;
[PATCH] type = Option.TYPE_OBJECT;
[PATCH] type = String.class;
[PATCH] type = Option.CHECKED_TYPE;
[PATCH] type = Option.TYPE_SHORT;
[PATCH] type = Option.LONG_OPTION;
[PATCH] type = Option.NONE;
[PATCH] type = Option.UNINITIALIZED;
[PATCH] type = Option.TYPE_NONE;
[PATCH] type = new Class(Option.class);
[PATCH] type = Option.TYPE_STRING;
[PATCH] type = Option.CONSTANTS_ONLY;
[PATCH] type = new Class(opt);
[PATCH] type = getClass();
[PATCH] type = Option.MINIMUM_TYPE;
[PATCH] type = Option.COMMAND_TYPE;
[PATCH] type = type.getGenericSuperclass();
[PATCH] type =(Class)Option.NONE;
[PATCH] type = Option.TYPE_CLASS;
[PATCH] type = Option.LONG_OPT;
[PATCH] type = Option.CHECKED_UNKNOWN;
[PATCH] type ="";
[PATCH] type = Option.COMMAND;
[PATCH] type = new Class().getComponentType();
[PATCH] type = new char[0];
[PATCH] type = new Class(String.class);
[PATCH] type = Option.TYPE_DEFAULT;
[PATCH] type = Option.COMMA;
[PATCH] type = Option.DEFAULT_TYPE;
[PATCH] type =(Class)Option.UNKNOWN;
[PATCH] type = Option.LONGOPT;
[PATCH] type = Option.COMMAND_ONLY;
[PATCH] type = Option.NO_TYPE;
[PATCH] type = Option.JANUARY;
[PATCH] type = Option.TYPE_CHECKED;
[PATCH] type = Option.SHORT;
[PATCH] type = System.getClass();
[PATCH] type = Option.TYPE_REQUIRED;
[PATCH] type = Option.CLI_TYPE;
[PATCH] type = new Class(ARGName);
[PATCH] type = Option.VALUE_STRING;
[PATCH] type = optionType.getDefault();
[PATCH] type = new Class(optionName);
[PATCH] type = Option.LONG_INPUT;
[PATCH] type = new Class(ArgName);
[PATCH] type = new String(argName);
[PATCH] type = Option.REQUIRED;
[PATCH] type = Option.CONSTANTS_TYPE;
[PATCH] type = Option.CONSTANT_TYPE;
[PATCH] type = AbstractType.class;
[PATCH] type = Option.BOTH;
[PATCH] type = new Class();
[PATCH] type = Option.LONG_ARGS;
[PATCH] type = Option.TYPE_ERROR;
[PATCH] type = type.getComponentType();
[PATCH] type = getClass().getComponentType();
[PATCH] type = this.type;
[PATCH] type = Type.getDefault();
[PATCH] type =(Class)Option.DEFAULT;
[PATCH] type = Type.getObjectType("opt");
[PATCH] type = AbstractClass.class;
[PATCH] type = option.getType();
[PATCH] type = type.getSimpleName();
[PATCH] type = new Class[0];
[PATCH] type = new Class(description);
[PATCH] type = Node.class;
[PATCH] type = new java.lang.Class();
[PATCH] type = Option.TYPE_LONG;
[PATCH] type = Option.LONG_ONLY;
[PATCH] type = new Class(desc);
[PATCH] type = Type.getGenericType();
[PATCH] type = option.getClass();
[PATCH] type = type.getSuperclass();
[PATCH] type = Option.INITIALIZED;
[PATCH] type = Option.INFINITE;
[PATCH] type = Option.OPTION;
[PATCH] type = Option.BOOLEAN;
[PATCH] type = Option.STRING;
[PATCH] type = new Class<?>(opt);
[PATCH] type = Option.OTHER;
[PATCH] type = Option.BINARY;
