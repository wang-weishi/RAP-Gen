[PATCH] parent.removeChild(rvalue);
[PATCH] NodeUtil.removeChild(gramps, parent);
[PATCH] Node greatGreatGramps.removeChild(parent);
[PATCH] NodeUtil.removeChild(parent, gramps);
[PATCH] Preconditions.checkNotNull(rvalue);
[PATCH] Node.removeChild(gramps, parent);
[PATCH] Node currentParent = greatGreatGramps.getParent();
[PATCH] Preconditions.checkNotNull(gramps);
[PATCH] Node newParent = greatGreatGramps.getParent();
[PATCH] Node greatGreatParentamps.removeChild(parent);
[PATCH] NodeUtil.copyNameAnnotations(parent, rvalue);
[PATCH] ref.node.detachFromParent();
[PATCH] Node.removeChild(parent, gramps);
[PATCH] parent.replaceChild(gramps, rvalue);
[PATCH] parent.replaceChild(ref.node, rvalue);
[PATCH] NodeUtil.removeChild(gramps, gramps);
[PATCH] Node greatGreatGramps.removeChild(gramps);
[PATCH] NodeUtil.removeChild(parent, parent);
[PATCH] parent.replaceChild(rvalue, ref.node);
[PATCH] parent.getParent().removeChild(rvalue);
[PATCH] NodeUtil.removeDeclaration(gramps, parent);
[PATCH] Node greatGreatGramps.detachFromParent();
[PATCH] NodeUtil.copyNameAnnotations(gramps, nameNode);
[PATCH] NodeUtil.removeChildren(gramps, parent);
[PATCH] Node grandParent = greatGreatGramps.getParent();
[PATCH] NodeUtil.removeNameAnnotations(gramps, parent);
[PATCH] Node varNode = ref.node.getFirstChild();
[PATCH] parent.getParent().replaceChild(gramps, parent);
[PATCH] Node stubVar = ref.node.getFirstChild();
[PATCH] NodeUtil.findSuperTypes(gramps, parent);
[PATCH] NodeUtil.copyNameAnnotations(rvalue, parent);
[PATCH] Node rvalue = rvalue.getNext();
[PATCH] NodeUtil.removeChildren(gramps);
[PATCH] NodeUtil.removeProp(gramps, parent);
[PATCH] NodeUtil.setNameAnnotations(gramps, refName);
[PATCH] NodeUtil.copyNameAnnotations(gramps, parent);
[PATCH] Node greatGreatParentamps.removeChild(gramps);
[PATCH] NodeUtil.removeNameAnnotations(gramps, refName);
[PATCH] Node candidate = greatGreatGramps.getFirstChild();
[PATCH] Node oldParent = greatGreatGramps.getParent();
[PATCH] Preconditions.checkNotNull(gramps, parent);
[PATCH] NodeUtil.moveToFront(gramps, parent);
[PATCH] Node previousParent = greatGreatGramps.getParent();
[PATCH] Node reflectionVar = ref.node.getFirstChild();
[PATCH] NodeUtil.copyNameAnnotations(parent, ref);
[PATCH] Node prev = greatGreatGramps.getParent();
[PATCH] NodeUtil.copyNameAnnotations(parent, nameNode);
[PATCH] NodeUtil.findNameAnnotations(gramps, refName);
[PATCH] NodeUtil.copyNameAnnotations(gramps, refName);
[PATCH] NodeUtil.removeChild(gramps, rvalue);
[PATCH] JSType varNode = ref.node.getFirstChild();
[PATCH] Node parentGreatGramps = parent.getParent();
[PATCH] parent.replaceChild(gramps, parent);
[PATCH] NodeUtil.copyNameAnnotations(parent, gramps);
[PATCH] greatGreatGramps.removeChild(parent);
[PATCH] Preconditions.checkNotNull(greatGreatGramps);
[PATCH] Node pointer = ref.node.getFirstChild();
[PATCH] ref.node.removeProp(Node.IS_NAME);
[PATCH] String nameMap = getNameMap(refName.fullName());
[PATCH] parent.removeChild(ref.node);
[PATCH] Node nameMap = getNameMap(refName.fullName());
[PATCH] NodeUtil.redeclareVarsInsideBranch(gramps);
[PATCH] Node currentParent = ref.node.getParent();
[PATCH] Node.removeChild(parent, parent);
[PATCH] NodeUtil.removeNameAnnotations(gramps, nameNode);
[PATCH] NodeUtil.copyNameAnnotations(parent, null);
[PATCH] NodeUtil.findSuperTypes(gramps, refName);
[PATCH] NodeUtil.removeNameAnnotations(gramps, name);
[PATCH] Preconditions.checkNotNull(gramps, refName);
[PATCH] Parent varNode = ref.node.getFirstChild();
[PATCH] NodeUtil.copyNameAnnotations(parent, ref.node);
[PATCH] NodeUtil.removeCommonPrefixes(gramps, parent);
[PATCH] NodeUtil.removeRef(gramps, rvalue);
[PATCH] gramps.removeChild(parent);
[PATCH] NodeUtil.removeChild(gramps, root);
[PATCH] NodeUtil.removeRef(gramps, parent);
[PATCH] Nodervalue = rvalue.getNext();
[PATCH] NodeUtil.removeProp(gramps, refName);
[PATCH] ref.node.setString(alias);
[PATCH] refName.setAliased(true);
[PATCH] Preconditions.checkNotNull(refName);
[PATCH] ref.node.removeProp(Node.IS_VAR);
[PATCH] boolean canCollapseChildNames = refName.canCollapse();
[PATCH] NodeUtil.detachFromParent(gramps);
[PATCH] Node nameMap = getNameMap(ref.node);
[PATCH] String name = refName.fullName();
[PATCH] Node nameMap = refName.getMap();
[PATCH] Node.removeChild(parent, rvalue);
[PATCH] Node compiler = ref.node.getCompiler();
[PATCH] Node newParent = ref.node.getParent();
[PATCH] navigateTo(gramps, parent);
[PATCH] NodeUtil.removeComments(gramps);
[PATCH] Node greatGreatGramps.getParent();
[PATCH] Node value = rvalue.getNext();
[PATCH] parent.detachFromParent();
[PATCH] gramps.removeChild(rvalue);
[PATCH] compiler.reportCodeChange();
[PATCH] NodeUtil.removeChildren(parent);
[PATCH] Node.removeChild(parent);
[PATCH] Node
