[PATCH] return getNativeType(NO_OBJECT_TYPE);
[PATCH] return getNativeType(NO_TYPE);
[PATCH] return caseTopType(getNativeType(NO_TYPE));
[PATCH] return type == null? getNativeType(NO_TYPE): type;
[PATCH] return caseTopType(topType, null);
[PATCH] return caseTopType(null, topType);
[PATCH] return caseTopType(getNativeType(TOP_TYPE));
[PATCH] return applyCommonRestriction(topType);
[PATCH] return type == null? null : type.visit(topType);
[PATCH] return type == TOP? getNativeType(NO_TYPE): null;
[PATCH] return type == null? null : type.getRestrictedWithoutUndefined();
[PATCH] return type.isSubtype(topType)? type : null;
[PATCH] return caseTopType(topType, getRestrictedByTypeOfResult());
[PATCH] return this.type;
[PATCH] return defaultCaseTopType(topType);
[PATCH] return defaultCase(topType);
[PATCH] return(topType instanceof UnionType)? topType : null;
[PATCH] return matchesExpectation("object")? topType : null;
[PATCH] return getRestrictedByTypeOfResult(topType);
[PATCH] return caseTopType(topType, getRestrictedWithoutUndefined());
[PATCH] return caseType(getNativeType(NO_OBJECT_TYPE));
[PATCH] return caseTopType(topType, false);
[PATCH] return caseTopType(topType.getRestrictedByTypeOfResult());
[PATCH] return caseTopType(topType, getRestrictedWithoutNull());
[PATCH] return caseTopType(getNativeType(NO_TYPE)));
[PATCH] return caseTopType(this.type, topType);
[PATCH] return type == null? getNativeType(UNKNOWN_TYPE): type;
[PATCH] return caseTopType(topType, getRestrictedByTypeOfThis());
[PATCH] return caseTopType(topType.toObjectType());
[PATCH] return topType == null? null : topType.toObjectType();
[PATCH] return type == null? getNativeType(NULL_TYPE): type;
[PATCH] return getNativeType(TOP_TYPE);
[PATCH] return getNativeType(JSTypeNative.NO_TYPE);
[PATCH] return caseTopType(getNativeType(UNKNOWN_TYPE));
[PATCH] return caseTopType(getNativeType(NULL_TYPE));
[PATCH] return getNativeType(U2U_CONSTRUCTOR_TYPE);
[PATCH] return getRestrictedByTypeOfResult(topType,"number", null);
[PATCH] return type.isEnumType()? topType : null;
[PATCH] return caseTopType(getNativeType(NO_TYPE));
[PATCH] return matchTopType(topType)? type : null;
[PATCH] return caseTopType(topType.getJSType());
[PATCH] return caseTopType(topType.visit(this));
[PATCH] return caseType(getNativeType(NO_TYPE));
[PATCH] return(topType instanceof UnionType)? this : topType;
[PATCH] return caseTopType(getNativeType(NUMBER_TYPE));
[PATCH] return getRestrictedByTypeOfResult(topType, restricters);
[PATCH] return currentCaseTopType(topType);
[PATCH] return caseTopType(0, topType);
[PATCH] return caseTopType(topType, true);
[PATCH] return caseTopType(topType, TOP_TYPE);
[PATCH] return topType.visit(this);
[PATCH] return matchesExpectation("object")? type : null;
[PATCH] return type.getRestrictedByTypeOfResult(topType);
[PATCH] return caseTopType(( FunctionType)topType);
[PATCH] return getNativeType(CHECKED_UNKNOWN_TYPE);
[PATCH] return caseTopType(topType.getPrimitiveType());
[PATCH] return topType instanceof UnionType? this : null;
[PATCH] return applyRestricters(topType);
[PATCH] return restricters.get(topType);
[PATCH] return caseTopType(topType, restricters);
[PATCH] return registry.getNativeType(NO_TYPE);
[PATCH] return applyrestricters(topType);
[PATCH] return applyCommonRestriction(topType, null);
[PATCH] return caseTopType(topType, this);
[PATCH] return caseType(topType, null);
[PATCH] return defaultSwitchCase(topType);
[PATCH] return caseTopObjectType(topType, null);
[PATCH] return getNativeType(NO_UNKNOWN_TYPE);
[PATCH] return caseTopType(topType);
[PATCH] return getNativeType(NO_ARGUMENT_TYPE);
[PATCH] return type == getNativeType(NO_TYPE);
[PATCH] return getRestrictedWithoutNull(topType);
[PATCH] return null;
[PATCH] return currentSwitchCase(topType);
[PATCH] return caseTopType(NO_TYPE);
[PATCH] return this.topType;
[PATCH] return defaultCase(topType, null);
[PATCH] return applyRestriction(topType);
[PATCH] return currentCase(topType);
[PATCH] return this.defaultCase(topType);
[PATCH] return defaultCaseNoType(topType);
[PATCH] return defaultCaseType(topType);
[PATCH] return next(null, topType);
[PATCH] return matchTopType(topType);
[PATCH] return caseObjectType(topType);
[PATCH] return getTopType(topType);
[PATCH] return new JSType(NO_TYPE);
[PATCH] return type;
[PATCH] return nativeType(NO_TYPE);
[PATCH] return getNativeType(ARRAY_TYPE);
[PATCH] return CASE_TOP_TYPE;
[PATCH] return TOP_TYPE;
[PATCH] return caseTopType(null);
[PATCH] return findType(topType);
[PATCH] return INSTANCE_TYPE;
[PATCH] return topType;
[PATCH] return CASE_TYPE;
[PATCH] return applyChange();
[PATCH] return result;
[PATCH] return firstType;
