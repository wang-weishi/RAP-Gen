[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = t *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 0.5 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r, t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(t)));
[PATCH] out[i][j] = 2 *(t - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = 0.5 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 0.5 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = Math.exp(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r, j));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = t /(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = t *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r), t);
[PATCH] out[i][j] = t *(1 - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = -t *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = Math.exp(t - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = Math.exp(-t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 -tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 0 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = Math.exp(-t * tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.getCumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r / t));
[PATCH] out[i][j] = t *(1 - tDistribution.cumulativeProbability(r, j));
[PATCH] out[i][j] = Math.exp(-t - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = 1.0 - tDistribution.cumulativeProbability(t);
[PATCH] out[i][j] = 1.0 - tDistribution.cumulativeProbability(r * t));
[PATCH] out[i][j] = 2.0 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = Math.exp(t / tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r, i));
[PATCH] out[i][j] = Math.exp(t * tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 0.0 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 10 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r)* t);
[PATCH] out[i][j] = 2 *(1 - tDistribution.value(t));
[PATCH] out[i][j] = 0 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 10 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = t /(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = t /(1 - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = 2 *(t - getTDistribution().cumulativeProbability(t));
[PATCH] out[i][j] =2 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 1 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 3 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 0.5 /(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] =(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 1.0 - tDistribution.cumulativeProbability(r * t);
[PATCH] out[i][j] = t /(1 - getTDistribution().cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(t - tDistribution.getCumulativeProbability(r));
[PATCH] out[i][j] = 0.5 /(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = Math.tan(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(t - tDistribution.cumulativeProbability(r, j));
[PATCH] out[i][j] = Math.tan(t, tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = t *(1 - getTDistribution().cumulativeProbability(t));
[PATCH] out[i][j] = t *(1 - tDistribution.cumulativeProbability(t)));
[PATCH] out[i][j] = Math.sqrt(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 3 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = Math.sqrt(t * tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r, 1));
[PATCH] out[i][j] = Math.abs(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = Math.pow(t, 2.0);
[PATCH] out[i][j] = t *(1 - tDistribution.getCumulativeProbability(r));
[PATCH] out[i][j] = 2.0 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = t *(1 -tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = t *(1 - tDistribution.cumulativeProbability(r, i));
[PATCH] out[i][j] = 1.0 - tDistribution.cumulativeProbability(r);
[PATCH] out[i][j] = 0 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.gcd(r, t));
[PATCH] out[i][j] = 2 *(1 - t Distribution.cumulativeProbability(t));
[PATCH] out[i][j] = Math.PI *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 10 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] =2 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 1 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(t / tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 0d *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r)));
[PATCH] out[i][j] = 0.2 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 1.0 - tDistribution.cumulativeProbability(r, t);
[PATCH] out[i][j] = 0.0 *(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.getCumulativeProbability(r));
[PATCH] out[i][j] =2 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.cumulativeProbability(r/t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.convergenceProbability(t));
[PATCH] out[i][j] = t /(1 - r * tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.gcd(t, r));
[PATCH] out[i][j] = 1.0 /(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2.0 *(t - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 1.0 - tDistribution.cumulativeProbability(r / t);
[PATCH] out[i][j] = 2 *(1 -tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 2 *(1 - tDistribution.gaussianProbability(t));
[PATCH] out[i][j] = t *(1 - r * tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 2 *(1 - tDistribution.CumulativeProbability(t));
[PATCH] out[i][j] = t /(1 - r * tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = -t /(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 1.0 /(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] =(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 0.5 /(1 - tDistribution.cumulativeProbability(r));
[PATCH] out[i][j] = 0.7 *(1 - tDistribution.cumulativeProbability(t));
[PATCH] out[i][j] = 0d *(1 - tDistribution.cumulativeProbability(r));
