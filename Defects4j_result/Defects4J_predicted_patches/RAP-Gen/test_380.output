[PATCH] setDenominator(maxDenominator);
[PATCH] overflow =(long)FastMath.abs(value);
[PATCH] accumulator = Math.abs(value);
[PATCH] value = Math.abs(value);
[PATCH] add(value, p1, q1);
[PATCH] FastMath.set(p2, 0.0);
[PATCH] illegal(value, p2, q2);
[PATCH] checkFraction(value, p2, q2);
[PATCH] print(value, p2, q2);
[PATCH] convert(value, p2, q2);
[PATCH] Math.max(p2, 0.0);
[PATCH] overflow =(double)FastMath.abs(value);
[PATCH] add(value, p2, q2);
[PATCH] overflow =(long)Math.abs(value);
[PATCH] ensureContraction(value, p2, q2);
[PATCH] overflow =(float)FastMath.abs(value);
[PATCH] Preconditions.checkState(value > 0.0);
[PATCH] FastMath.max(p2, 0.0);
[PATCH] accumulator = Math.abs(value - p2);
[PATCH] Fraction.setDenominator(maxDenominator);
[PATCH] FastMath.setInf(value, 0.0);
[PATCH] FastMath.divide(p2, q2);
[PATCH] setDenominator(maxDenominator, n);
[PATCH] FastMath.setAbs(p2, q2);
[PATCH] FastMath.round(value);
[PATCH] FastMath.setabs(p2, q2);
[PATCH] intercept(value, p2, q2);
[PATCH] accent = Math.abs(value);
[PATCH] overflow =(int)FastMath.abs(value);
[PATCH] super(value, epsilon, maxDenominator);
[PATCH] Overflow =(long)FastMath.abs(value);
[PATCH] ensureAtLeast(value, p2, q2);
[PATCH] accent = Math.abs(value - p2);
[PATCH] log(value, p2, q2);
[PATCH] Set(value, p2, q2);
[PATCH] double value = Math.abs(value);
[PATCH] BigDecimal value = Math.abs(value);
[PATCH] reduction(value, p2, q2);
[PATCH] overflow =(double)Math.abs(value);
[PATCH] setDenominator(value, 1.0);
[PATCH] super(value, epsilon, maxDenominator, n);
[PATCH] Preconditions.checkState(value < 0.0);
[PATCH] overflow = Math.abs(value);
[PATCH] super(value, p1, q1);
[PATCH] c = Math.abs(value);
[PATCH] convert(value, p1, q1);
[PATCH] checkInterval(p2, q2);
[PATCH] encountered = Math.abs(value);
[PATCH] fill(value, p2, q2);
[PATCH] e.set(r1, 0.0);
[PATCH] p2 = Math.max(0, p2);
[PATCH] setDenominator(maxDenominator, maxIterations);
[PATCH] int numerator =(int)Math.abs(value);
[PATCH] Preconditions.checkState(value < 1.0);
[PATCH] illegal(r1, r0);
[PATCH] p2 = Math.abs(value);
[PATCH] e.set(p2, q2);
[PATCH] illegal(value, p1, q1);
[PATCH] ensureDenominator(maxDenominator);
[PATCH] denominator = Math.abs(value);
[PATCH] ensureDenominator(maxDenominator, maxDenominator);
[PATCH] Preconditions.checkState(n == maxDenominator);
[PATCH] setDenominator(value, maxDenominator);
[PATCH] e.set(r1, r0);
[PATCH] String value = Math.abs(value);
[PATCH] overflow = Math.abs(p2);
[PATCH] illegal(p2, q2);
[PATCH] overflow = Math.max(0, overflow);
[PATCH] overflow =(long)Math.abs(p2);
[PATCH] FastMath.setabs(p2);
[PATCH] setDenominator(r1, n);
[PATCH] r1 = Math.abs(value);
[PATCH] ensureAtLeast(p2, q2);
[PATCH] e.set(a1, 0);
[PATCH] value = Math.pow(10, value);
[PATCH] e.set(value, 0.0);
[PATCH] FastMath.round(p2);
[PATCH] sum = Math.abs(value);
[PATCH] setDenominator(maximumDenominator);
[PATCH] Set(p2, q2);
[PATCH] Preconditions.checkState(n == 0);
[PATCH] s = Math.max(s, s);
[PATCH] FastMath.trim(p2);
[PATCH] acc = Math.abs(value);
[PATCH] accumulator = Math.max(accumulator, value);
[PATCH] overflow = Double.abs(value);
[PATCH] setNumerator(numerator, 1);
[PATCH] FastMath.set(value, 0.0);
[PATCH] Preconditions.checkState(n == maxIterations);
[PATCH] p2 = Math.max(p2, overflow);
[PATCH] roundFloor(value);
[PATCH] FastMath.setInf(value, p2);
[PATCH] push(value - p2);
[PATCH] print(value);
[PATCH] setDenominator(value, n);
[PATCH] super();
[PATCH] setNumerator(numerator);
[PATCH] Math.round(value);
[PATCH] Underflow(value);
[PATCH] floor(value);
