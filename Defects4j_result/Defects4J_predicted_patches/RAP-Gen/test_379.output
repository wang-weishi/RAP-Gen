[PATCH] value = Math.abs(value);
[PATCH] convert(value, p2, q2);
[PATCH] a1 =(long)r1;
[PATCH] accumulator = Math.abs(value);
[PATCH] add(value, p2, q2);
[PATCH] setOverflow(p2, q2);
[PATCH] add(value, p1, q1);
[PATCH] illegal(value, p2, q2);
[PATCH] addOverflow(p2, q2);
[PATCH] final double value = Math.abs(value);
[PATCH] setDenominator(maxDenominator);
[PATCH] ensureOverflow(p2, q2);
[PATCH] check(value, p2, q2);
[PATCH] super(value, epsilon, maxDenominator);
[PATCH] print(value, p2, q2);
[PATCH] m = Math.abs(value);
[PATCH] FastMath.round(value);
[PATCH] exp = Math.abs(value);
[PATCH] a2 =(long)r1;
[PATCH] c = Math.abs(value);
[PATCH] BigDecimal value = Math.abs(value);
[PATCH] removeLeadingZeroes(p2);
[PATCH] setOverflow(1.0);
[PATCH] e.setOverflow(1.0);
[PATCH] value = Math.pow(10, value);
[PATCH] double value = Math.abs(value);
[PATCH] ensureCapacity(p2, q2);
[PATCH] roundFloor(value);
[PATCH] setDenominator(value, 1.0);
[PATCH] Preconditions.checkState(n == 0);
[PATCH] accent = Math.abs(value);
[PATCH] removeTrailingZeroes(p2);
[PATCH] a0 =(long)r1;
[PATCH] encountered = Math.abs(value);
[PATCH] int m = Math.abs(value);
[PATCH] p2 = Math.abs(value);
[PATCH] checkRoundFloor(value);
[PATCH] Math.round(value);
[PATCH] add(value, 0.0);
[PATCH] ensureDenominator(value, 1.0);
[PATCH] r1 = Math.abs(value);
[PATCH] checkInterval(p2, q2);
[PATCH] ensureAtLeast(value, 0.0);
[PATCH] FastMath.rewind(p2);
[PATCH] checkFraction(value, 0.0);
[PATCH] ensureAtLeast(p2, q2);
[PATCH] addDenominator(value, 1.0);
[PATCH] setOverflow(true);
[PATCH] moveTo(a1, 0);
[PATCH] sum = Math.abs(value);
[PATCH] add(value, 1.0);
[PATCH] Math.max(p2, overflow);
[PATCH] enlarge(2.0);
[PATCH] m = Math.max(2, m);
[PATCH] super();
[PATCH] e.setOverflow(true);
[PATCH] setDenominator(maxDenominator, n);
[PATCH] addOverflow(1.0);
[PATCH] overflow = Double.abs(value);
[PATCH] if(value < 0.0){
[PATCH] add(value, 1.0 - value);
[PATCH] overflow = Math.abs(value);
[PATCH] enlarge(2.0, overflow);
[PATCH] 1.0 - p2;
[PATCH] Preconditions.checkState(n == 1);
[PATCH] exp(value - p2);
[PATCH] check(value, 0.0);
[PATCH] addOverflow(1.0, overflow);
[PATCH] ensureLeadingZeroes(p2);
[PATCH] setOverflow(2.0);
[PATCH] reciprocal();
[PATCH] removeLeadingZeroes();
[PATCH] e.setInt(0);
[PATCH] addOverflow(p2);
[PATCH] checkOverflow();
[PATCH] checkLeadingZeroes();
[PATCH] ensureDenominator(value);
[PATCH] if(n == maxIterations){
[PATCH] ensureCapacity(p2);
[PATCH] checkSign(value);
[PATCH] ensureSigned(value, true);
[PATCH] setOverflow(p2);
[PATCH] Underflow(value);
[PATCH] printOverflow();
[PATCH] setDenominator(value);
[PATCH] ensureOverflow(p2);
[PATCH] setOverflow(false);
[PATCH] remap();
[PATCH] e.add(value);
[PATCH] addDenominator(value);
[PATCH] print(value);
[PATCH] convert();
[PATCH] overridingOverflow();
[PATCH] invalidate();
[PATCH] push(value);
[PATCH] reduction();
[PATCH] remove();
[PATCH] dup();
[PATCH] rewind();
[PATCH] super(value);
