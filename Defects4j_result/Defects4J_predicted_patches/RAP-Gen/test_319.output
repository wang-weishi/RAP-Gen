[PATCH] readFully(LFH_BUF);
[PATCH] sig = ZipLong.getValue(0);
[PATCH] sig = ZipLong.getValue(SIG);
[PATCH] readFully(ZipLong.LFH_SIG);
[PATCH] sig = ZipLong.getValue(lastStoredEntry);
[PATCH] sig = ZipLong.getValue(LP_SIG);
[PATCH] return current;
[PATCH] sig = ZipLong.getValue(1);
[PATCH] readFully(LFH_SIG);
[PATCH] sig = ZipLong.getValue(signature);
[PATCH] sig = ZipLong.getValue(w, 0);
[PATCH] } else if(!skipRemainderOfArchive){
[PATCH] sig = ZipLong.getValue(cSize);
[PATCH] sig = ZipLong.getNext();
[PATCH] sig = ZipLong.getValue(buf, 0);
[PATCH] sig = ZipLong.getValue(OLD_BINARY);
[PATCH] sig = ZipLong.getValue(buf);
[PATCH] sig = ZipLong.getValue(buf, pos);
[PATCH] sig = ZipLong.getFirstZipSignature();
[PATCH] sig = ZipLong.getFinalSignature();
[PATCH] sig = ZipLong.getSig();
[PATCH] sig = ZipLong.getValue(i);
[PATCH] max = Math.max(0, max);
[PATCH] readFully(LFH_bufF);
[PATCH] cSize = ZipLong.getValue(sig);
[PATCH] sig = ZipLong.getValue(2);
[PATCH] signature = ZipLong.getValue(sig);
[PATCH] Sig = ZipLong.getValue(sig);
[PATCH] sig = ZipLong.getFinalName();
[PATCH] sig = ZipLong.getValue(cb);
[PATCH] sig = ZipLong.getValue(NEW);
[PATCH] sig = ZipLong.getExtra();
[PATCH] sig = ZipLong.getValue(Sig);
[PATCH] sign = ZipLong.getValue(sig);
[PATCH] sig = ZipLong.getSignature();
[PATCH] sig = new ZipLong(0);
[PATCH] sig = ZipLong.getCompressedSignature();
[PATCH] buf.limit(0, 1);
[PATCH] sig = ZipLong.getSIG();
[PATCH] buf.limit(0, 0);
[PATCH] sig = new ZipLong(1);
[PATCH] readFully(LFH_BUFFER);
[PATCH] sig = new ZipLong(SIG);
[PATCH] sig = ZipLong.getValue();
[PATCH] checkExtra();
[PATCH] lastStoredEntry = current.entry;
[PATCH] sig = zipLong.getValue();
[PATCH] return currentEntry;
[PATCH] skipCentralDirectory = false;
[PATCH] writeOutZipLong(sig);
[PATCH] return current.entry;
[PATCH] lastStoredEntry = null;
[PATCH] goTo(sig);
[PATCH] getNextEntry();
[PATCH] return this;
[PATCH] sig.trim();
[PATCH] readFully(sig);
[PATCH] parseExtra();
[PATCH] addExtra();
[PATCH] noCentralDirectory();
[PATCH] goTo(buf);
[PATCH] sig.reset();
[PATCH] writeHeader(sig);
[PATCH] burstOfExtra();
[PATCH] crc.reset();
[PATCH] buf.rewind();
[PATCH] continue;
[PATCH] afterCentralDirectory();
[PATCH] checkZipLong();
[PATCH] reportExtra();
[PATCH] nextEntry();
[PATCH] removeExtra();
[PATCH] cb.reset();
[PATCH] getExtra();
[PATCH] writeExtra();
[PATCH] skipExtra();
[PATCH] endFile();
[PATCH] appendExtra();
[PATCH] gatherExtra();
[PATCH] sig.clear();
[PATCH] closeEntry();
[PATCH] checkNextEntry();
[PATCH] verifyExtra();
[PATCH] loadExtra();
[PATCH] break;
[PATCH] reset();
[PATCH] rewind();
[PATCH] endEntry();
[PATCH] resolveExtra();
[PATCH] findExtra();
[PATCH] countExtra();
[PATCH] endDirectory();
[PATCH] setExtra();
[PATCH] exit();
[PATCH] dup();
[PATCH] ;
[PATCH]
);
;
*/
