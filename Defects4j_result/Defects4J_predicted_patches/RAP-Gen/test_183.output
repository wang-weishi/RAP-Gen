[PATCH] ensureCapacity(buf.length + lineLength);
[PATCH] ensureCapacity(lineLength);
[PATCH] ensureCapacity(len + lineLength);
[PATCH] buf = new byte[len + lineLength]; pos = 0;
[PATCH] ensureCapacity(len + lineSeparator.length);
[PATCH] ensureCapacity(buf.length + lineSeparator.length);
[PATCH] int len = length(); ensureCapacity(len + lineLength);
[PATCH] ensureCapacity(buf.length + lineLength); pos = 0;
[PATCH] ensureCapacity(buf, pos + lineLength);
[PATCH] buf = this.encodeBase64Chunk(lineLength);
[PATCH] buf = this.encodeBase64Partial(lineLength);
[PATCH] b = this.encodeBase64Chunk(buf); pos = 0;
[PATCH] buf = new byte[len + lineLength];
[PATCH] out.putInt(pos, pos + lineLength);
[PATCH] ensureCapacity(len + lineLength); buf = this.buf;
[PATCH] buf = this.encodeChunk(buf, pos, lineLength);
[PATCH] b = this.encodeBase64Partial(lineLength);
[PATCH] ensureCapacity(lineLength); buf = this.buf;
[PATCH] buf = new byte[len + lineSeparator.length]; pos = 0;
[PATCH] buf = new byte[lineLength]; pos = 0;
[PATCH] out.putInt(pos, 0); pos += lineLength;
[PATCH] buf = this.encodeBase64Chunk(buf); pos = 0;
[PATCH] encodeBase64Chunk(buf, pos, lineLength);
[PATCH] ensureCapacity(buf.length);
[PATCH] buf = new byte[(pos + lineLength)];
[PATCH] ensureCapacity(buf.length + lineSeparator.length); pos = 0;
[PATCH] ensureCapacity(len + lineLength); pos = 0;
[PATCH] ensureCapacity(len + lineSeparator.length); pos = 0;
[PATCH] out[pos++] =(byte)(lineLength - 1);
[PATCH] buf = this.encodeBase64Partial(); pos = 0;
[PATCH] endLine = this.encodeBase64Chunk(lineLength);
[PATCH] ensureCapacity(buf, pos);
[PATCH] b = this.encodeBase64Chunk(lineLength);
[PATCH] ensureCapacity(lineLength); pos = 0;
[PATCH] ensureCapacity(len + lineSeparator.length); buf = this.buf;
[PATCH] ensureOpen(); pos = 0;
[PATCH] buf = new byte[pos + lineLength]; pos = 0;
[PATCH] int len = size(); ensureCapacity(len + lineLength);
[PATCH] buf = this.encodeBase64Line(); pos = 0;
[PATCH] ensureSet(buf, pos, lineLength);
[PATCH] buf = this.in.getBytes(); pos = 0;
[PATCH] out.put(buf, pos, lineSeparator.length);
[PATCH] endLine = this.encodeBase64Partial(lineLength);
[PATCH] buf = this.toByteArray(); pos = 0;
[PATCH] buf = new byte[len +(lineLength >> 2), pos];
[PATCH] getChars(0, pos, buf, pos + lineLength);
[PATCH] out.put(buf, pos, lineLength);
[PATCH] ensureCapacity(len + lineSeparator.length); buf = this.out;
[PATCH] super.encode(buf, pos, lineLength);
[PATCH] startPos = pos + lineLength * CHUNK_SIZE;
[PATCH] out.append(new byte[lineLength - 1]);
[PATCH] ensureCopy(buf, pos, lineLength);
[PATCH] startPos = pos + lineLength;
[PATCH] buf = this.encodeLine(); pos = 0;
[PATCH] ensureCapacity(len + lineLength); buf = new byte[len];
[PATCH] out.write(buf, pos, lineLength);
[PATCH] b = this.encodeBase64Chunk(buf, pos);
[PATCH] out = this.encodeBase64Partial(lineLength);
[PATCH] writeOut(buf, pos, lineLength);
[PATCH] ensureCapacity(pos + lineLength);
[PATCH] unshare(buf, pos, lineLength);
[PATCH] buf = new byte[len +(lineLength >> 2)];
[PATCH] b = this.encodeBase64Chunk(buf);
[PATCH] startPos = pos + lineSeparator.length;
[PATCH] startPos = pos + lineLength - 1;
[PATCH] buf = new byte[pos + lineLength];
[PATCH] copy(buf, pos, lineLength);
[PATCH] ensureOpen();
[PATCH] startPos = pos +(lineLength - 1);
[PATCH] startPos = pos + lineSeparator.length();
[PATCH] ensureBounds(buf, pos, len);
[PATCH] ensureCapacity(outPos + lineLength);
[PATCH] buf = balloc(lineLength);
[PATCH] out.putInt(pos, 0);
[PATCH] ensureCapacity(len);
[PATCH] ensureCapacity(lineLength + 1);
[PATCH] ensureCapacity(len + 1);
[PATCH] buf = new byte[lineLength];
[PATCH] buf = clone(); pos = 0;
[PATCH] out.append(lineLength);
[PATCH] out.putShort(pos);
[PATCH] setLineLength(lineLength);
[PATCH] endLine(); pos = 0;
[PATCH] ensureRead(buf, pos);
[PATCH] reserve(buf, pos);
[PATCH] unshare(lineLength);
[PATCH] append(CHUNK_SEPARATOR);
[PATCH] endLine();
[PATCH] ensureSize(lineLength);
[PATCH] ensureMore(lineLength);
[PATCH] mark(lineLength);
[PATCH] ensureAvailable(2);
[PATCH] ensureCacheInitialized();
[PATCH] mark(1);
[PATCH] invalidate();
[PATCH] remaining--;
[PATCH] ensureInitialized();
[PATCH] reset();
[PATCH] mark();
[PATCH] clear();
