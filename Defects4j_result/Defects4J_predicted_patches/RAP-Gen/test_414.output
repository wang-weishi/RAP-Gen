[PATCH] exp = str.substring(expPos + 1);
[PATCH] check NumberFormatException("");
[PATCH] exp = str.substring(0, expPos + 1);
[PATCH] exp = str.substring(0, expPos);
[PATCH] check NumberFormatException(str +" is not a valid number.");
[PATCH] String exp = str.substring(expPos + 1);
[PATCH] Validate.isTrue(expPos < decPos);
[PATCH] exp = str.substring(-expPos + 1);
[PATCH] checkInteger(str,"Negative values should not be possible.");
[PATCH] exp = str.substring(0, expPos - 1);
[PATCH] int expPos = str.indexOf('e')+ 1;
[PATCH] String exp = str.substring(0, expPos);
[PATCH] str = str.substring(0, expPos + 1);
[PATCH] str = str.substring(0, expPos);
[PATCH] mant = str.substring(0, expPos);
[PATCH] exp = str.substring(0, expPos).trim();
[PATCH] checkNaN(str +" is not a valid number.");
[PATCH] checkDigit(str,"Exponent indicator not followed by a digit");
[PATCH] int expPos = str.indexOf('e')- 1;
[PATCH] checkNumber(str +" is not a valid number.");
[PATCH] exp = str.substring(1, expPos + 1);
[PATCH] mant = str.substring(expPos + 1);
[PATCH] checkNumber(str,"Negative values should not be possible.");
[PATCH] exp = str.substring(1, expPos);
[PATCH] checkInteger(str,"Negative values must not be possible.");
[PATCH] Preconditions.checkState(expPos < decPos);
[PATCH] checkInternalName(str,"Exponent indicator not found");
[PATCH] checkLong(str +" is not a valid number.");
[PATCH] checkInvalid(str +" is not a valid number.");
[PATCH] int expPos = str.indexOf('e', expPos);
[PATCH] checkInvalidNumber(str +" should not be null.");
[PATCH] checkDigit(str,"Negative values should not be possible.");
[PATCH] checkInteger(str);
[PATCH] str = str.substring(0, expPos).trim();
[PATCH] exp = str.substring(0, expPos+1);
[PATCH] String exp = str.substring(-expPos + 1);
[PATCH] str = str.substring(expPos + 1);
[PATCH] checkNumber(str, false,"Negative values not possible.");
[PATCH] dec = str.substring(0, expPos);
[PATCH] Validate.isTrue(expPos <= 0);
[PATCH] exp = Integer.toString(expPos + 1);
[PATCH] checkNumber(str, false,"Negative values not allowed.");
[PATCH] checkInteger(str,"Negative value should not be possible.");
[PATCH] exp = String.valueOf(expPos + 1);
[PATCH] checkInRange(str, 0, expPos);
[PATCH] checkDigit(str, false,"Exponent indicator not found");
[PATCH] checkInteger(str,"Negative values not possible.");
[PATCH] check NumberFormatException(str +" should not be null.");
[PATCH] checkNumber(str, true,"Exponent indicator not found");
[PATCH] checkNumber(str, false,"Exponent indicator not found");
[PATCH] checkNumber(str);
[PATCH] exp = str.substring(( expPos + 1);
[PATCH] exp = Integer.toString(expPos);
[PATCH] checkInRange(str, 0, expPos - 1);
[PATCH] checkInteger(str,"Negative values not allowed.");
[PATCH] ex = str.substring(expPos + 1);
[PATCH] checkInteger(expPos,"Exponent indicator not found");
[PATCH] checkNumber(str, false);
[PATCH] exp = str.substring(expPos+1);
[PATCH] de = str.substring(0, expPos);
[PATCH] ensureLeadingZeroes(expPos);
[PATCH] checkNumericValues(expPos, str);
[PATCH] ensureLeadingZeroes(expPos - 1);
[PATCH] checkNumbers(expPos, str);
[PATCH] checkLeadingZeroes(str);
[PATCH] exp = String.valueOf(expPos);
[PATCH] check parseInt(str, 0, expPos);
[PATCH] throw new NumberFormatException("");
[PATCH] checkSymbols(expPos - 1);
[PATCH] checkNegativeValues(expPos, str);
[PATCH] checkNumber(str, 0, expPos);
[PATCH] check NumberFormat().withOffsetParsed(str);
[PATCH] ensureLeadingZeroes(expPos, str);
[PATCH] checkparseInt(str);
[PATCH] checkLong(str);
[PATCH] checkLeadingZeroes(expPos);
[PATCH] checkNegativeValues(expPos);
[PATCH] checkArithmetic(expPos, str);
[PATCH] checkNumericValue(str);
[PATCH] ensureLeadingZeroes(str);
[PATCH] checkNotAValidNumber(str);
[PATCH] checkException("");
[PATCH] checkParseInteger(str);
[PATCH] checkInvalidNumber(str);
[PATCH] exp = Integer.toString(str);
[PATCH] checkArithmetic(str);
[PATCH] checkNegativeZeroes(str);
[PATCH] checkSymbols(expPos);
[PATCH] checkArithmetic(expPos);
[PATCH] checkDigit(str, 0);
[PATCH] checkDigits(expPos);
[PATCH] checkNumbers(expPos);
[PATCH] checkNumericValues(str);
[PATCH] checkNegativeNumbers(str);
[PATCH] checkParseException("");
[PATCH] checkInvalidNumber("");
[PATCH] checkValidNumber(str);
[PATCH] checkDigit(str);
[PATCH] checkNegativeQuotes(str);
[PATCH] check parseInt(str);
