[PATCH] Preconditions.checkNotNull(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof Type);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof TypeVariable);
[PATCH] wildcard = TypeUtils.getWildcardType(actualTypeArgument);
[PATCH] Validate.isTrue(actualTypeArgument instanceof TypeVariable<?>);
[PATCH] wildcard = WildcardType.getInstance(actualTypeArgument);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof Type);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof UnionType);
[PATCH] wildcard = new WildcardType(actualTypeArgument);
[PATCH] wildcard =(WildcardType)actualTypeArgument.getBounds();
[PATCH] wildcard =(( WildcardType)actualTypeArgument).getWildcard();
[PATCH] Preconditions.checkState(actualTypeArgument instanceof UnionType);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof ParameterizedType);
[PATCH] wildcard = Type.getWildcardType(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof WildcardType);
[PATCH] wildcard = WildcardType.getInstance();
[PATCH] Preconditions.checkState(actualTypeArgument instanceof ParameterizedType);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof TypeVariable);
[PATCH] wildcard = boundsOf(actualTypeArgument);
[PATCH] wildcard = contextualActualTypeParameters.get(typeParameter);
[PATCH] wildcard = wildcardOf(( WildcardType)actualTypeArgument);
[PATCH] Validate.isTrue(actualTypeArgument instanceof Class<?>);
[PATCH] wildcard = TypeUtils.toWildcard(actualTypeArgument);
[PATCH] wildcard = wildcardFactory.createWildcardType(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof TypeVariable);
[PATCH] Validate.isTrue(actualTypeArgument instanceof Type);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof NamedType);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof InstanceType);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof NamedType);
[PATCH] Validate.isTrue(actualTypeArgument instanceof UnionType);
[PATCH] wildcard = wildcardType(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof RegularType);
[PATCH] wildcard = wildcardInstance(actualTypeArgument);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof InstanceType);
[PATCH] wildcard =(WildcardType)actualTypeArgument.clone();
[PATCH] wildcard = wildcardOf(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof LocalType);
[PATCH] wildcard = wildCardBoundedType(actualTypeArgument);
[PATCH] Validate.notNull(actualTypeArgument);
[PATCH] wildcard = WildCardBoundedType.getInstance();
[PATCH] Preconditions.checkState(actualTypeArgument instanceof TypeVariable);
[PATCH] typeArgument = getActualTypeArgument(actualTypeArgument);
[PATCH] wildcardType = new WildcardType(actualTypeArgument);
[PATCH] wildcardType = WildcardType.getInstance(actualTypeArgument);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof LocalType);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof RegularType);
[PATCH] wildcard = createWildcardType(actualTypeArgument);
[PATCH] Validate.isTrue(actualTypeArgument instanceof WildcardType);
[PATCH] wildcard = new WildcardType(actualTypeArgument, false);
[PATCH] wildcard = boundsOf(( ParameterizedType)actualTypeArgument);
[PATCH] wildcard = new WildcardType(actualTypeArgument, true);
[PATCH] wildcard = ResolvableType.getInstance(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof EnumType);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof TypeVariableType);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof WildcardType);
[PATCH] wildcard =(WildcardType)actualTypeArgument;
[PATCH] wildcardType = contextualActualTypeParameters.get(typeParameter);
[PATCH] wildcard = boundsOf(actualTypeArgument, typeParameter);
[PATCH] Validate.isTrue(typeArgument instanceof TypeVariable<?>);
[PATCH] wildcard = boundsOf(( Class<?>)actualTypeArgument);
[PATCH] wildcard = parameterizedType.getWildcardType();
[PATCH] wildcard = new WildcardType(actualTypeArgument).getBounds();
[PATCH] wildcard = wildcard.getBounds();
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof GenericType);
[PATCH] actualTypeArgument = getActualType(actualTypeArgument);
[PATCH] wildcard = actualTypeArgument.getWildcardType();
[PATCH] actualTypeArgument = getActualTypeArgument(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof Number);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof Type());
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof TypeParam);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof GenericType);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof GenericParameterType);
[PATCH] Type wildcard = Type.getWildcardType(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument instanceof Integer);
[PATCH] wildcard = wildcardOf(( ParameterizedType)actualTypeArgument);
[PATCH] wildcard = new WildcardType(actualTypeArgument, null);
[PATCH] Validate.isTrue(actualTypeArgument instanceof TypeVariable);
[PATCH] Preconditions.checkState(actualTypeArgument instanceof Type());
[PATCH] wildcard = boundsOf(( WildcardType)actualTypeArgument);
[PATCH] wildcardType = WildcardType.getInstance();
[PATCH] wildcard = WildcardType.construct(actualTypeArgument);
[PATCH] wildcard = WildcardType.createInstance(actualTypeArgument);
[PATCH] wildcardType = getActualTypeArgument(actualTypeArgument);
[PATCH] wildcard = new WildcardType(actualTypeArgument, wildcard);
[PATCH] wildcardType = WildCardBoundedType.getInstance();
[PATCH] wildcard = getActualTypeArgument(actualTypeArgument);
[PATCH] Preconditions.checkArgument(actualTypeArgument == null);
[PATCH] wildcardType = boundsOf(actualTypeArgument);
[PATCH] wildcardType = createWildcardType(actualTypeArgument);
[PATCH] wildcard = typeArgument.getWildcardType();
[PATCH] Preconditions.checkNotNull(wildcardTypeArgument);
[PATCH] Type wildcard = getActualTypeArgument(actualTypeArgument);
[PATCH] wildcard = new WildcardType(getGenericParameterType(i));
[PATCH] wildcard = getParameterWildcard(actualTypeArgument);
[PATCH] contextualActualTypeParameters.remove(typeParameter);
[PATCH] wildcardType = actualTypeArgument.getWildcardType();
[PATCH] wildcardType = wildcardInstance(actualTypeArgument);
[PATCH] assertArgument(actualTypeArgument instanceof TypeVariable<?>);
[PATCH] wildcard = new WildcardType(actualTypeArgument, typeParameter);
[PATCH] Validate.isTrue(actualTypeArgument instanceof ParameterizedType);
