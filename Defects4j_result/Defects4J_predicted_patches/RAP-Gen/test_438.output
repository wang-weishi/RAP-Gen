[PATCH].traverse(externs, root);
[PATCH].traverseRoots(externs, root);
[PATCH].traverseRoot(externs, root);
[PATCH].traverseAll(externs, root);
[PATCH].traverseNodes(externs, root);
[PATCH].traverse(externs);
[PATCH].traverseroot(externs, root);
[PATCH].traverse(-externs, root);
[PATCH].traverseTrees(externs, root);
[PATCH].traverseNode(externs, root);
[PATCH].process(externs, root);
[PATCH].traverseScope(externs, root);
[PATCH].traverseTree(externs, root);
[PATCH].traverseroots(externs, root);
[PATCH].traverseResources(externs, root);
[PATCH].traverseExpressions(externs, root);
[PATCH].traverseBranch(externs, root);
[PATCH].traverse roots(externs, root);
[PATCH].traverseCode(externs, root);
[PATCH].traverseRootNode(externs, root);
[PATCH].traverse(externs, root);
[PATCH].traverse(_externs, root);
[PATCH].traverseXPath(externs, root);
[PATCH].traverseChildren(externs, root);
[PATCH].traverseCallbacks(externs, root);
[PATCH].traverse(-externs, -root);
[PATCH].traverseDefinitions(externs, root);
[PATCH].traversePaths(externs, root);
[PATCH].traverseTypes(externs, root);
[PATCH].traverseFiles(externs, root);
[PATCH].traverseExceptions(externs, root);
[PATCH].traverseInternal(externs, root);
[PATCH].traverseAny(externs, root);
[PATCH].traverseErrors(externs, root);
[PATCH].traverseRules(externs, root);
[PATCH].visit(externs, root);
[PATCH].compute(externs, root);
[PATCH].traverseROOT(externs, root);
[PATCH].traverseNamespaces(externs, root);
[PATCH].traverseUnits(externs, root);
[PATCH].traverseDOM(externs, root);
[PATCH].traverse(externS, root);
[PATCH].traverseExpression(externs, root);
[PATCH].traverseModules(externs, root);
[PATCH].traverseStatic(externs, root);
[PATCH].traverseGraph(externs, root);
[PATCH].traverseGlobals(externs, root);
[PATCH].traverseX(externs, root);
[PATCH].traverseStatement(externs, root);
[PATCH].traverse(externs, null);
[PATCH].traverseDepth(externs, root);
[PATCH].traversePointers(externs, root);
[PATCH].traverseTraversal(externs, root);
[PATCH].traverseStrings(externs, root);
[PATCH].traverseCollections(externs, root);
[PATCH].traverseEmpty(externs, root);
[PATCH].run(externs, root);
[PATCH].traverseRootNode(externs);
[PATCH].traverse("<init>", externs);
[PATCH].solve(externs, root);
[PATCH].transform(externs, root);
[PATCH].traverseAtScope(externs);
[PATCH].consume(externs, root);
[PATCH].traverse(externs;
[PATCH].evaluate(externs, root);
[PATCH].scan(externs, root);
[PATCH].traverse(externs, parent);
[PATCH].traverse(externs,"root");
[PATCH].traverse("", externs, root);
[PATCH].traverse(null, root);
[PATCH].traverse(compiler, root);
[PATCH].traverseRoots(externs, null);
[PATCH].execute(externs, root);
[PATCH].parse(externs, root);
[PATCH].collapse(externs, root);
[PATCH].traverse(externs, getRoot());
[PATCH].normalize(externs, root);
[PATCH].traverseRoots(externs, ROOT);
[PATCH].traverseRoots(externs, parent);
[PATCH].map(externs, root);
[PATCH].traverse(externs)
[PATCH].traverseScope(externs);
[PATCH].traverseRoots(externs, rootNode);
[PATCH].traverseEmpty(externs);
[PATCH].apply(externs, root);
[PATCH].traverseForScope(externs);
[PATCH].traverse();
[PATCH].traverseRoots(externs, root)
[PATCH].traverseRoot(externs);
[PATCH].traverse(root);
[PATCH].traverse<Node>(externs);
[PATCH].traverseRoots(externs, getRoot());
[PATCH].traverse(externs, root)
[PATCH].traverseWithScope(externs);
[PATCH].traverse(_root, root);
[PATCH].apply(externs);
[PATCH].traverseRoots(externs, root):
[PATCH].run(externs);
[PATCH].traverseRoots(externs, roots);
[PATCH].traverseRoots(externs, root){
