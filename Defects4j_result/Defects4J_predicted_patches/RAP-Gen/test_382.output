[PATCH] Vector2D v2D = super.intersection(line1, line2);
[PATCH] Preconditions.checkNotNull(v2D);
[PATCH] v2D = super.intersection(line1, line2);
[PATCH] Vector2D v2D = line2.subtract(line1);
[PATCH] Vector2D v2D = super.intersection(line1, subLine);
[PATCH] v2D = super.intersect(line1, line2);
[PATCH] Vector2D v2D = super.intersect(line1, line2);
[PATCH] Vector2D v2D = Math.abs(v2D);
[PATCH] v2D = checkEndPoints(v2D, false);
[PATCH] Vector2D v2D = VectorUtilities.trim(v2D, false);
[PATCH] v2D = super.intersection(line1, subLine);
[PATCH] v2D = line2.subtract(line1);
[PATCH] v2D = Math.abs(v2D);
[PATCH] Vector2D v2D = line2.toSubSpace(v2D);
[PATCH] Vector2D v2D = super.intersection(v2D, subLine);
[PATCH] v2D = copy(v2D, subLine.getHyperplane());
[PATCH] Vector2D v2D = super.intersect(v2D, subLine);
[PATCH] v2D = checkPoint(v2D, false);
[PATCH] Location loc1 = getX().toSubSpace(v2D);
[PATCH] Vector2D v2D = checkPoint(v2D, false);
[PATCH] Vector2D v2D = subLine.intersect(line1, v2D);
[PATCH] Vector2D v2D = Math.max(v2D, 0.0);
[PATCH] v2D = subLine.getBias().checkPoint(v2D);
[PATCH] Vector2D v2D = line2.trim();
[PATCH] v2D = Math.max(0, v2D);
[PATCH] Preconditions.checkArgument(!v2D.isEmpty());
[PATCH] v2D = Math.min(v2D, 0.0);
[PATCH] v2D = subLine.getHyperplane().trim(v2D);
[PATCH] v2D = VectorUtilities.trim(v2D, false);
[PATCH] Vector2D v2D = Math.min(v2D, 0.0);
[PATCH] Location loc2D = subLine.getRemainingRegion().checkPoint(v2D);
[PATCH] Vector2D v2D = line1.subtract(line2);
[PATCH] Vector2D v2D = super.intersect(line1, subLine);
[PATCH] Vector2D v2D = VectorUtilities.trim(v2D);
[PATCH] Location loc2D = super.getRemainingRegion().checkPoint(v2D);
[PATCH] v2D = super.intersect(line1, subLine);
[PATCH] #if(!v2D.equals(line1)) { return null; }
[PATCH] Vector2D v2D = Math.sqrt(v2D.abs());
[PATCH] v2D = Math.max(v2D.length, 0.0);
[PATCH] Vector2D v2D =(Vector2D)v2D.trim();
[PATCH] Location locD = super.getRemainingRegion().checkPoint(v2D);
[PATCH] v2D = super.intersection(line1, v2D);
[PATCH] v2D = checkCoordinates(v2D);
[PATCH] v2D = super.intersect(line1, v2D);
[PATCH] Vector2D v2D = line2.subtract(line1, subLine);
[PATCH] Vector2D v2D = VectorUtilities.trim(v2D, true);
[PATCH] v2D = checkLimits(v2D, null);
[PATCH] v2D = line2.trim(v2D);
[PATCH] Vector2D v2D = line2.subtract(v2D);
[PATCH] Vector2D v2D = Math.max(0, v2D.length);
[PATCH] v2D = greatestCommonDivisor(v2D, false);
[PATCH] v2D = line2.trim();
[PATCH] V2D = super.intersection(line1, line2);
[PATCH] v2D = Math.abs(v2D - 1.0);
[PATCH] Vector2D v2D = VectorUtilities.trim(v2D, null);
[PATCH] v2D = clip(v2D, 0.0);
[PATCH] new Rectangle2D.Double(0.0, 0.0, v2D);
[PATCH] Preconditions.checkState(!v2D.isEmpty());
[PATCH] v2D = Util.trim(v2D, false);
[PATCH] v2D = checkVector(v2D, false);
[PATCH] v2D = checkEndPoints(v2D, true);
[PATCH] v2D = subLine.intersect(line1, line2);
[PATCH] v2D = checkIntersection(v2D, false);
[PATCH] v2D = checkCoordinates(v2D, false);
[PATCH] Vector2D v2D = checkCoordinates(v2D);
[PATCH] Location loc1 = getName().checkPoint(v2D);
[PATCH] Vector2D v2D = checkPoint(v2D, true);
[PATCH] Vector2D v2D = VectorUtilities.intersect(v2D, line1);
[PATCH] v2D = line2.normalize(v2D);
[PATCH] v2D = Math.trim(v2D);
[PATCH] Vector2D v2D = copy(v2D);
[PATCH] v2D = VectorUtilities.trim(v2D);
[PATCH] Vector2D v2D = Math.max(0, v2D);
[PATCH] v2D = clip(v2D, 0.0f);
[PATCH] v2D = transform(v2D, false);
[PATCH] v2D = line1.trim(v2D);
[PATCH] v2D = checkPoint(v2D, true);
[PATCH] Vector2D v2D = line1.getAbsolutePosition();
[PATCH] Vector2D v2D = line1.trim();
[PATCH] Vector2D v2D = copy();
[PATCH] Vector2D v2D = line2.normalize();
[PATCH] Vector2D v2D = 0.0;
[PATCH] v2D = v2D.trim();
[PATCH] CopyTo(line1, v2D);
[PATCH] v2D = normalize(v2D);
[PATCH] v2D = line1.trim();
[PATCH] v2D = translate(v2D);
[PATCH] v2D = normalise(v2D);
[PATCH] v2D = copy(v2D);
[PATCH] v2D = copy();
[PATCH] Location loc1 = getOffset();
[PATCH] Location loc1 = getX();
[PATCH] angle();
[PATCH] ;
[PATCH] //
[PATCH]
);
;
*/
..
