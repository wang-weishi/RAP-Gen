[PATCH] input.skip(available);
[PATCH] available = input.skip(available);
[PATCH] input.skip(0);
[PATCH] input.skip(numToSkip);
[PATCH] input.seek(0);
[PATCH] input.skip(0, available);
[PATCH] input.setLength(0);
[PATCH] input.skip();
[PATCH] available = input.read(available);
[PATCH] input.skip(available - 1);
[PATCH] input.skip(-numToSkip);
[PATCH] while(input.available() > 0);
[PATCH] input.mark(available);
[PATCH] input.setAvailable(available);
[PATCH] input.setPosition(0);
[PATCH] input.reset();
[PATCH] input.limit(0, available);
[PATCH] while(available > 0);
[PATCH] available = input.limit(available);
[PATCH] input.setRead(available);
[PATCH] available = input.skip(0);
[PATCH] select(input, 0, available);
[PATCH] available -= input.skip(available);
[PATCH] input.setIndex(available - 1);
[PATCH] ioUtils.skip(input, available);
[PATCH] remaining = input.skip(available);
[PATCH] input.skip(available, 0);
[PATCH] input = input.skip(available);
[PATCH] skip(input, 0, available);
[PATCH] input.set(0, -1);
[PATCH] input.setSkip(available);
[PATCH] input.mark(available - 1);
[PATCH] input.setCurrentLength(0);
[PATCH] input.setLen(0);
[PATCH] IOUtils.skip(input, available);
[PATCH] input.setIndex(0);
[PATCH] input.skip(1);
[PATCH] input.setPos(0);
[PATCH] input.setReadable(true);
[PATCH] input.setCursor(0);
[PATCH] available += input.skip(available);
[PATCH] input.skip(available + 1);
[PATCH] available = skip(input, available);
[PATCH] input.setLength(available);
[PATCH] input.limit(available);
[PATCH] input.setCurrentLength(available);
[PATCH] input.fill(0);
[PATCH] input.skip(nToSkip);
[PATCH] input.close();
[PATCH] available -= input.skip(0);
[PATCH] available = Input.skip(available);
[PATCH] input.set(0, 0);
[PATCH] Preconditions.checkNotNull(input);
[PATCH] input.setReaderIndex(0);
[PATCH] input.available(available);
[PATCH] available = read(input, available);
[PATCH] input.limit(available, 0);
[PATCH] input.sets(0, available);
[PATCH] input. skip(available);
[PATCH] input.setavailable(available);
[PATCH] free(available);
[PATCH] input = input.skip();
[PATCH] input.setRead(-1);
[PATCH] input.setSkip(0);
[PATCH] input.read(available);
[PATCH] input.sort(available);
[PATCH] input.mark(0);
[PATCH] source.skip(available);
[PATCH] remaining = input.available();
[PATCH] input = input.read();
[PATCH] freeBuffers();
[PATCH] skip(input, available);
[PATCH] available = skip(available);
[PATCH] reader.skip(available);
[PATCH] freeBuffers(available);
[PATCH] input.skip(10);
[PATCH] stream.skip(available);
[PATCH] input.skip(null);
[PATCH] input.seek(available);
[PATCH] input.skip(Available);
[PATCH] input.release();
[PATCH] input.free();
[PATCH] throw new IOException("");
[PATCH] input.clear();
[PATCH] rewind(available);
[PATCH] input.rewind();
[PATCH] unshare(available);
[PATCH] read(input);
[PATCH] select(input);
[PATCH] input.trim();
[PATCH] rewind();
[PATCH] skip(input);
[PATCH] input.shutdown();
[PATCH] releaseBuffers();
[PATCH] free();
[PATCH] ensureOpen();
[PATCH] release();
[PATCH] close();
[PATCH] reset();
);
