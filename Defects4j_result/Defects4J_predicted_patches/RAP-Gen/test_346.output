[PATCH] nextName();
[PATCH] expect(JsonToken.NULL);
[PATCH] super.skipValue();
[PATCH] loadMoreGuaranteed();
[PATCH] readName();
[PATCH] nextValue();
[PATCH] push(JsonScope.EMPTY);
[PATCH] expect(JsonToken.NAME);
[PATCH] advance();
[PATCH] nextLiteral();
[PATCH] Validate.notNull(stack);
[PATCH] init(stackSize - 1);
[PATCH] skipStack();
[PATCH] unshare(2);
[PATCH] addOp("=", true);
[PATCH] addOp("=", false);
[PATCH] nextToken();
[PATCH] initIndex();
[PATCH] skip();
[PATCH] unshare(1);
[PATCH] nextNonName();
[PATCH] getTokenStream().skip();
[PATCH] skipName();
[PATCH] push(null);
[PATCH] push(JsonScope.OTHER);
[PATCH] checkNextValue();
[PATCH] pop();
[PATCH] getNextName();
[PATCH] checkNextName();
[PATCH] parseName();
[PATCH] checkLenient();
[PATCH] unshare(stackSize);
[PATCH] push(JsonToken.NULL);
[PATCH] fillStack();
[PATCH] traverse();
[PATCH] fillStack(stackSize);
[PATCH] push(JsonScope.UNKNOWN);
[PATCH] throw new IllegalStateException("");
[PATCH] readFieldName();
[PATCH] getNext();
[PATCH] skipping();
[PATCH] push(JsonScope.CLOSED);
[PATCH] skipChildren();
[PATCH] pop(1);
[PATCH] findName();
[PATCH] setCurrentName(getText());
[PATCH] initIndexMap();
[PATCH] readLiteral();
[PATCH] initEntry();
[PATCH] matcher.expectComma();
[PATCH] reset();
[PATCH] decodeName();
[PATCH] nextObject();
[PATCH] getNextValue();
[PATCH] setCurrentName(null);
[PATCH] popName();
[PATCH] peek();
[PATCH] readExpression();
[PATCH] filterStack(stackSize);
[PATCH] rewind();
[PATCH] validate();
[PATCH] getCurrentToken();
[PATCH] filterStack();
[PATCH] checkPeek();
[PATCH] readValue();
[PATCH] findNextName();
[PATCH] while(!peek();
[PATCH] readStack();
[PATCH] removeLastChar();
[PATCH] nextExpression();
[PATCH] parseFieldName();
[PATCH] nextExpr();
[PATCH] matchName();
[PATCH] getNextEntry();
[PATCH] this.skipStack();
[PATCH] unshare(true);
[PATCH] decodeLiteral('=');
[PATCH] fillStack(1);
[PATCH] setCurrentName("");
[PATCH] nextName(null);
[PATCH] nextField();
[PATCH] consume();
[PATCH] collectStack();
[PATCH] unshare(8);
[PATCH] this.skip();
[PATCH] loadStack();
[PATCH] findSeparator();
[PATCH] decodeLiteral('-');
[PATCH] popByName();
[PATCH] skipExpr();
[PATCH] skipInternal();
[PATCH] skipObject();
[PATCH] matcher.expectValue();
[PATCH] lookAhead();
[PATCH] unwrap();
[PATCH] initPath();
[PATCH] popParser();
[PATCH] matcher.expectNull();
[PATCH] initIterator();
[PATCH] decodeLiteral();
