[PATCH] int whole = getNumeratorFormat().parse(source, pos);
[PATCH] int startIndex = pos.getIndex();
[PATCH] int whole = getWholeFormat().parse(source, pos);
[PATCH] int startIndex = pos.getIndex();
[PATCH] Number whole = getNumeratorFormat().parse(source, pos);
[PATCH] Integer whole = getNumeratorFormat().parse(source, pos);
[PATCH] while(num.intValue() < 0){ pos.setIndex(initialIndex);
[PATCH] while(num.intValue() == 0){ pos.setIndex(initialIndex);
[PATCH] num = getNumeratorFormat().parse(source, pos);
[PATCH] while(num.intValue()!= 0){ pos.setIndex(initialIndex);
[PATCH] while(num.intValue() > 0){ pos.setIndex(initialIndex);
[PATCH] number whole = getNumeratorFormat().parse(source, pos);
[PATCH] while(num.intValue() < 1){ pos.setIndex(initialIndex);
[PATCH] final int whole = getNumeratorFormat().parse(source, pos);
[PATCH] while(pos.next()!= null){ pos.setIndex(initialIndex);
[PATCH] int whole = getNumeratorFormat().parse(source, pos); if("");
[PATCH] this.whole = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getDenominatorFormat().parse(source, pos);
[PATCH] int whole =(( Number)num.doubleValue()).intValue();
[PATCH] while(num.isNegative()){ pos.setIndex(initialIndex);
[PATCH] Number whole = getWholeFormat().parse(source, pos);
[PATCH] Integer whole = getWholeFormat().parse(source, pos);
[PATCH] int whole = getFloorFormat().parse(source, pos);
[PATCH] while(pos.hasNext()){ pos.setIndex(initialIndex);
[PATCH] int whole = getNumeratorFormat().parse(( String)source, pos);
[PATCH] while(num.abs() < 1){ pos.setIndex(initialIndex);
[PATCH] number whole = getWholeFormat().parse(source, pos);
[PATCH] int whole = WholeFormat.parse(source, pos);
[PATCH] int whole = getWholeFormat().parse(source, pos); if("");
[PATCH] int whole = getNumeratorFormat().parse(source, pos); parsePos(pos);
[PATCH] int whole = getNumerator().intValue();
[PATCH] parseAndIgnoreWhitespace(source, pos);
[PATCH] boolean whole = getNumeratorFormat().parse(source, pos);
[PATCH] return new Fraction(num.intValue(), den.intValue());
[PATCH] int whole = getNumeratorFormat().parse(source,pos);
[PATCH] int whole = this.numeratorFormat().parse(source, pos);
[PATCH] int startingIndex = pos.getIndex();
[PATCH] Int whole = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getNumeratorFormat().parseInt(source, pos);
[PATCH] return new Fraction(whole.intValue(), num.intValue());
[PATCH] pos.setIndex(initialIndex);
[PATCH] final int whole = getWholeFormat().parse(source, pos);
[PATCH] int whole = getNumeratorFormatter().parse(source, pos);
[PATCH] int whole =WholeFormat.parse(source, pos);
[PATCH] int wh = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getNumeratorFormat().parse(source, pos.getIndex());
[PATCH] BigInteger whole = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getNumeratorFormat().parse(source, null, pos);
[PATCH] intwhole = getNumeratorFormat().parse(source, pos);
[PATCH] n = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getNumerator();
[PATCH] int whole = numeratorFormat().parse(source, pos);
[PATCH] int w = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getSlopeFormat().parse(source, pos);
[PATCH] boolean whole = getWholeFormat().parse(source, pos);
[PATCH] int whole = this.wholeFormat.parse(source, pos);
[PATCH] int whole = getNumerator().parse(source, pos);
[PATCH] int whole = getNumWholeFormat().parse(source, pos);
[PATCH] whole = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getwholeFormat().parse(source, pos);
[PATCH] int whole = getSumFormat().parse(source, pos);
[PATCH] int whole = getNumberFormat().parse(source, pos);
[PATCH] int num = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getWHOLEFormat().parse(source, pos);
[PATCH] int count = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = getHourFormat().parse(source, pos);
[PATCH] return new Fraction(num.intValue(), whole);
[PATCH] double whole = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = isWholeFormat(source, pos);
[PATCH] value whole = getNumeratorFormat().parse(source, pos);
[PATCH] int whole = findWholeFormat(source, pos);
[PATCH] final int startIndex = pos.getIndex();
[PATCH] int whole = numerFormat().parse(source, pos);
[PATCH] int whole = getCountFormat().parse(source, pos);
[PATCH] int whole = getSampleFormat().parse(source, pos);
[PATCH] pos.setIndex(startIndex);
[PATCH] int whole = determineWholeFormat(source, pos);
[PATCH] int initialIndex = pos.getIndex();
[PATCH] int whole = num.intValue();
[PATCH] int whole =(( Number)den).intValue();
[PATCH] try { int startIndex = pos.getIndex();
[PATCH] int startIndex = pos.getIndex() + 1;
[PATCH] int index = pos.getIndex();
[PATCH] startIndex = pos.getIndex();
[PATCH] int whole = Integer.parseInt(source);
[PATCH] pos.setIndex(initialIndex + 1);
[PATCH] int whole = getAsNumber().intValue();
[PATCH] int endIndex = pos.getIndex();
[PATCH] index = pos.getIndex();
[PATCH] int originalIndex = pos.getIndex();
[PATCH] int startIndex = pos.getEndIndex();
[PATCH] i = pos.getIndex();
[PATCH] int whole = getNumeratorFormat().parse();
[PATCH] int start = pos.getIndex();
[PATCH] int whole = getMean();
[PATCH] int startPosition = pos.getIndex();
[PATCH] int whole = den.intValue();
[PATCH] int whole = getMutator();
[PATCH] n = num.intValue();
[PATCH] setIndex(initialIndex);
