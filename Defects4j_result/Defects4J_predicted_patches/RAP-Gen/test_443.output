[PATCH] int aliasingGets = parent.aliasingGets();
[PATCH] int aliasingGets = parent.getAliasingGets();
[PATCH] Type type = parent.getType();
[PATCH] boolean aliasingGets = parent.aliasingGets();
[PATCH] int aliasingGets = parent.aliasingGetsCount();
[PATCH] int aliasingGets = getAliasingGets();
[PATCH] Type type = parent.getValueType();
[PATCH] int type = parent.getType();
[PATCH] final int aliasingGets = parent.aliasingGets();
[PATCH] int aliasingGets = nameMap.size();
[PATCH] Type type = node.getType();
[PATCH] int aliasingGets = parent.aliasingGets;
[PATCH] parent = parent.getImplicitPrototype();
[PATCH] int aliasingGets = parent.isAliasing();
[PATCH] int aliasingGets = getName().aliasingGets();
[PATCH] int aliasingGets = parent.hasAliasingGets();
[PATCH] int aliasingGets = getName().length() - 1;
[PATCH] int aliasingGets = parent.findAliasingGets();
[PATCH] int aliasingGets = NodeUtil.getAliasingGets();
[PATCH] boolean aliasingGets = parent.getAliasingGets();
[PATCH] type = parent.getType();
[PATCH] int aliasingGets = name.length();
[PATCH] int aliasingGets = parent.isAliasingGet();
[PATCH] int aliasingGets = name.length() - 1;
[PATCH] int aliasingGets = getLargerAliasingGets();
[PATCH] int aliasingGets = parent.getaliasingGets();
[PATCH] final Type type = parent.getType();
[PATCH] int aliasingGets = getName().indexOf("aliasing");
[PATCH] Type type = getType(node.getFirstChild());
[PATCH] Preconditions.checkState(type == Token.ASSIGN);
[PATCH] Type type = getValueType(node.getFirstChild());
[PATCH] Type type = getNameType(node.getFirstChild());
[PATCH] int aliasingGets = this.aliasingGets();
[PATCH] Class<?> type = parent.getType();
[PATCH] int aliasingGets = childCount() - 1;
[PATCH] int aliasingGets = compiler.getAliasingGets();
[PATCH] Type type = getValueType(node);
[PATCH] int aliasingGets = parent.shouldAliasingGets();
[PATCH] int aliasingGets = getNameCount() - 1;
[PATCH] int aliasingGets = parent.getAliases();
[PATCH] int aliasingGets = scope.aliasingGets();
[PATCH] int type = node.getType();
[PATCH] parent = parent.getImplicitParent();
[PATCH] Type type = nameObj.getType();
[PATCH] int aliasingGets = getName().length();
[PATCH] int aliasingGets = parent.isAliasingCall();
[PATCH] int aliasingGets = getAliasingGets();
[PATCH] int aliasingGets = findAliasingGets();
[PATCH] int aliasingGets = getaliasingGets();
[PATCH] int type = name.charAt(0);
[PATCH] Type type = name.getType();
[PATCH] int aliasingGets = this.aliasingGetsCount();
[PATCH] Type type = parent.getKeyType();
[PATCH] Type type = inferConcreteType(parent, node);
[PATCH] Type type = getType(node);
[PATCH] Type type = Type.getObjectType(parent);
[PATCH] int aliasingGets = name.indexOf('.');
[PATCH] Type type = inferConcreteType(node, parent);
[PATCH] int aliasingGets = key.length();
[PATCH] Type type = parent.getContentType();
[PATCH] Type type = inferConcreteType(node);
[PATCH] Node type = parent.getType();
[PATCH] int aliasingGets = getNamealiasingGets();
[PATCH] Type type = inferConcreteType(parent);
[PATCH] int type = parent.getValueType();
[PATCH] int aliasingGets = getNameAliasingGets();
[PATCH] Type type = getValueType();
[PATCH] Type type = getNameType(node);
[PATCH] Name type = nameObj.getType();
[PATCH] int aliasingGets = getNameCount();
[PATCH] Node type = nameObj.getType();
[PATCH] parent = parent.getImmediateParent();
[PATCH] parent = parent.getParent();
[PATCH] type = parent.getValueType();
[PATCH] Preconditions.checkNotNull(type);
[PATCH] Name type = parent.getType();
[PATCH] Type type = getNameType(name);
[PATCH] int type = name.getType();
[PATCH] Type type = getType();
[PATCH] Type type = this.getValueType();
[PATCH] Token type = parent.getType();
[PATCH] Type type = this.getType();
[PATCH] int type = getType(node);
[PATCH] t = parent.getType();
[PATCH] Type type = getValueNodeType();
[PATCH] type = node.getType();
[PATCH] Type type = nodeType(node);
[PATCH] type = getValueType(node);
[PATCH] int type = getValueType();
[PATCH] Type type = typeOf(node);
[PATCH] int type = getValueNodeType();
[PATCH] type = getType(node);
[PATCH] int type = getType();
[PATCH] Node type = getValueType();
[PATCH] type = getValueType();
[PATCH] Type type = nodeType();
);
;
());
*/
