[PATCH] val1 = FieldUtils.safeNegate(val1);
[PATCH] val1 = -1 * val1;
[PATCH] val1 = FieldUtils.safeMultiply(val1, val2);
[PATCH] val2 = FieldUtils.safeMultiply(val1, val2);
[PATCH] val1 = -(long)Math.round(val1);
[PATCH] val1 = -1 *(val1 >> 1);
[PATCH] val2 = FieldUtils.safeMultiply(-1, val1);
[PATCH] val1 = Math.max(0L, val1);
[PATCH] val2 = Math.abs(val1);
[PATCH] val1 = FieldUtils.safeMultiply(-val1, val2);
[PATCH] val1 = FieldUtils.safeMultiply(val1, -1);
[PATCH] val2 = -1 * Math.pow(10, val2);
[PATCH] val1 = -1 * val1 + Integer.MIN_VALUE;
[PATCH] val1 = -(long)Math.abs(val1);
[PATCH] val1 =(long)Math.round(val1);
[PATCH] val2 = Math.max(0, val2);
[PATCH] val1 = -(long)roundFloor(val1);
[PATCH] val1 = FieldUtils.safeMultiply(val1, 0L);
[PATCH] val1 = -1 * val1.longValue();
[PATCH] val2 = -1 * val1 + Integer.MIN_VALUE;
[PATCH] val1 = -1 *(long)val1;
[PATCH] val2 = Math.max(1, val2);
[PATCH] val1 = -(long)Math.rint(val1);
[PATCH] checkOverflow(val1, val2);
[PATCH] val1 = -1 *(val1 / val2);
[PATCH] val1 = FieldUtils.safeSubtract(val1, val2);
[PATCH] val1 =(( Number)val1).longValue();
[PATCH] Preconditions.checkNotNull(val1);
[PATCH] val1 = Integer.MIN_VALUE + val1;
[PATCH] val1 = FieldUtils.safeAdd(val1, -1);
[PATCH] val2 =(int)Math.abs(val1);
[PATCH] checkNotMultiply(val1, val2);
[PATCH] val1 = FieldUtils.safeAdd(val1, val2);
[PATCH] val1 = Double.NaN(val1);
[PATCH] val2 = -1 *(val1 >> 1);
[PATCH] val1 = Math.max(0, val1);
[PATCH] val1 = -1 *(val1 + val2);
[PATCH] val1 = -1 * val1 +(long)val2;
[PATCH] val1 = ~val1.longValue();
[PATCH] val2 = Math.pow(10, val2);
[PATCH] val1 = Math.abs(val1);
[PATCH] val2 = -1 * val1;
[PATCH] val2 = FieldUtils.safeMultiply(val1, -1);
[PATCH] val2 =(int)Math.round(val1);
[PATCH] val1 =(long)Math.abs(val1);
[PATCH] Preconditions.checkNotNull(val1,"Invalid value");
[PATCH] checkArithmetic(val1, val2);
[PATCH] val2 =(val2 == 0? -1 : val2);
[PATCH] val2 = -1 * val1.longValue();
[PATCH] val2 =(val2 == 1? 0L : val2);
[PATCH] val1 = Integer.MIN_VALUE - val1;
[PATCH] val1 =(long)Math.pow(-1, val2);
[PATCH] val2 = FieldUtils.safeMultiply(val1, 0L);
[PATCH] val1 =(-1 * val1);
[PATCH] val1 = FieldUtils.safeMultiply(-val1, 0L);
[PATCH] val1 = -1 *(val1 + 1);
[PATCH] val2 = -1 * Integer.MIN_VALUE + 1;
[PATCH] val1 = FieldUtils.safeMultiply(val1, 1);
[PATCH] val1 = -1 * val1 + get(val1);
[PATCH] val1 = roundFloor(val1);
[PATCH] val2 = Math.max(0L, val2);
[PATCH] val1 = FieldUtils.safeToInt(val1);
[PATCH] val1 = Double.MIN_VALUE + val1;
[PATCH] val1 = FieldUtils.safeAdd(val1, 0L);
[PATCH] val2 = Math.min(1, val2);
[PATCH] check(val1, 0.0);
[PATCH] val2 = Math.min(0L, val1);
[PATCH] val2 =(val2 == 0? 1L : val2);
[PATCH] checkNotMultiply(val1, val2);
[PATCH] val2 = -1 *(val1 / val2);
[PATCH] val2 = Math.max(0, val1);
[PATCH] Preconditions.checkState(val1 == 0L);
[PATCH] val1 = val1 * -1;
[PATCH] val2 = Math.round(val1);
[PATCH] val2 = -1 * get(val1);
[PATCH] val1 = FieldUtils.safeAdd(val1, 1);
[PATCH] val1 = minus(val1, val2);
[PATCH] val1 = -1 * get(val1);
[PATCH] Preconditions.checkNotNull(val1,"Negative value");
[PATCH] val1 = -1 * val1 +(long)0L;
[PATCH] val2 = -1 * Integer.MIN_VALUE;
[PATCH] val1 = Integer.MIN_VALUE;
[PATCH] val2 = Integer.parseInt(val1);
[PATCH] check(val1, 0L);
[PATCH] val1 = -2 * val1;
[PATCH] val2 = Integer.MIN_VALUE;
[PATCH] checkMultiplication(val1, val2);
[PATCH] val2 = roundFloor(val1);
[PATCH] val2 = Integer.toString(val1);
[PATCH] check(val1, val2);
[PATCH] val1 = Double.MIN_VALUE;
[PATCH] validate(val1, val2);
[PATCH] val1 = negate(val1);
[PATCH] check(val1, 0);
[PATCH] val1 = pop();
[PATCH] val1 =
[PATCH] checkOverflow();
[PATCH] val2 =
[PATCH] check();
);
