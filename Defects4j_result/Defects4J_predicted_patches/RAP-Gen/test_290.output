[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt, start, end);
[PATCH] _tokenIncomplete = _isTokenIncomplete(start, end);
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceName());
[PATCH] _currTokenIncomplete = _isTokenIncomplete(ctxt.getSourceReference());
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt);
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt, start, end);
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt, ctxt.getSourceReference());
[PATCH] _currTokenIncomplete = _isTokenIncomplete(ctxt, start, end);
[PATCH] _currTokenIncomplete = _isTokenIncomplete(ctxt.getSourceName());
[PATCH] _tokenIncomplete = _isTokenizer(ctxt, ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _isTokenIncomplete(_inputPtr, start, end);
[PATCH] _tokenIncomplete = _skipWSOrEnd();
[PATCH] _parsingContext.setCurrentLength(start); _tokenIncomplete = false;
[PATCH] _tokenIncomplete = ctxt.getTokenIncomplete();
[PATCH] _tokenIncomplete = _checkTokenIncomplete(ctxt, start, end);
[PATCH] _tokenIncomplete =(in == null)? false : in.mark();
[PATCH] _ioContext.setErrorIndex(start); _tokenIncomplete = false;
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt.getSourceName());
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceStart());
[PATCH] _tokenIncomplete =(ctxt.getTokenIncomplete() == Token.EOF);
[PATCH] _parsingContext = _parsingContext.getRootContext();
[PATCH] _tokenIncomplete = _isCurrentTokenIncomplete(ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _isTokenizer(ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceType());
[PATCH] _tokenIncomplete = _isTokenizer(start, end);
[PATCH] _tokenIncomplete = _isNextTokenIncomplete(ctxt, start, end);
[PATCH] _parsingContext.setCurrentLength(start);
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceCode());
[PATCH] _tokenIncomplete =(in == null)? false : in.markSupported();
[PATCH] _tokenIncomplete =(in == null)? false : in.isSupported();
[PATCH] _tokenIncomplete =(tokens == null)? false : tokens.isEmpty();
[PATCH] _tokenIncomplete = _readToken(ctxt, ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _readToken(ctxt, ctxt.getSourceName());
[PATCH] _parsingContext = _parsingContext.createChildArrayContext();
[PATCH] _tokenIncomplete = _isNextTokenIncomplete(start, end);
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getConfig());
[PATCH] _tokenIncomplete = _isTokenIncomplete(start, end, ctxt);
[PATCH] _tokenIncomplete = isTokenizer(ctxt.getSourceReference());
[PATCH] _currTokenIncomplete = _isTokenIncomplete(start, end);
[PATCH] _tokenIncomplete = _skipWSOrEnd(_inputPtr, end);
[PATCH] _tokenIncomplete = _isTokenIncomplete(_inputPtr, end);
[PATCH] _tokenIncomplete = _initTokenIncomplete(ctxt.getSourceName());
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceLine());
[PATCH] _tokenIncomplete = _initTokenIncomplete(ctxt.getSourceReference());
[PATCH] _tokenIncomplete = _checkTokenIncomplete(ctxt);
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt.getSourceLocation());
[PATCH] _tokenIncomplete =(in == null)? false : in.read();
[PATCH] _currTokenIncomplete = _isTokenIncomplete(ctxt);
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt, _inputPtr, end);
[PATCH] _tokenIncomplete = checkTokenIncomplete(ctxt, start, end);
[PATCH] _parsingContext = ctxt.getRootContext();
[PATCH] _tokenIncomplete = _isTokenizer(ctxt);
[PATCH] _ioContext.setTokenIncomplete(false);
[PATCH] _tokenIncomplete = _isTokenIncomplete(start);
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt, features);
[PATCH] _currTokenIncomplete = _skipWSOrEnd();
[PATCH] _tokenIncomplete = _isTokenIncomplete(ctxt, pos);
[PATCH] _ioContext = ctxt.getRootContext();
[PATCH] _tokenIncomplete = _hasTokenIncomplete(start, end);
[PATCH] _parsingContext.setTokenIncomplete(false);
[PATCH] _tokenIncomplete = isTokenIncomplete(start, end);
[PATCH] _tokenIncomplete = super.isTokenIncomplete();
[PATCH] _tokenIncomplete = _isCurrentTokenIncomplete();
[PATCH] _parsingContext = _parsingContext.getParent();
[PATCH] _tokenIncomplete = _in.markSupported();
[PATCH] _ioContext.setCurrentLength(start);
[PATCH] _parsingContext.setErrorIndex(start);
[PATCH] _tokenIncomplete = isTokenIncomplete(ctxt);
[PATCH] _ioContext.setErrorIndex(start);
[PATCH] _tokenIncomplete = ctxt.allocTokenIncomplete();
[PATCH] _tokenIncomplete = _in.isEmpty();
[PATCH] _parsingContext = ctxt.getParserContext();
[PATCH] _parsingContext.setCurrentName(start);
[PATCH] _tokenIncomplete = _isTokenIncomplete();
[PATCH] _parser = _createParser(ctxt);
[PATCH] _tokenIncomplete = _hasMoreTokens();
[PATCH] _tokenIncomplete = _in.mark();
[PATCH] _ioContext.setPosition(start);
[PATCH] _ioContext.setCodec(this);
[PATCH] _ioContext.clearTokenIncomplete();
[PATCH] _tokenIncomplete = _isEmpty();
[PATCH] _parsingContext.clearTokenIncomplete();
[PATCH] _init();
[PATCH] _tokenIncomplete = _isDone();
[PATCH] _parsingContext.reset();
[PATCH] _setTokenIncomplete(false);
[PATCH] _closeInput();
[PATCH] _ioContext.reset();
[PATCH] _reset();
[PATCH] _tokenIncomplete = false;
[PATCH] _init(ctxt);
[PATCH] _checkTokenIncomplete();
[PATCH] _finishString();
[PATCH] _clearBuffer();
[PATCH] _finishInput();
[PATCH] _openStream();
[PATCH] _skipWS();
[PATCH] _initialize();
