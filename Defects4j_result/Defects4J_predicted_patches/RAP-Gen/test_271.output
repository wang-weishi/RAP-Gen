[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.constructTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _idResolver.constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _property);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type);
[PATCH] type = ctxt.constructTypeFactory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = _factoryConfig.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _defaultImpl.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType2(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getConfig().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _idResolver.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType('', _baseType, type.getRawClass());
[PATCH] type = _baseType.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _config.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeInfoFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _getTypeFactory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = _config.getTypeFactory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = _classFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType._baseType, type.getRawClass());
[PATCH] type = _factoryFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType('/', _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _defaultImpl);
[PATCH] type = _factoryFactory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = _beanType.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _classFactory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _property.getRawClass());
[PATCH] type = ctxt.getClassFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructNativeType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _class);
[PATCH] type = ctxt.findTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType("", _baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _beanType.getRawClass());
[PATCH] type = ctxt.getConfig().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType('any', _baseType.getRawClass());
[PATCH] type = ctxt.getFieldTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _factoryConfig().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getGenericTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _genericType.getRawClass());
[PATCH] type = _context.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _objectIdReader.constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type._idResolver);
[PATCH] type = _registry.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.objectTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getGenericClass());
[PATCH] type = _idResolver.constructType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _rawClass);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _property).getRawClass();
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _unknownType());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType('custom', _baseType.getRawClass());
[PATCH] type = _objectTypeFactory.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _primaryType.getRawClass());
[PATCH] type =ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(-1, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _property).getRawClass());
[PATCH] type = _factory.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecificizedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type._rawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type._property);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _valueClass);
[PATCH] type = _factoryConfig().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _baseType.getTypeFactory().constructSpecializedType(type, _idResolver);
[PATCH] type = _idFactory.constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = _objectIdReader.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _beanType.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = _factory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.findClassName());
[PATCH] type = _factory.constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _objectIdReader);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(type, _baseType.getClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver);
[PATCH] type = _factory().constructSpecializedType(type, _baseType.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(type, _baseType);
[PATCH] type = _classFactory.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.findReferenceName());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getInternalName());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType("java.lang.Object", _baseType);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.generator());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.class);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, typeId, _defaultImpl);
[PATCH] type = ctxt.constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(type, _baseType.getGenericClass());
[PATCH] type = _baseType.getTypeFactory().constructSpecializedType(type, _property);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, typeId, _property);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.enumerationType());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.findTypeName());
[PATCH] type = _baseType.getTypeFactory().constructSpecializedType(type, _defaultImpl);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _defaultImpl.getClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, _idResolver.findValueClass());
[PATCH] type = ctxt.converterInstance(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType("java/lang/Object", _baseType);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType("java.util.RandomAccess", _baseType);
[PATCH] type = ctxt.constructTypeFactory().constructSpecializedType(_baseType, _property);
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type;
[PATCH] type = ctxt.getTypeFactory().constructSpecializedType(_baseType, name);
