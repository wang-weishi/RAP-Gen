[PATCH] Preconditions.checkNotNull(child);
[PATCH] Preconditions.checkState(child.isString());
[PATCH] Preconditions.checkState(child.isQualifiedName());
[PATCH] child = child.getNext();
[PATCH] Preconditions.checkArgument(NodeUtil.isName(child));
[PATCH] Preconditions.checkState(NodeUtil.isName(child));
[PATCH] child.setJSType(getNativeType(ARRAY_TYPE));
[PATCH] Preconditions.checkState(typeSystem.isObjectType(child));
[PATCH] Preconditions.checkState(NodeUtil.isGet(child));
[PATCH] Node qName = child.getNext();
[PATCH] Preconditions.checkState(!child.isString());
[PATCH] Preconditions.checkState(NodeUtil.isString(child));
[PATCH] Preconditions.checkArgument(NodeUtil.isString(child));
[PATCH] Preconditions.checkState(child.isGetProp());
[PATCH] child.setJSType(getNativeType(NUMBER_TYPE));
[PATCH] checkState(child.getType() == Token.STRING);
[PATCH] Preconditions.checkState(child.getType() instanceof String);
[PATCH] Preconditions.checkState(child.isObjectLitType());
[PATCH] child.setJSType(getNativeType(STRING_TYPE));
[PATCH] Preconditions.checkState(child.type == Token.STRING);
[PATCH] Preconditions.checkState(typeSystem.isQualifiedName(child));
[PATCH] Preconditions.checkState(!child.isQualifiedName());
[PATCH] n.setString(child.getString());
[PATCH] Preconditions.checkArgument(NodeUtil.isGet(child));
[PATCH] Preconditions.checkState(child.isObjectLitKey());
[PATCH] Preconditions.checkState(NodeUtil.isQualifiedName(child));
[PATCH] Preconditions.checkArgument(NodeUtil.isQualifiedName(child));
[PATCH] child.setJSType(getNativeType(UNKNOWN_TYPE));
[PATCH] Preconditions.checkArgument(NodeUtil.isValue(child));
[PATCH] Preconditions.checkState(NodeUtil.isValue(child));
[PATCH] Preconditions.checkState(child.getType() instanceof Token);
[PATCH] Preconditions.checkArgument(child.isString());
[PATCH] Preconditions.checkState(child.isName());
[PATCH] child.setString(getProp(Node.NAME_PROP));
[PATCH] child.setString(escape(child.getString()));
[PATCH] Preconditions.checkState(compiler.isNormalized());
[PATCH] Preconditions.checkState(child.getType().isString());
[PATCH] Preconditions.checkState(child.isNumeric());
[PATCH] Preconditions.checkState(isObjectLitKey(child));
[PATCH] child.setString(idFromValue(t, child));
[PATCH] Preconditions.checkNotNull(child, child.getType());
[PATCH] child.setString(Node.getString(child));
[PATCH] Node qName = child.getFirstChild();
[PATCH] n.setJSType(getType(child));
[PATCH] Preconditions.checkState(!child.isObjectLitType());
[PATCH] Preconditions.checkState(child.isJSType());
[PATCH] Preconditions.checkArgument(child.isQualifiedName());
[PATCH] Preconditions.checkState(!child.isLiteralValue());
[PATCH] Preconditions.checkState(child.isLiteralValue());
[PATCH] Preconditions.checkArgument(child.getType().isString());
[PATCH] Preconditions.checkState(t.inGlobalScope());
[PATCH] Preconditions.checkArgument(!child.isString());
[PATCH] Preconditions.checkState(child.isNext());
[PATCH] child.setString(n.getString());
[PATCH] Node qName = child.getType();
[PATCH] child.setJSType(getType(n));
[PATCH] Preconditions.checkState(child.isPrimitive());
[PATCH] Preconditions.checkState(n.isQualifiedName());
[PATCH] t.getCompiler().reportCodeChange();
[PATCH] child.setIsObjectLit(true);
[PATCH] Preconditions.checkState(isQualifiedName(child));
[PATCH] Preconditions.checkState(isName(child));
[PATCH] child.setString(qName);
[PATCH] t.getCompiler().report(child);
[PATCH] final Node qName = child.getNext();
[PATCH] child.setNext(n);
[PATCH] Preconditions.checkChild(child, n);
[PATCH] final Node qName = child.getType();
[PATCH] Node qName = child.getString();
[PATCH] c = child.getNext();
[PATCH] ref = child.getNext();
[PATCH] Token convention = child.getType();
[PATCH] child.setObjectLit(n);
[PATCH] ref.validate(t, child);
[PATCH] Child qName = child.getNext();
[PATCH] n = child.getNext();
[PATCH] Token type = child.getType();
[PATCH] child.setString("$");
[PATCH] int qName = child.getType();
[PATCH] child.setString("value");
[PATCH] child.setString(qname);
[PATCH] child.setString(nodeName);
[PATCH] child.setString("--");
[PATCH] n.removeChild(child);
[PATCH] child.detachFromParent();
[PATCH] child.setString("-");
[PATCH] child.setString(":");
[PATCH] child.setString("=");
[PATCH] child.setNext(null);
[PATCH] child = child.next();
[PATCH] child.setString("{");
[PATCH] n.detachFromParent();
[PATCH] child.setString("");
[PATCH] ref = ref(child);
[PATCH] t.getScope();
[PATCH] n.clear();
[PATCH] child.clear();
[PATCH] child.next();
[PATCH] codeChange();
);
