[PATCH] Preconditions.checkState(NodeUtil.isLiteralValue(n));
[PATCH] Preconditions.checkState(type == Token.BOOLEAN);
[PATCH] Preconditions.checkState(NodeUtil.isToken(n));
[PATCH] checkToken(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] n.putBooleanProp(Node.BOOLEAN_PROP, true);
[PATCH] n.putBooleanProp(Token.BOOLEAN_PROP, true);
[PATCH] Preconditions.checkState(isStringNode(n));
[PATCH] n.setType(Token.BOOLEAN);
[PATCH] Preconditions.checkState(type == Token.NUMBER);
[PATCH] n.setBoolean(true);
[PATCH] Preconditions.checkState(false,"Not reachable");
[PATCH] n.setJSType(BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(NodeUtil.isBoolean(n));
[PATCH] checkBooleanResult(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(isBooleanResult(n));
[PATCH] Preconditions.checkState(NodeUtil.isNumber(n));
[PATCH] Preconditions.checkState(NodeUtil.isNumericType(n));
[PATCH] Preconditions.checkState(!NodeUtil.isToken(n));
[PATCH] Preconditions.checkState(NodeUtil.isExpressionNode(n));
[PATCH] Preconditions.checkState(type == Token.NOT);
[PATCH] n.setJSType(Boolean.valueOf(c));
[PATCH] Preconditions.checkState(nodeType == Token.BOOLEAN);
[PATCH] checkState(n.getType() == Token.BOOLEAN);
[PATCH] Preconditions.checkState(isNumericType(n));
[PATCH] Preconditions.checkState(isBooleanResult(n, true));
[PATCH] Preconditions.checkState(parentType == Token.BOOLEAN);
[PATCH] Preconditions.checkState(NodeUtil.isConditionExpression(n));
[PATCH] Preconditions.checkState(childValue == null);
[PATCH] visitToken(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(isToken(n.getType()));
[PATCH] n.getBooleanProp(Node.IS_BOOLEAN_RESULT);
[PATCH] Preconditions.checkState(isNumericValue(n));
[PATCH] Preconditions.checkState(!Token.isNumericType(type));
[PATCH] checkEquality(n, n.getFirstChild());
[PATCH] Preconditions.checkState(c == n.getType());
[PATCH] Preconditions.checkState(false,"Not a value");
[PATCH] Preconditions.checkState(!NodeUtil.isNumber(n));
[PATCH] checkState(n.getType() == Token.NUMBER);
[PATCH] visitType(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkArgument(NodeUtil.isLiteralValue(n));
[PATCH] Preconditions.checkState(NodeUtil.isGet(n));
[PATCH] n.report(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(NodeUtil.isNumericValue(n));
[PATCH] n.putBooleanProp(Token.BOOLEAN_RESULT, true);
[PATCH] checkEquality(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(nodeType == Token.NUMBER);
[PATCH] visitEquality(n, n.getFirstChild());
[PATCH] Preconditions.checkState(!Token.isLiteralValue(value));
[PATCH] Preconditions.checkState(isBooleanResultNode(n));
[PATCH] Preconditions.checkState(!Token.isNumber(type));
[PATCH] Preconditions.checkState(false,"Not supported");
[PATCH] n.setJSType(getNativeType(BOOLEAN_TYPE));
[PATCH] Preconditions.checkState(isStringOrNumber(n));
[PATCH] checkConstant(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] checkNode(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] n.setIsBooleanResult(true);
[PATCH] ensureTyped(n, BOOLEAN_RESULT_PREDICATE);
[PATCH] Preconditions.checkState(isBooleanResult(n, false));
[PATCH] Preconditions.checkState(isStringToken(n));
[PATCH] Preconditions.checkState(type == Token.NE);
[PATCH] Preconditions.checkState(isObjectLitKey(n));
[PATCH] Preconditions.checkState(nodeType == Token.NOT);
[PATCH] Preconditions.checkState(!isStringNode(n));
[PATCH] Preconditions.checkState(isJSSpace(n));
[PATCH] Preconditions.checkState(Token.BOOLEAN);
[PATCH] n.setType(Token.NUMBER);
[PATCH] Preconditions.checkState(isLiteralValue(n));
[PATCH] Preconditions.checkState(!Token.IS_BOOLEAN);
[PATCH] checkNotAssignable(n, n.getType());
[PATCH] n.putBoolean(Token.BOOLEAN, true);
[PATCH] Preconditions.checkState(isToken(n));
[PATCH] Preconditions.checkState(isNumericToken(n));
[PATCH] n.putBoolean(true, true);
[PATCH] Preconditions.checkState(true,"Not reachable");
[PATCH] Preconditions.checkState(false,"Not handled");
[PATCH] visitComparison(n, n.getFirstChild());
[PATCH] checkToken(n, n.getType());
[PATCH] n.setJSType(BOOLEAN_TYPE);
[PATCH] checkToken(n, Token.BOOLEAN);
[PATCH] n.setType(getType(n));
[PATCH] n.setJSType(Boolean.TYPE);
[PATCH] n.setBoolean(false);
[PATCH] n.setBooleanResult(true);
[PATCH] n.setType(Token.TYPE);
[PATCH] visitEquality(n, n);
[PATCH] n.setType(Token.TRUE);
[PATCH] n.setType(Token.LT);
[PATCH] c = n.getType();
[PATCH] visitComparison(n, n);
[PATCH] Preconditions.checkNotNull(n);
[PATCH] n.setType(type);
[PATCH] checkToken(n.getType());
[PATCH] t = n.getType();
[PATCH] checkToken(n);
[PATCH] checkShallowStatement(n);
[PATCH] n.testIsBooleanResult();
[PATCH] n.clear();
[PATCH] n.isBooleanResult();
[PATCH] checkConstant(n);
[PATCH] n.isBoolean();
