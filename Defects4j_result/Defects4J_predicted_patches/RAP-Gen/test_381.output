[PATCH] Vector3D v1D = subLine.line.subtract(loc1);
[PATCH] v1D = subLine.line.subtract(loc1);
[PATCH] Vector3D v1D = super.intersection(subLine.line, loc1);
[PATCH] Vector3D v1D = line.subtract(subLine.line);
[PATCH] v1D = line.subtract(subLine.line);
[PATCH] v1D = line.subtract(subLine.line, loc1);
[PATCH] Vector3D v1D = subLine.line.toSubSpace(loc1);
[PATCH] Vector3D v1D = loc1.toSubSpace(subLine.line);
[PATCH] Location locD = subLine.line.toSubSpace(loc1);
[PATCH] Vector3D v1D = this.line.subtract(loc1);
[PATCH] Vector3D v1D = line.subtract(remainingRegion);
[PATCH] Vector3D v1D = super.intersection(subLine, loc1);
[PATCH] Vector3D v1D = super.intersect(subLine.line, loc1);
[PATCH] Vector3D v1D = parent.intersect(subLine.line, loc1);
[PATCH] Vector3D v1D = intersection(loc1, subLine.line);
[PATCH] Vector3D v1D = line.subtract(loc1);
[PATCH] Vector3D v1D = loc1.subtract(subLine.line);
[PATCH] Vector3D v1D = new Vector3D(loc1, loc2);
[PATCH] v1D = super.intersection(subLine.line, loc1);
[PATCH] Vector3D v1D = marker.intersection(loc1, subLine.marker);
[PATCH] Location locD = subLine.line.toSubSpace(v1D);
[PATCH] Vector3D v1D = subLine.line.subtract(remainingRegion);
[PATCH] Location v1D = loc1.toSubSpace(subLine.line);
[PATCH] Vector3D v1D = anchor.intersection(loc1, subLine.anchor);
[PATCH] Vector3D v1D = marker.intersection(loc1, subLine.line);
[PATCH] Vector3D v1D = parent.intersection(subLine.line, loc1);
[PATCH] Location loc2 = subLine.line.toSubSpace(v1D);
[PATCH] Vector3D v1D = line.subtract(remainingRegion, loc1);
[PATCH] Vector3D v1D = difference(loc1, subLine.line);
[PATCH] Vector3D v1D = super.intersection(loc1, subLine.line);
[PATCH] Location v1D = subLine.line.toSubSpace(loc1);
[PATCH] Vector3D v1D = subLine.line.abs() - loc1;
[PATCH] Vector3D v1D = super.intersect(loc1, subLine.line);
[PATCH] Vector3D v1D = subLine.line.fromSubSpace(loc1);
[PATCH] Vector3D v1D = toSubSpace(loc1, subLine.line);
[PATCH] LocalsSet remainingRegion = new IntervalsSet(this.remainingRegion, loc1);
[PATCH] Location v1D = line.subtract(loc1, subLine.line);
[PATCH] V1D = line.subtract(subLine.line, loc1);
[PATCH] Location v1D = subLine.line.subtract(loc1);
[PATCH] v1D = subLine.line.subtract(remainingRegion);
[PATCH] Vector3D v1D = checkPoint(loc1, subLine.line);
[PATCH] double v1D = line.subtract(subLine.line, loc1);
[PATCH] v1D = super.intersect(subLine.line, loc1);
[PATCH] v1D = line.subtract(loc1, subLine.line);
[PATCH] D v1D = line.subtract(subLine.line, loc1);
[PATCH] v1D = intersection(loc1, subLine.line);
[PATCH] double v1D = line.subtract(subLine.line);
[PATCH] Vector3D v1D = loc1.toSubSpace(v1D);
[PATCH] Vector3D v1D = locationIntersection(loc1, subLine.line);
[PATCH] Vector3D v1D = super.intersection(line, subLine);
[PATCH] Vector3D v1D = super.intersection(line, subLine.line);
[PATCH] Vector3D v1D = deltaLine(loc1, subLine.line);
[PATCH] Location locD = subLine.line.subtract(loc1);
[PATCH] v1D = loc1.toSubSpace(subLine.line);
[PATCH] v1D = this.line.subtract(loc1);
[PATCH] v1D = loc1.subtract(subLine.line);
[PATCH] Vector3D v1D = minLine.line.subtract(loc1);
[PATCH] v1D = line.subtract(remainingRegion);
[PATCH] Vector3D v1D = previousLine().intersection(subLine.line);
[PATCH] Vector3D v1D = line.subtract(otherLine.line);
[PATCH] Vector3D v1D = position2line.subtract(loc1);
[PATCH] Vector3D v1D = previousLine.intersection(subLine.line);
[PATCH] Location locD = line.subtract(subLine.line, loc1);
[PATCH] Vector3D v1D = line.toSubSpace(loc1);
[PATCH] location v1D = subLine.line.subtract(loc1);
[PATCH] Vector3D v1D = normalise(loc1, loc2);
[PATCH] Vector3D v1D = checkPoint(loc1, subLine.remainingRegion);
[PATCH] Location v1D = line.subtract(loc1);
[PATCH] Vector3D v1D = subLine.line.subtract( loc1);
[PATCH] Vector3D v1D = subLine.line.subtract(location1);
[PATCH] v1D = super.intersection(subLine, loc1);
[PATCH] Vector3D v1D = line.subtract(subLine.line, marker);
[PATCH] Vector3D v1D = skipSpace(loc1);
[PATCH] Vector3D v1D = copy(loc1, loc2);
[PATCH] Vector3D v1D = firstNonWhitespace(loc1);
[PATCH] Vector3D v1D = loc1.getY();
[PATCH] Vector3D v1D = previousRegion.checkPoint(loc1);
[PATCH] Vector3D v1D = x1D.subtract(loc1);
[PATCH] Vector3D v1D = super.intersection(loc1, subLine);
[PATCH] D v1D = line.subtract(subLine.line);
[PATCH] Vector3D v1D = pivot(loc1);
[PATCH] LocalsSet remainingRegion = new IntervalsSet(this.remainingRegion);
[PATCH] Vector3D v1D = super.intersect(loc1, subLine);
[PATCH] Vector3D v1D = subLine.line.intersect(loc1, false);
[PATCH] Vector3D v1D = subLine.line.intersect(loc1, marker);
[PATCH] v1D = line.subtract(loc1);
[PATCH] while(!line.equals(loc1)) { v1D = line.next();
[PATCH] Vector3D v1D = loc1.getDifference();
[PATCH] return new Vector3D(loc1, loc2);
[PATCH] subLine.line.setTo(loc1);
[PATCH] Location locD = line.subtract(loc1);
[PATCH] Location v1D = loc1.getY();
[PATCH] Preconditions.checkNotNull(loc1);
[PATCH] ;
);
;
*/
..
());
),
