[PATCH] return mayBeStringHelper(n, false);
[PATCH] return mayBeStringHelper(n, true);
[PATCH] return mustMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return areMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayBeStringHelper(n, 0);
[PATCH] return match(n, MAY_BE_STRING_PREDICATE);
[PATCH] return willMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return shouldMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return tryMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return resultMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayBeStringHelper(n, null);
[PATCH] return visit(n, MAY_BE_STRING_PREDICATE);
[PATCH] return isString(n, MAY_BE_STRING_PREDICATE);
[PATCH] return notMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return stringMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return hasMatches(n, MAY_BE_STRING_PREDICATE);
[PATCH] return matchResult(n, MAY_BE_STRING_PREDICATE);
[PATCH] return containsString(n, MAY_BE_STRING_PREDICATE);
[PATCH] return wholeMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return areMatches(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayBeStringHelper(n,!recurse);
[PATCH] return mayBeStringHelper(n,!0);
[PATCH] return checkMatcher(n, MAY_BE_STRING_PREDICATE);
[PATCH] return isMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return firstMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return matchNode(n, MAY_BE_STRING_PREDICATE);
[PATCH] return countMatches(n, MAY_BE_STRING_PREDICATE);
[PATCH] return allResultsMatch(n, STRING_REGEXP_PREDICATE);
[PATCH] return!mayBeStringHelper(n, false);
[PATCH] return contains(n, MAY_BE_STRING_PREDICATE);
[PATCH] return checkMatches(n, MAY_BE_STRING_PREDICATE);
[PATCH] return thenMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return stringsMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return haveMatches(n, MAY_BE_STRING_PREDICATE);
[PATCH] return allResultsMatch(n, MUST_BE_STRING_PREDICATE);
[PATCH] return containsMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return doMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return stringMatches(n, MAY_BE_STRING_PREDICATE);
[PATCH] return textMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return findMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return startMatch(n, MAY_BE_STRING_PREDICATE);
[PATCH] return test(n, MAY_BE_STRING_PREDICATE);
[PATCH] return containsType(n, Token.STRING);
[PATCH] return containsType(n, MAY_BE_STRING_PREDICATE);
[PATCH] return mayBeStringHelper(n, ALL_RESULT_PREDICATE);
[PATCH] return mayBeStringHelper(n, n.getFirstChild());
[PATCH] return recurse && mayBeStringHelper(n, false);
[PATCH] return _mayBeStringHelper(n, false);
[PATCH] return allResultsMatch(n, STRING_REGEXP_METHODS);
[PATCH] return allResultsMatch(n, MAY_BE_STRING);
[PATCH] return canBeStringHelper(n, false);
[PATCH] return mayBeStringHelper(n, FALSE);
[PATCH] return this.mayBeStringHelper(n, false);
[PATCH] return mayBeStringHelper(n, COMMA_ONLY);
[PATCH] return mayBeStringHelper(n, -1);
[PATCH] return matchesExpectation("string")? true : false;
[PATCH] return mayBeStringHelper(n, 1);
[PATCH] return mayBeStringHelper(n, n.getFirstChild().getNext());
[PATCH] return mayHaveSideEffects(n);
[PATCH] return allResultsMatch(n, VALUE_STRING);
[PATCH] return mayBeStringHelper(n, recurse);
[PATCH] return mayBeStringHelper(n,!1);
[PATCH] return!mayBeStringHelper(n, true);
[PATCH] return matchesExpectation("string")? false : true;
[PATCH] return mayBeStringHelper(n, DEFAULT_RELATIVE_STATEMENT);
[PATCH] return matchesExpectation("string")? mayBeStringHelper(n): false;
[PATCH] return mayBeStringHelper(n, ~recurse);
[PATCH] return mayBeStringHelper(n,recurse);
[PATCH] return _mayBeStringHelper(n, true);
[PATCH] return this.mayBeStringHelper(n, true);
[PATCH] return mayBeStringHelper(n,!2);
[PATCH] return alwaysBeStringHelper(n, false);
[PATCH] return canBeStringHelper(n, true);
[PATCH] return mayBeStringHelper(n, 0.0);
[PATCH] return mayBeStringHelper(n, n.getFirstChild(), false);
[PATCH] return willBeStringHelper(n, false);
[PATCH] return mustBeStringHelper(n, false);
[PATCH] return mustMatch(n, MAY_BE_STRING);
[PATCH] return recurse && mayBeStringHelper(n, true);
[PATCH] return mayBeStringHelper(n, COMMA_BLOCK);
[PATCH] return mayBeStringHelper(n, ALL_EFFECTS);
[PATCH] return mayBeStringHelper(n, DEFAULT_REQUIRE_WARNINGS);
[PATCH] return mayBeStringHelper(n, NON_RELATIVE_STATEMENT);
[PATCH] return mayBeStringHelper(n, 2);
[PATCH] return allResultsMatch(n, STRING_REGEXP_STATEMENT);
[PATCH] return mayBeStringHelper(n, 0.5);
[PATCH] return canBeString(n, false);
[PATCH] return mayBeStringHelper(n, COMMA_IN_ARRAY);
[PATCH] return mayBeStringHelper(n, n.getNext());
[PATCH] return mightBeStringHelper(n, false);
[PATCH] return _mayBeString(n, false);
[PATCH] return containsType(n, MAY_BE_STRING);
[PATCH] return allResultsMatch(n, STRING_REGEXP_EXPONENTS);
[PATCH] return mayBeStringHelper(n, ALL_IN_ARRAY);
[PATCH] return containsString(n, MAY_BE_STRING);
[PATCH] return areMatch(n, MAY_BE_STRING);
[PATCH] return contains(n, MAY_BE_STRING);
[PATCH] return mayBeStringHelper(n, COMMA_STATEMENT);
[PATCH] return mayBeString(n, false);
