[PATCH] Node furthestBlock = formatEl.getLastChild();
[PATCH] Block furthestBlock = tb.getLastChild();
[PATCH] Element furthestBlock = tb.getLastChild();
[PATCH] Element furthestBlock = formatEl.getLastChild();
[PATCH] Node furthestBlock = tb.getLastChild();
[PATCH] furthestBlock = furthestBlock.getLastChild();
[PATCH] tb.insertOnFosterParent(lastNode);
[PATCH] tb.insertOnFosterParent(furthestBlock);
[PATCH] Preconditions.checkNotNull(furthestBlock);
[PATCH] furthestBlock = tb.getLastChild();
[PATCH] Node furthestBlock = formatEl.parent();
[PATCH] Block furthestBlock = formatEl.getLastChild();
[PATCH] Node furthestBlock = formatEl.body();
[PATCH] Element furthestBlock = formatEl.parent();
[PATCH] tb.removeFromActiveFormattingElements(formatEl);
[PATCH] Node furthestBlock = formatEl.getBody();
[PATCH] Node furthestBlock = formatEl.firstChild();
[PATCH] Element furthestBlock = formatEl.body();
[PATCH] Element furthestBlock = formatEl.getBody();
[PATCH] tb.insertBeforeFosterParent(furthestBlock);
[PATCH] Node furthestBlock = formatEl.furthestBlock();
[PATCH] parent.replaceChild(lastNode, adopter);
[PATCH] tb.insertBeforeFosterParent(lastNode);
[PATCH] Element furthestBlock = tb.getFurthestBlock();
[PATCH] tb.insertOnFosterParent(adopter);
[PATCH] tb.insertOnFosterParent(firstNode);
[PATCH] Node furthestBlock = formatEl.html();
[PATCH] Node furthestBlock = formatEl.getLineno();
[PATCH] Validate.notNull(furthestBlock);
[PATCH] Node furthestBlock = formatEl.childNodes().first();
[PATCH] Node furthestBlock = formatEl.lastChild();
[PATCH] furthestBlock = tb.getFurthestBlock();
[PATCH] furthestBlock = furthestBlock.getBody();
[PATCH] furthestBlock = formatEl.getLastChild();
[PATCH] Node furthestBlock = formatEl.childNodes();
[PATCH] ContainedBlock furthestBlock = tb.getLastChild();
[PATCH] Node furthestBlock = formatEl.block();
[PATCH] Tree furthestBlock = tb.getLastChild();
[PATCH] Element furthestBlock = formatEl.block();
[PATCH] furthestBlock = furthestBlock.getParent();
[PATCH] Element furthestBlock =tb.getLastChild();
[PATCH] El furthestBlock = formatEl.getLastChild();
[PATCH] Element furthestBlock = formatEl.firstChild();
[PATCH] Node furthestBlock = firstNonWhitespace(lastNode);
[PATCH] Element furthestBlock = tt.getLastChild();
[PATCH] tb.insertOnFosterParent(commonAncestor);
[PATCH] tb.insertInFosterParent(lastNode);
[PATCH] Element furthestBlock = formatEl.clone();
[PATCH] Node furthestBlock = formatEl.childNodes().trim();
[PATCH] ControlFlow furthestBlock = tb.getLastChild();
[PATCH] Block furthestBlock = formatEl.body();
[PATCH] Element furthestBlock = formatEl.getParent();
[PATCH] tb.insertIntoFosterParent(adopter);
[PATCH] Tree furthestBlock = formatEl.getLastChild();
[PATCH] Node furthestBlock = formatEl.getWholeParent();
[PATCH] Parent furthestBlock = tb.getLastChild();
[PATCH] Element furthestBlock = formatEl.getWholeParent();
[PATCH] furthestBlock = furthestBlock.remove();
[PATCH] HtmlRenderingContext furthestBlock = tb.getLastChild();
[PATCH] Node furthestBlock = formatEl.getParent();
[PATCH] Node furthestBlock = formatEl.stripLeadingZeroes();
[PATCH] tb.insertBeforeFosterParent(adopter);
[PATCH] Element furthestBlock = formatEl.childNodes();
[PATCH] Node furthestBlock = formatEl.clone();
[PATCH] Tag furthestBlock = tb.getLastChild();
[PATCH] Element furthestBlock = findFurthestBlock(tb);
[PATCH] appendToFrontElements(adopter);
[PATCH] Node furthestBlock = formatEl.getContent();
[PATCH] Block furthestBlock = tb.getLastElement();
[PATCH] Node furthestBlock = formatEl.children();
[PATCH] furthestBlock = findFurthestBlock(formatEl);
[PATCH] Block furthestBlock = findFurthestBlock(tb);
[PATCH] Node furthestBlock = furthestBlock.getBody();
[PATCH] Block furthestBlock = formatEl.getBody();
[PATCH] Node furthestBlock = findFurthestBlock(tb);
[PATCH] dfurthestBlock = tb.getLastChild();
[PATCH] Element furthestBlock = calculateFurthestBlock();
[PATCH] Node furthestBlock = formatEl.trim();
[PATCH] parent.removeChild(furthestBlock);
[PATCH] Node furthestBlock = calculateFurthestBlock();
[PATCH] furthestBlock = furthestBlock.remove(0);
[PATCH] furthestBlock = furthestBlock.removeChildren();
[PATCH] furthestBlock = findFurthestBlock(lastNode);
[PATCH] body().prependTo(adopter);
[PATCH] Node furthestBlock = formatEl.getWholeText();
[PATCH] Element furthestBlock = formatEl.children();
[PATCH] Element furthestBlock = formatEl.getContent();
[PATCH] Node furthestBlock = formatEl.getWholeBody();
[PATCH] Node furthestBlock = formatEl.childNodes().size();
[PATCH] Block furthestBlock = calculateFurthestBlock(tb);
[PATCH] adopter.appendChild(lastNode);
[PATCH] Element furthestBlock = formatEl.html();
[PATCH] Block furthestBlock = formatEl.parent();
[PATCH] body().appendToFront(adopter);
[PATCH] body().appendChild(adopter);
[PATCH] Node furthestBlock = formatEl.getRootElement();
[PATCH] Element furthestBlock = extractFurthestBlock(tb);
[PATCH] Node furthestBlock = extractFurthestBlock(tb);
[PATCH] body().prependChild(adopter);
[PATCH] Element furthestBlock = calculateFurthestBlock(tb);
