[PATCH] Preconditions.checkNotNull(constraintObj);
[PATCH] Preconditions.checkState(constraintObj!= null);
[PATCH] Preconditions.checkArgument(constraintObj!= null);
[PATCH] Preconditions.checkState(constraintObj!= null,"Expected record type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid constraint object");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unknown constraint");
[PATCH] Preconditions.checkState(constraintObj!= null,"Not a collection");
[PATCH] Preconditions.checkState(constraintObj!= null,"Not a constraint");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unexpected constraint object");
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid constraint");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unexpected constraint");
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid object type");
[PATCH] Preconditions.checkState(constraintObj!= null,"expected record type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid record type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Mismatch in constraint");
[PATCH] Preconditions.checkState(constraintObj!= this);
[PATCH] Preconditions.checkState(constraintObj!= null,"Expected RecordType");
[PATCH] Preconditions.checkState(constraintObj!= null,"Not a record");
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid constraint.");
[PATCH] Preconditions.checkState(constraintObj!= null,"Expected type object");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unterminated object");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unexpected object type");
[PATCH] Preconditions.checkNotNull(constraintObj, constraintObj.getClass());
[PATCH] Preconditions.checkState(constraintObj!= null,"Invalid type.");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unexpected record type");
[PATCH] Preconditions.checkArgument(constraintObj!= null,"Expected record type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unknown type");
[PATCH] Preconditions.checkArgument(constraintObj!= null,"Invalid constraint object");
[PATCH] Preconditions.checkState(!constraintObj.isNone());
[PATCH] Preconditions.checkState(constraintObj!= null,"Unresolved object");
[PATCH] Preconditions.checkState(constraintObj!= null,"Expected recordType");
[PATCH] Preconditions.checkState(!constraintObj.isUnknownType());
[PATCH] Preconditions.checkState(constraintObj!= null,"Unexpected constraint.");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unspecified type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Bad constraint object");
[PATCH] Preconditions.checkState(constraintObj!= null,"Unresolved type");
[PATCH] Preconditions.checkState(constraintObj!= null,"Undeclared type");
[PATCH] Preconditions.checkState(constraintObj!= null,"expected type");
[PATCH] NodeTraversal.traverse(this, constraintObj, this);
[PATCH] NodeTraversal.traverse(compiler, constraintObj, this);
[PATCH] super.matchConstraint(constraintObj);
[PATCH] t = constraintObj.getType();
[PATCH] checkState(constraintObj!= null);
[PATCH] checkState(!constraintObj.isNone());
[PATCH] Preconditions.checkState(isRecordType());
[PATCH] scope = constraintObj.getScope();
[PATCH] Validate.notNull(constraintObj);
[PATCH] String token = eatTokensUntilEOL(token);
[PATCH] Preconditions.checkNotNull(constraintObj);
[PATCH] boolean token = eatTokensUntilEOL(token);
[PATCH] Preconditions.checkNotNull(constraintObj");
[PATCH] Preconditions.checkState(isEnumType());
[PATCH] token = eatTokensUntilEOL(token);
[PATCH] int index = constraintObj.getIndex();
[PATCH] Token token = eatTokensUntilEOL(token);
[PATCH] Preconditions.checkObject(constraintObj);
[PATCH] constraintObj = constraintObj.getImplicitPrototype();
[PATCH] JSType t = constraintObj.getType();
[PATCH] Preconditions.checkState(token == null);
[PATCH] ObjectType t = constraintObj.getType();
[PATCH] Preconditions.checkNull(constraintObj);
[PATCH] Preconditions.checkValueNotNull(constraintObj);
[PATCH] Preconditions.checkArgument(isRecordType());
[PATCH] this.checkState(constraintObj!= null);
[PATCH] state = checkState(constraintObj!= null);
[PATCH] checkState(!constraintObj.isAll());
[PATCH] Preconditions.check(constraintObj!= null);
[PATCH] boolean token = peekTokensUntilEOL();
[PATCH] setType(constraintObj.getClass());
[PATCH] mightHaveSideEffects(constraintObj);
[PATCH] t = constraintObj.getParameterType();
[PATCH] int t = constraintObj.getType();
[PATCH] Preconditions.checkConstraint(constraintObj);
[PATCH] this.setConstraint(constraintObj);
[PATCH] t = constraintObj.getClass();
[PATCH] type = constraintObj.getClass();
[PATCH] navigateTo(constraintObj);
[PATCH] super.matches(constraintObj);
[PATCH] t = constraintObj.getPrototype();
[PATCH] String token = peekTokensUntilEOL();
[PATCH] isRecordType(constraintObj);
[PATCH] checkMatcher(constraintObj);
[PATCH] int len = length();
[PATCH] addConstraint(constraintObj);
[PATCH] tokens.clear();
[PATCH] this.tokens.clear();
[PATCH] boolean matchesAnyObject();
[PATCH] add(constraintObj);
[PATCH] validate(constraintObj);
[PATCH] matcher.clear();
[PATCH] int len = size();
[PATCH] navigateFields();
[PATCH] matcher.reset();
[PATCH] navigateProperties();
[PATCH] isRecordType();
[PATCH] init();
[PATCH] reset();
[PATCH] next();
);
