[PATCH] traverse(c);
[PATCH] traverse(c, node);
[PATCH] traverse(c, next);
[PATCH] traverse(c, null);
[PATCH] traverse(c, parent);
[PATCH] traverse(c, n);
[PATCH] traverse(c, child);
[PATCH] node = c.getNext();
[PATCH] traverse(c, false);
[PATCH] traverse(c, true);
[PATCH] merge(c, next);
[PATCH] traverse(c, state);
[PATCH] traverse(c, candidate);
[PATCH] traverse(c, nodes);
[PATCH] traverse(c, sibling);
[PATCH] visit(c);
[PATCH] traverse(c, children);
[PATCH] traverse(c, 0);
[PATCH] traverse(c, 1);
[PATCH] traverse(c, root);
[PATCH] detachFromParent(c);
[PATCH] nodes.add(c);
[PATCH] traversal(c, node);
[PATCH] traversal(c);
[PATCH] replace(c, next);
[PATCH] traverse(c, first);
[PATCH] push(c.getNext());
[PATCH] traverse(c,next);
[PATCH] removeChild(c);
[PATCH] traverse(c, node;
[PATCH] child = c.getNext();
[PATCH] traversal(c, next);
[PATCH] traverse(c, prev);
[PATCH] traverse(c, rootNode);
[PATCH] traverse(c, cb);
[PATCH] traverse(c, block);
[PATCH] traverse(c, list);
[PATCH] updateNode(c, next);
[PATCH] traverse(c, callback);
[PATCH] traverse(c;
[PATCH] traverse(c, edge);
[PATCH] traverse(c,node);
[PATCH] traverse(c, context);
[PATCH] traverse(c, visited);
[PATCH] redeclare(c);
[PATCH] traverse(c, ancestor);
[PATCH] traverse(c, result);
[PATCH] traverse(c, value);
[PATCH] traversal(c, null);
[PATCH] copyNode(c, next);
[PATCH] detach(c);
[PATCH] Traverse.redeclare(c);
[PATCH] traverse(c, this);
[PATCH] traverse(c, next;
[PATCH] decorated(c, next);
[PATCH] traverse(c, name);
[PATCH] getNext(c);
[PATCH] removeNode(c);
[PATCH] visit(c, next);
[PATCH] traverseNode(c);
[PATCH] decompose(c);
[PATCH] prefetch(c);
[PATCH] visitor(c);
[PATCH] nodes.remove(c);
[PATCH] detachChildren(c);
[PATCH] revisit(c);
[PATCH] process(c);
[PATCH] add(c, node);
[PATCH] removeChildAfter(c);
[PATCH] update(c, next);
[PATCH] removeFromParent(c);
[PATCH] computeNext(c);
[PATCH] removeDeclaration(c);
[PATCH] removeChildren(c);
[PATCH] removeAncestor(c);
[PATCH] remove(c);
[PATCH] navigate(c);
[PATCH] compute(c);
[PATCH] collapse(c);
[PATCH] recompute(c);
[PATCH] transform(c);
[PATCH] apply(c);
[PATCH] traverse( c);
[PATCH] render(c);
[PATCH] translate(c);
[PATCH] iterate(c);
[PATCH] collect(c);
[PATCH] print(c);
[PATCH] add(c);
[PATCH] optimize(c);
[PATCH] solve(c);
[PATCH] wrap(c);
[PATCH] recursion(c);
[PATCH] select(c);
[PATCH] flatten(c);
[PATCH] prune(c);
[PATCH] resolve(c);
[PATCH] parse(c);
[PATCH] loop(c);
[PATCH] execute(c);
