[PATCH] return _createEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(config, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, name, type);
[PATCH] return _createEnumValueDeserializer(ctxt, type);
[PATCH] return _createEnumTypeDeserializer(ctxt, type);
[PATCH] return _constructEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, enumClass);
[PATCH] return _createEnumKeyDeserializer(ctxt, config, type);
[PATCH] return _createEnumClassDeserializer(ctxt, type);
[PATCH] return _createEnumClassKeyDeserializer(ctxt, type);
[PATCH] return _createEnumDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(type, config);
[PATCH] return _createEnumTypeKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type;
[PATCH] return _findEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, this, type);
[PATCH] return _createEnumkeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt);
[PATCH] return _createEnumKeyTypeDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, name, value);
[PATCH] return _createEnumElementDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type, config);
[PATCH] return _createEnumValDeserializer(ctxt, type);
[PATCH] return _createEnumValueTypeDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, ctxt, type);
[PATCH] return _createEnumFieldDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(_factoryConfig, type);
[PATCH] return createEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, n, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, Enum.class);
[PATCH] return _findEnumKeyDeserializer(config, type);
[PATCH] return _createEnumSerializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt,type);
[PATCH] return _createEnumKeyDeserializer(context, type);
[PATCH] return _createEnumKeyDeserializer(config, name, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, name);
[PATCH] return _createEnumLiteral(ctxt, type);
[PATCH] return _createEnumBasedKeyDeserializer(ctxt, type);
[PATCH] return _createEnumTypeDeserializer(config, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, e, type);
[PATCH] return _createEnumPropertyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, null, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, this);
[PATCH] return _createEnumClassKeyDeserializer(config, type);
[PATCH] return _createEnumLiteralKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type){
[PATCH] return this._createEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type, config);
[PATCH] return _createEnumKeyDeserializer(ctxt, beanDesc);
[PATCH] return _createEnum keyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, owner, type);
[PATCH] return _handleEnumParameterType(ctxt, type);
[PATCH] return _initEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(config, enumClass);
[PATCH] return _createEnumKeyDeserializer(ctxt, name, config);
[PATCH] return _createEnumKeyDeserializer(ctxt, null);
[PATCH] return _createEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumValueDeserializer(config, type);
[PATCH] return _instantiateEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumAttributeDeserializer(ctxt, type);
[PATCH] return _createEnumInstance(ctxt, type);
[PATCH] return _CreateEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(type);
[PATCH] return _createEnumClassDeserializer(config, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, t);
[PATCH] return _createEnumKeyDeserializer(type, ctxt);
[PATCH] return _constructEnumKeyDeserializer(config, type);
[PATCH] return_createEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(cfg, type);
[PATCH] return _createEnumConstantDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, key);
[PATCH] return _findEnumValueDeserializer(ctxt, type);
[PATCH] type = _constructEnumType(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, value);
[PATCH] return _createEnumObjectDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(name, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type,"string");
[PATCH] return _createEnumKeyDeserializer(enumClass, config);
[PATCH] return _createEnumReferenceDeserializer(ctxt, type);
[PATCH] return _handleEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type,"name");
[PATCH] return _createEnum KeyDeserializer(ctxt, type);
[PATCH] return _createEnumOptionValueDeserializer(ctxt, type);
[PATCH] return _createEnumArgumentDeserializer(ctxt, type);
[PATCH] return _createEnum2Deserializer(ctxt, type);
[PATCH] return _createEnumMutator(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type), null;
[PATCH] return _ createEnumKeyDeserializer(ctxt, type);
[PATCH] return _addEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumMemberDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(Config, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, type), null);
[PATCH] return findEnumKeyDeserializer(ctxt, type);
[PATCH] return(_constructEnumKeyDeserializer(ctxt, type, config));
[PATCH] return _defineEnumKeyDeserializer(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, true);
[PATCH] return _createEnumParameterType(ctxt, type);
[PATCH] return _createEnumKeyDeserializer(ctxt, owner, name);
[PATCH] return _createEnumKeyDeserializer(ctxt, ctxt);
