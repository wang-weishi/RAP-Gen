[PATCH] return options.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName)? true : false;
[PATCH] return options.hasOption(optName);
[PATCH] return options.hasShortOption(optName)|| stopAtNonOption;
[PATCH] return options.hasShortOpt(optName);
[PATCH] return options.hasShortOption(optName)) || stopAtNonOption;
[PATCH] return options.hasShortOption(optName)|| cmd.hasArg();
[PATCH] return options.hasShortOption(optName)|| stopAtNonOption;
[PATCH] return options.hasShortOption(optName)|| currentOption!= null;
[PATCH] return options.hasLongOption(optName);
[PATCH] return options.hasShortOption(optName, stopAtNonOption);
[PATCH] return options.hasShortOption(optName || stopAtNonOption);
[PATCH] return!options.hasShortOption(optName);
[PATCH] return options.hasshortOption(optName);
[PATCH] return options.hasShortOption(optName): stopAtNonOption;
[PATCH] returnoptions.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName)|| cmd.hasNext();
[PATCH] return options.hasShortOption(optName)|| opt.isRequired();
[PATCH] return options.has shortOption(optName);
[PATCH] return currentOption!= null && currentOption.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName)|| skipAtNonOption;
[PATCH] return options.hasShortOption(optName)|| false;
[PATCH] return options.hasShortOption(optName)|| cmd.hasArgs();
[PATCH] return options.hasShortOption(optName)|| currentOption == null;
[PATCH] return currentOption!= null && options.hasShortOption(optName);
[PATCH] return options.hasLongOpt(optName);
[PATCH] return options.hasShortOption(Opt.valueOf(optName));
[PATCH] return options.hasShortOption(optName)|| cmd.hasRun();
[PATCH] return shortOptions.hasShortOption(optName);
[PATCH] return shortOpts.containsKey(optName);
[PATCH] return options.hasShortOption(optName|| stopAtNonOption);
[PATCH] return currentOption.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName)? false : true;
[PATCH] return options.hasShortOption(optName));
[PATCH] return options.isShortOption(optName);
[PATCH] return option.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName? true : false);
[PATCH] return opts.hasShortOption(optName);
[PATCH] return opt.hasShortOption(optName);
[PATCH] return shortOpts.contains(optName);
[PATCH] return options.hasNoOption(optName);
[PATCH] return options.hasShortoption(optName);
[PATCH] return options.has ShortOption(optName);
[PATCH] return options.hasShortOption(optName)|| true;
[PATCH] return this.options.hasShortOption(optName);
[PATCH] return this.hasShortOption(optName);
[PATCH] return 0 <= options.hasShortOption(optName);
[PATCH] return options.hasShortOption(optNamename);
[PATCH] return optionRegistry.hasShortOption(optName);
[PATCH] return options.hasSHORTOption(optName);
[PATCH] return options.hasShortOption(optName)== true;
[PATCH] return options.hasShortOption(optName)&&
[PATCH] return options.hasShortOption(optName)|| }
[PATCH] return options.hasShortOption( optName);
[PATCH] return options.hasShortOption(optName)||
[PATCH] return options.hasRequiredOption(optName);
[PATCH] return options.hasShortOption(optName): false;
[PATCH] return options.hasFlag(optName);
[PATCH] return options.hasUseShortOption(optName);
[PATCH] return options.hasOpt(optName);
[PATCH] return options.hasNoShortOption(optName);
[PATCH] return Options.hasShortOption(optName);
[PATCH] return _options.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName){
[PATCH] returnOptions.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName, true);
[PATCH] return options.hasShortOptionValue(optName);
[PATCH] return super.hasShortOption(optName);
[PATCH] return options.hasSyntheticOption(optName);
[PATCH] return hasShortOption(optName);
[PATCH] return flags.hasShortOption(optName);
[PATCH] return options.hasShort option(optName);
[PATCH] return options.hasSubOption(optName);
[PATCH] return(options.hasShortOption(optName));
[PATCH] return options.hasShortOption(optName);
[PATCH] return options.hasReadOption(optName);
[PATCH] return options.hasAnyOption(optName);
[PATCH] return options.hasShort Option(optName);
[PATCH] return options.hasKey(optName);
[PATCH] return options.hasOneOption(optName);
[PATCH] return Option.hasShortOption(optName);
[PATCH] return options.hasShortOption(optName;
[PATCH] return _hasShortOption(optName);
[PATCH] return options.hasShortOptions(optName);
[PATCH] return options.containsShortOption(optName);
[PATCH] return options.hasEnumOption(optName);
[PATCH] return options._hasShortOption(optName);
[PATCH] return getOptions().hasShortOption(optName);
[PATCH] return attributes.hasShortOption(optName);
[PATCH] return options.hasParseOption(optName);
[PATCH] return options.hasDefaultOption(optName);
[PATCH] return shortOpts.has(optName);
[PATCH] return cmd.hasShortOption(optName);
[PATCH] return options. hasShortOption(optName);
[PATCH] return options.hasShortNameOption(optName);
[PATCH] return s.hasShortOption(optName);
[PATCH] return options.hasCommandOption(optName);
[PATCH] return options.hasShortArgument(optName);
[PATCH] return options.hasIgnoreOption(optName);
[PATCH] return options.hasSingleOption(optName);
