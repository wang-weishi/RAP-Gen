[PATCH] c = in.read();
[PATCH] c = super.readEscape();
[PATCH] c = in.read(); skipSpace(c);
[PATCH] c = readEscapeCharacter();
[PATCH] int c = in.read();
[PATCH] c = readEscape(( char)c);
[PATCH] c = this.in.read();
[PATCH] c = readEscapeCharacter(in, escapeChar);
[PATCH] c =(char)in.read();
[PATCH] c = nextNonWhitespace();
[PATCH] c = readEscape();
[PATCH] c = nextNonWhitespace(( char)c);
[PATCH] c = nextNonWhitespace(readEscapeCharacter());
[PATCH] c = readEscapeChar(in, escapeChar);
[PATCH] c = in.read(); skipWhitespace(c);
[PATCH] c = in.read(); checkWhitespace(c);
[PATCH] c = in.read(); mayHaveSideEffects();
[PATCH] c = in.read(); throw new IOException("");
[PATCH] c = in.read(); isEscaped();
[PATCH] c = in.read(); ensureWhitespace(c);
[PATCH] c = readEscapeChar();
[PATCH] c = in.read(); eatSpace(c);
[PATCH] c = read(( char)c);
[PATCH] c = in.read(); eatWhitespace(c);
[PATCH] c = nextNonWhitespace(readEscape());
[PATCH] c = in.read(); unreadWhitespace(c);
[PATCH] c = nextNonWhitespace(in.read());
[PATCH] c = readEscapeCharacter(( char)c);
[PATCH] c = nextNonWhitespace(in, escapeChar);
[PATCH] c = nextNonWhitespace(in.read();
[PATCH] c = nextNonWhitespace(in, false);
[PATCH] c = _in.read();
[PATCH] c = nextNonWhitespace(readEscapeChar());
[PATCH] c = in.read(); maybeLineBreak();
[PATCH] c = in.read(); maybeEndLine();
[PATCH] c = in.read(); checkDelimiter();
[PATCH] c = nextNonWhitespace(in);
[PATCH] c =(int)in.read();
[PATCH] c = readEscapeCharacter(in, false);
[PATCH] c = parseEscapeCharacter(in, false);
[PATCH] c = read();
[PATCH] c = in.read(); i = 0;
[PATCH] c = in.read(); this.reset();
[PATCH] c = in.read(); checkEscape(c);
[PATCH] c = in.read(); this.skipSpace();
[PATCH] c = Character.toUpperCase(c);
[PATCH] c = in.read(); checkWhitespace();
[PATCH] c = in.read(); discardWhitespace();
[PATCH] c = nextNonWhitespace(in, separator);
[PATCH] c = ~in.read();
[PATCH] c = in.read(); readEscaped();
[PATCH] c = readEscape(true);
[PATCH] c = readEscape(0);
[PATCH] c = readEscape(false);
[PATCH] c =(char)(in.read();
[PATCH] c = in.read(); break;
[PATCH] int c = super.readEscape();
[PATCH] t = in.read();
[PATCH] c = throw new IOException("");
[PATCH] c = readEscapeCharacter(in);
[PATCH] c = readEscape(1);
[PATCH] c = skipSpace(in);
[PATCH] c = readEscapeChar(in);
[PATCH] c = in.read(); consume();
[PATCH] c = _readEscape();
[PATCH] c = in.readEscape();
[PATCH] c = delegate.readEscape();
[PATCH] c = in.skipWS();
[PATCH] c = skipSpace(true);
[PATCH] c = in.read(); }
[PATCH] int c = readEscapeCharacter();
[PATCH] c = input.read();
[PATCH] c = readEscapeSequence();
[PATCH] c =in.read();
[PATCH] c = readEscapeEscapes();
[PATCH] c = parseEscapeCharacter();
[PATCH] c = ins.read();
[PATCH] throw new IOException("");
[PATCH] c = readWhitespace();
[PATCH] c = getNextChar();
[PATCH] c = skipSpace();
[PATCH] illegalChar(c);
[PATCH] c = doRead();
[PATCH] c = readEscapes();
[PATCH] c = readChar();
[PATCH] c = readInt();
[PATCH] c = readNextToken();
[PATCH] convertSurrogate(c);
[PATCH] c = getNextCharacter();
[PATCH] c = readEscaped();
[PATCH] c = readCharacter();
[PATCH] c = parseEscape();
[PATCH] c = readChars();
[PATCH] c = nextEscape();
[PATCH] c = fromChar();
[PATCH] c = readLiteral();
[PATCH] c = next();
[PATCH] c = readUnsignedShort();
[PATCH] c = peek();
[PATCH] c = nextLine();
