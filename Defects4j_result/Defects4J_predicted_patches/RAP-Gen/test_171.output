[PATCH] Preconditions.checkState(first!= null);
[PATCH] Preconditions.checkNotNull(first);
[PATCH] Preconditions.checkState(NodeUtil.isGet(first));
[PATCH] Preconditions.checkArgument(NodeUtil.isGet(first));
[PATCH] n.removeProp(Node.CALL_PROP);
[PATCH] Preconditions.checkState(NodeUtil.isName(first));
[PATCH] n.getFirstChild().detachFromParent();
[PATCH] Preconditions.checkArgument(NodeUtil.isName(first));
[PATCH] Preconditions.checkState(NodeUtil.isCall(first));
[PATCH] n.setLineno(first.getLineno());
[PATCH] n.removeProp(Node.IS_CALL);
[PATCH] Preconditions.checkTrue(NodeUtil.isGet(first));
[PATCH] Preconditions.checkState(first!= null,"Unterminated function");
[PATCH] Preconditions.checkArgument(NodeUtil.isCall(first));
[PATCH] Preconditions.checkNotNull(first,"Expected a value");
[PATCH] Preconditions.checkState(first!= null,"expected a value");
[PATCH] Preconditions.checkState(first!= null,"Not a function");
[PATCH] n.getFirstChild().setString(first.getString());
[PATCH] Preconditions.checkState(first!= null,"Expected a value");
[PATCH] Preconditions.checkState(first!= null,"Expected first child");
[PATCH] Preconditions.checkState(first!= null,"Unterminated method");
[PATCH] n.getFirstChild().detachChildren();
[PATCH] Preconditions.checkState(!first.isQualifiedName());
[PATCH] Preconditions.checkState(isCallOrNew(n));
[PATCH] Preconditions.checkNotNull(first,"Must not be null.");
[PATCH] Preconditions.checkState(isCallOrNew(first));
[PATCH] Preconditions.checkState(first!= null,"Unterminated call");
[PATCH] Preconditions.checkNotNull(first,"must not be null.");
[PATCH] Preconditions.check(NodeUtil.isGet(first));
[PATCH] Preconditions.checkArgument(first!= null);
[PATCH] Preconditions.checkFalse(NodeUtil.isGet(first));
[PATCH] Preconditions.checkState(NodeUtil.isGet(first);
[PATCH] Preconditions.checkOnly(NodeUtil.isGet(first));
[PATCH] Preconditions.checkNotNull(first,"Expected first child.");
[PATCH] n.replaceChild(n.getFirstChild(), first);
[PATCH] Preconditions.checkState(first!= null,"Not reachable");
[PATCH] n.removeProp(Node.ELLIPSIS);
[PATCH] Preconditions.checkState(!first.isVarArgs());
[PATCH] n.removeProp(Node.MOVED_CALL);
[PATCH] Preconditions.checkState(!n.hasChildren());
[PATCH] Preconditions.checkState(!first.isString());
[PATCH] Preconditions.checkState(Type.isGet(first));
[PATCH] n.removeProp(Node.BLOCK_PROP);
[PATCH] Preconditions.checkNotNull(first);
[PATCH] Preconditions.checkState(false,"Not reachable");
[PATCH] n.removeProp(Node.DO_CALL);
[PATCH] Preconditions.checkState(last == null);
[PATCH] n.removeProp(Node.DO_NAME);
[PATCH] n.getFirstChild().setString("");
[PATCH] n.getParent().replaceChild(n, first);
[PATCH] Preconditions.checkState(!first.isName());
[PATCH] Preconditions.checkNotNull(first,"Expected a value");
[PATCH] Preconditions.checkNotNull(first, Token.CALL);
[PATCH] Preconditions.checkState(!first.isCall());
[PATCH] n.removeProp(Node.DO_PROP);
[PATCH] process(n.getFirstChild(), n);
[PATCH] n.setString(first.getString());
[PATCH] n.getLastChild().detachFromParent();
[PATCH] Preconditions.checkState(childCount == 3);
[PATCH] n.detachFromParent();
[PATCH] n.getFirstChild().setString("call");
[PATCH] n.setFirstChild(first);
[PATCH] Preconditions.checkState(childCount == 2);
[PATCH] compiler.reportCodeChange();
[PATCH] Preconditions.checkState(second!= null);
[PATCH] super.annotateCall(n, first);
[PATCH] Preconditions.checkState(first instanceof Token);
[PATCH] n.getParent().removeChild(first);
[PATCH] n.detachChildren();
[PATCH] n.removeProp(Node.CALL);
[PATCH] Preconditions.checkState(first == null);
[PATCH] n.removeChild(first);
[PATCH] parent.replaceChild(n, first);
[PATCH] n.removeProp(Node.BLOCK);
[PATCH] Preconditions.check(first!= null);
[PATCH] n.clearCall();
[PATCH] n.setType(Token.CALL);
[PATCH] n.removeProp(Node.STATIC);
[PATCH] Preconditions.checkNull(first);
[PATCH] super.annotateCall(n);
[PATCH] n.setCall(first);
[PATCH] n.removeFirstChild();
[PATCH] Node next = first.getNext();
[PATCH] addCallAnnotations(n, first);
[PATCH] preconditions.checkNotNull(first);
[PATCH] predicates.checkNotNull(first);
[PATCH] process(n.getFirstChild());
[PATCH] first = first.getNext();
[PATCH] n.setRemove(false);
[PATCH] process(first, n);
[PATCH] n.clearChild();
[PATCH] process(n, first);
[PATCH] n.setIsCall();
[PATCH] n.clearAnnotation();
[PATCH] n.clearChildren();
[PATCH] process(n);
[PATCH] n.clearParent();
[PATCH] process(first);

);
