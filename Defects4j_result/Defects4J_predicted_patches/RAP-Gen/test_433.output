[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedFunctions());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindDeclaredNamesUnique());
[PATCH] compiler.reportCodeChange();
[PATCH] NodeTraversal.traverse(compiler, fnNode, new DuplicatesPredicate());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedNames());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedNamesCallback());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new Predicate());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedNodes());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new RemoveDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindLocalNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindReferences());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindExternFunctions());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new HashSet<String>());
[PATCH] NodeTraversal.traverse(compiler, fnNode, this);
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindReferencedNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new EnsureDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new GetDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new LinkedHashSet<String>());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CheckNamedFunctions());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CheckNamedNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new Callback());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new ProcessAllNodes());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new LabelNameSupplier());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedValues());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindReference());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedNamesFunction());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindExternMethods());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedTypes());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new This());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindTypedFunctions());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new DeleteDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedAliases());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CleanupDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CheckDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindExternExports());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindDeclaredNamesCallback());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new DuplicateNamePredicate());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new Lists());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindReferenceGenerator());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new Caller(), this);
[PATCH] NodeTraversal.traverse(compiler, fnNode, new KeepDeclaredNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindDeclaredNamesFunction());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CheckNamedNames());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new KeepLocalNamesUnique());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new Runner());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CreateLocalNames();
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindReferenceFunctions());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedNamespaces());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindExternExport());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedObjects());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindNamedUnits());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new FindExterns());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CheckCodeChange());
[PATCH] NodeTraversal.traverse(compiler, fnNode, new CreateNamedNames();
[PATCH] NodeTraversal.traverse(compiler, fnNode, new GenerateLocalNames());
[PATCH] compiler.getNodeForCodeInsertion(fnNode);
[PATCH] NodeTraversal.traverse(compiler, fnNode);
[PATCH] compiler.getCompiler().reportCodeChange();
[PATCH] compiler.getNodeCache().remove(fnNode);
[PATCH] Preconditions.checkNotNull(idSupplier);
[PATCH] compiler.getNodeStore().remove(fnNode);
[PATCH] compiler.getNodeSet().remove(fnNode);
[PATCH] nodeSet().clear(); compiler.reportCodeChange();
[PATCH] compiler.getCodingConvention().validate(idSupplier);
[PATCH] compiler.getNodeCache().remove(idSupplier);
[PATCH] compiler.removeNode(fnNode);
[PATCH] compiler.getCodingConvention().normalize(idSupplier);
[PATCH] NodeTraversal.traverse(compiler, n);
[PATCH] compiler.getNodeCache().clear();
[PATCH] compiler.getUniqueNameIdSupplier().reset();
[PATCH] compiler.getCodingConvention().cleanLocalNames();
[PATCH] idSupplier.setIsLocal(true);
[PATCH] idSupplier.setIsLocal();
[PATCH] compiler.removeCodeGeneration(idSupplier);
[PATCH] compiler.removeCodeInsertion(fnNode);
[PATCH] nodeSet().addAll(idSupplier);
[PATCH] compiler.removeCodeInsertion(idSupplier);
[PATCH] compiler.setCodingConvention(idSupplier);
[PATCH] idSupplier.setCount(0);
[PATCH] compiler.getNodeStore().remove();
[PATCH] idSupplier.set(null);
[PATCH] NodeTraversal.traverse(compiler);
[PATCH] markLocalNamesUnique(idSupplier);
[PATCH] compiler.getNodeResolver().resolve();
[PATCH] idSupplier.setEmpty(false);
[PATCH] idSupplier.setEmpty();
[PATCH] nodeSet().remove(fnNode);
[PATCH] compiler.reportCodeChange();
[PATCH] Compiler.reportCodeChange();
[PATCH] compiler.reportCodeChange(); }
[PATCH] makeLocalNames(idSupplier);
[PATCH] Nodes.remove(fnNode);
[PATCH] Collections.sort(idSupplier);
[PATCH] idSupplier.setIsEmpty();
[PATCH] compiler.removeCodeGeneration();
[PATCH] nodeSet().clear();
[PATCH] idSupplier.clear();
[PATCH] idSupplier.get();
