[PATCH] options.messageBundle.setLevel(level);
[PATCH] options.messageBundle.setDefaultLevel(level);
[PATCH] options.messageBundle.setErrorLevel(level);
[PATCH] options.messageBundle.setVerbose(true);
[PATCH] options.messageBundle.setDeprecationWarningLevel(level);
[PATCH] options.messageBundle.setSummaryDetailLevel(summaryDetailLevel);
[PATCH] options.messageBundle.putLevel(level);
[PATCH] options.messageBundle.setlevel(level);
[PATCH] options.messageBundle.setDeprecationLevel(level);
[PATCH] options.messageBundle.setLoggingLevel(level);
[PATCH] options.setLevel(level);
[PATCH] options.messageBundle.setWarningLevel(level);
[PATCH] options.level = level.getLeastSupertype(wLevel);
[PATCH] options.messageBundle.setIsSyntheticBlock(true);
[PATCH] options.messageBundle.setLineBreak(true);
[PATCH] options.messageBundle.setDiagnosticLevel(level);
[PATCH] options.messageBundle.setVerbose(false);
[PATCH] options.messageBundle.setDeprecationInfo(level);
[PATCH] options.messageBundle.setIsSynthetic(true);
[PATCH] options.errorBundle.setLevel(level);
[PATCH] options.messageBundle.setSummaryDetailLevel(level);
[PATCH] options.messageBundle.setDeprecationReason(Level.WARNING);
[PATCH] options.messageBundle.setDefaultWarningLevel(level);
[PATCH] options.messageBundle.setCompilationLevel(level);
[PATCH] options.messageBundle.setErrorCount(0);
[PATCH] options.compilerLevel = level.getLeastSupertype(level);
[PATCH] options.messageBundle.addLevelWarnings(level);
[PATCH] options.addChangeHandler(this);
[PATCH] options.warningLevel = createWarningLevel(level);
[PATCH] options.messageBundle.putDefaultLevel(level);
[PATCH] options.addChangeHandler(wLevel, wLevel);
[PATCH] options.messageBundle.setBase64Variants(getDefaultVariant());
[PATCH] options.addChangeHandler(new ChangeHandler(level));
[PATCH] options.messageBundle.setErrorRenderingOrder(Level.ERROR);
[PATCH] options.messageBundle.push(level.toString());
[PATCH] options.messageBundle.set level(level);
[PATCH] options.messageBundle.setDeprecationInfo(Level.WARNING);
[PATCH] options.warningLevel = new CheckLevel(level);
[PATCH] options.setErrorBundle(createMessageBundle(level));
[PATCH] options.messageBundle.setErrorSummaryDetailLevel(level);
[PATCH] options.loggingLevel = level.getLeastSupertype(level);
[PATCH] options.messageBundle.setBase64(true);
[PATCH] options.messageBundle.setDeprecationWarnings(Level.WARNING);
[PATCH] options.messageBundle.setPriority(Level.HARD);
[PATCH] options.messageBundle.setBase64Variant(level.toString());
[PATCH] options.messageBundle.setDebuggingLevel(level);
[PATCH] options.warningLevel = createWarningLevel(level, wLevel);
[PATCH] options.setWarningLevel(level);
[PATCH] options.addChangeHandler(wLevel);
[PATCH] options.compilerLevel = level.getLeastSupertype(this);
[PATCH] options.messageBundle.addLevel(level);
[PATCH] options.messageBundle.setWARNINGLevel(level);
[PATCH] options.warningLevel = new CheckLevel(level, wLevel);
[PATCH] options.level = level.getLeastSupertype(compilerLevel);
[PATCH] options.setLoggingLevel(level);
[PATCH] options.messageBundle.setStandardDeprecationWarnings(true);
[PATCH] options.messageBundle.setErrorPrintLevel(level);
[PATCH] options.messageBundle.setLineBreak(false);
[PATCH] options.addChangeHandler(new CheckLevelChangeListener(level));
[PATCH] options.level = level.getLeastSupertype(loggingLevel);
[PATCH] options.messageBundle.setBase64Composite(true);
[PATCH] options.messageBundle.setWarnings(warnings);
[PATCH] options.setErrorReporter(new DiagnosticErrorReporter(level));
[PATCH] options.messageBundle.setPriority(Level.MINIMUM);
[PATCH] options.messageBundle.setRequired(true);
[PATCH] options.messageBundle.putWarnings("WARNING","");
[PATCH] options.addChangeHandler(new CheckLevelChangeHandler(level));
[PATCH] options.messageBundle.setErrorRenderingOrder(Level.WARNING);
[PATCH] options.messageBundle.addIdeMode(Level.WARNING);
[PATCH] options.messageBundle.setDeprecationReason(Level.ERROR);
[PATCH] options.messageBundle.setPriority(Level.WARNING);
[PATCH] options.messageBundle.addLineBreak(level.toString());
[PATCH] options.messageBundle.putWarnings(level.toString());
[PATCH] options.messageBundle.addChangeHandler(this);
[PATCH] options.addWarningsGuardLevel(level);
[PATCH] options.messageBundle.setErrorSummaryLevel(level);
[PATCH] options.messageBundle.addIdeMode(level);
[PATCH] options.messageBundle.setRequired(false);
[PATCH] options.level = level.getLeastSupertype(this);
[PATCH] options.addWarningLevel(level);
[PATCH] options.messageBundle.setDeprecationReason(level);
[PATCH] options.messageBundle.setStandardDeprecationWarnings(false);
[PATCH] options.setCompilationLevel(level);
[PATCH] options.messageBundle.putWarnings(level.getErrorName());
[PATCH] options.addChangeHandler(new ChangeHandler());
[PATCH] options.addErrorReporter(new DiagnosticErrorReporter(level));
[PATCH] options.messageBundle.setPriority(level.getPriority());
[PATCH] options.compilerLevel = level.toString();
[PATCH] options.addWarningsGuard(warningLevel);
[PATCH] options.loggingLevel = level.getLeastSupertype(this);
[PATCH] options.messageBundle.setLanguageVersion(version);
[PATCH] options.messageBundle.putWarnings("warning", level);
[PATCH] options.addWarningsGuardWarning("msg.jscomp.warning");
[PATCH] options.addCompilationLevel(level);
[PATCH] options.messageBundle.setInline(true);
[PATCH] options.setBaseWarnings(true);
[PATCH] options.messageBundle.putWarnings(level);
[PATCH] options.messageBundle.setPriority(level);
[PATCH] options.addLevel(level);
[PATCH] options.addWarningsGuard("warning");
