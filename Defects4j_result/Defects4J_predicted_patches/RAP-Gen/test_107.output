[PATCH] Preconditions.checkState(!fnScope.isGlobal());
[PATCH] Preconditions.checkNotNull(fnScope);
[PATCH] Preconditions.checkState(fnScope.isGlobal());
[PATCH] Preconditions.checkArgument(!fnScope.isGlobal());
[PATCH] Preconditions.checkState(!referenced.isEmpty());
[PATCH] Preconditions.checkState(!fnScope.isUnreferenced());
[PATCH] Preconditions.checkState(!fnScope.isDeclared());
[PATCH] Preconditions.checkState(!fnScope.isRoot());
[PATCH] Preconditions.checkArgument(fnScope.isGlobal());
[PATCH] Preconditions.checkState(!fnScope.isReferenced());
[PATCH] Preconditions.checkState(isFunctionScope(fnScope));
[PATCH] Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isVarDeclaration());
[PATCH] Preconditions.checkState(!fnScope.isExtern());
[PATCH] Preconditions.checkState(!fnScope.isLocal());
[PATCH] Preconditions.checkNotNull(fnScope, fnScope.getRootNode());
[PATCH] Preconditions.checkState(isFunctionOrNew(fnScope));
[PATCH] Preconditions.checkState(referenced.size() == 2);
[PATCH] Preconditions.checkState(isFunctionType(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isTopScope());
[PATCH] Preconditions.checkArgument(!fnScope.isDeclared());
[PATCH] Preconditions.checkState(fnScope.isFunctionScope());
[PATCH] Preconditions.checkState(isFunctionDeclaration(fnScope));
[PATCH] Preconditions.checkState(referenced.size() == 1);
[PATCH] Preconditions.checkState(!isFunctionDeclaration(fnScope));
[PATCH] Preconditions.checkState(NodeUtil.isGetOrKey(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isUnknown());
[PATCH] Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isRootNode());
[PATCH] Preconditions.checkState(!fnScope.isEmpty());
[PATCH] Preconditions.checkState(!fnScope.isFunctionDeclaration());
[PATCH] Preconditions.checkState(!fnScope.isFixed());
[PATCH] Preconditions.checkState(!isFunctionOrNew(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isBound());
[PATCH] Preconditions.checkState(NodeUtil.isGetOrSet(fnScope));
[PATCH] Preconditions.checkState(fnScope.getRootNode()!= null);
[PATCH] NodeTraversal.traverse(compiler, fnScope, this);
[PATCH] Preconditions.checkArgument(!fnScope.isUnreferenced());
[PATCH] Preconditions.checkState(!compiler.isNormalized());
[PATCH] Preconditions.checkState(fnScope.isRootNode());
[PATCH] Preconditions.checkState(fnScope.isRoot());
[PATCH] Preconditions.checkState(!fnScope.isActual());
[PATCH] Preconditions.checkState(referenced.size() < 2);
[PATCH] Preconditions.checkState(!fnScope.isUntitled());
[PATCH] Preconditions.checkState(referenced.size() > 1);
[PATCH] Preconditions.checkState(!fnScope.isFunctionType());
[PATCH] Preconditions.checkArgument(NodeUtil.isGetOrKey(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isGlobalType());
[PATCH] Preconditions.checkState(!fnScope.isVarsReferenced());
[PATCH] Preconditions.checkState(!inFunctionScope(fnScope));
[PATCH] Preconditions.checkState(fnScope!= null);
[PATCH] Preconditions.checkState(isFunctionAnonymous(fnScope));
[PATCH] Preconditions.checkArgument(!fnScope.isRoot());
[PATCH] Preconditions.checkState(!fnScope.isInline());
[PATCH] Preconditions.checkState(!fnScope.isOptionalArg());
[PATCH] Preconditions.checkState(NodeUtil.isFunction(fnScope));
[PATCH] Preconditions.checkState(!functionScope.isGlobal());
[PATCH] Preconditions.checkState(!fnScope.inGlobalScope());
[PATCH] Preconditions.checkState(!NodeUtil.isFunction(fnScope));
[PATCH] Preconditions.checkArgument(!referenced.isEmpty());
[PATCH] Preconditions.checkState(!argList.isEmpty());
[PATCH] Preconditions.checkState(! fnScope.isGlobal());
[PATCH] Preconditions.checkState(!isEnteringNewCfgNode(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isActive());
[PATCH] Preconditions.checkState(!fnScope.isVars());
[PATCH] Preconditions.checkState(!isFunctionAnonymous(fnScope));
[PATCH] Preconditions.checkState(isCallSite(fnScope));
[PATCH] Preconditions.checkState(!referenced.containsAll(FunctionScope.ALL));
[PATCH] Preconditions.checkState(!fnScope.isImplicitPrototype());
[PATCH] Preconditions.checkState(referenced.size() == 3);
[PATCH] Preconditions.checkState(!fnScope.inExterns());
[PATCH] Preconditions.checkState(!referenced.contains(fnScope));
[PATCH] Preconditions.checkState(referenced.size() > 0);
[PATCH] Preconditions.checkState(!fnScope.isFunction());
[PATCH] Preconditions.checkState(!unreferenced.isEmpty());
[PATCH] Preconditions.checkState(!fnScope.isParent());
[PATCH] Preconditions.checkState(isCallScope(fnScope));
[PATCH] Preconditions.checkState(!isReferenced());
[PATCH] Preconditions.checkArgument(!fnScope.isReferenced());
[PATCH] Preconditions.checkState(!fnScope.isFunctionPrototypeType());
[PATCH] Preconditions.checkState(!fnScope.isNormalized());
[PATCH] Preconditions.checkState(!fnScope.isAbsolute());
[PATCH] Preconditions.checkState(!fnScope.isExported());
[PATCH] Preconditions.checkState(!isNodeAttached(fnScope));
[PATCH] Preconditions.checkState(!fnScope.isGlobal()){
[PATCH] Preconditions.checkState(!inGlobalScope());
[PATCH] Preconditions.checkState(!fnScope.isFunctionPrototype());
[PATCH] Preconditions.checkState(compiler.isNormalized());
[PATCH] Preconditions.checkState(!fnScope.isVarArgs());
[PATCH] Preconditions.checkState(referenced.isEmpty());
[PATCH] Preconditions.checkState(isGlobal());
[PATCH] Preconditions.checkState(!isGlobal());
[PATCH] Preconditions.checkState(!isPure());
[PATCH] Preconditions.checkState(!isReferenced);
[PATCH] Preconditions.checkNull(fnScope);
[PATCH] Validate.notNull(fnScope);
[PATCH] Preconditions.checkState();
[PATCH] redeclare();
[PATCH] codeChange();
[PATCH] requiresActivation();
