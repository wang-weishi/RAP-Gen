[PATCH] pos.setIndex(initialIndex);
[PATCH] int initialIndex = pos.getIndex();
[PATCH] pos.resetWithIndex(initialIndex);
[PATCH] pos.setIndex(initialIndex + 1);
[PATCH] pos.setIndex(startIndex);
[PATCH] pos.resetWithIndex(startIndex);
[PATCH] final int initialIndex = pos.getIndex();
[PATCH] pos.reset();
[PATCH] pos.resetTo(initialIndex);
[PATCH] pos.reset(initialIndex);
[PATCH] pos.setIndex(startIndex + 1);
[PATCH] double initialIndex = pos.getIndex();
[PATCH] long initialIndex = pos.getIndex();
[PATCH] pos.clearIndex();
[PATCH] intinitialIndex = pos.getIndex();
[PATCH] private int initialIndex = pos.getIndex();
[PATCH] initialIndex = pos.getIndex();
[PATCH] pos.resetWithShared(initialIndex);
[PATCH] pos.setIndex(initialIndex+1);
[PATCH] pos.mark(initialIndex);
[PATCH] pos.setIndex(initialIndex - 1);
[PATCH] num.setIndex(initialIndex);
[PATCH] --pos.setIndex(initialIndex);
[PATCH] pos.resetTo(initialIndex + 1);
[PATCH] this.initialIndex = pos.getIndex();
[PATCH] pos.setIndex(index + 1);
[PATCH] float initialIndex = pos.getIndex();
[PATCH] void initialIndex = pos.getIndex();
[PATCH] pos.resetTo(startIndex);
[PATCH] pos.setEndIndex(initialIndex);
[PATCH] pos.setIndex(initialIndex);
[PATCH] parseAndIgnoreWhitespace(source, pos);
[PATCH] startIndex = pos.getIndex();
[PATCH] parseNextCharacter(source, pos);
[PATCH] @ pos.setIndex(initialIndex);
[PATCH] int initialIndex = pos.getIndex();
[PATCH] ++pos.setIndex(initialIndex);
[PATCH] pos.limit(initialIndex + 1);
[PATCH] char c = skipSpace(source, pos);
[PATCH] pos.resetInto(initialIndex);
[PATCH] pos.reset(startIndex);
[PATCH] int index = pos.getIndex();
[PATCH] int initialIndex = startPos.getIndex();
[PATCH] var initialIndex = pos.getIndex();
[PATCH] pos.resetWithIndex(originalIndex);
[PATCH] -pos.setIndex(initialIndex);
[PATCH] lastNonWhitespace = pos.getIndex();
[PATCH] maxIndex = pos.getIndex();
[PATCH] startPos = pos.getIndex();
[PATCH] negativeIndex = pos.getIndex();
[PATCH] pos.setindex(initialIndex);
[PATCH] pos.resetAfter(initialIndex);
[PATCH] localPos.setIndex(initialIndex);
[PATCH] endIndex = pos.getIndex();
[PATCH] int initialIndex = len.getIndex();
[PATCH] int initialIndex = pos.getIndex(); *
[PATCH] orig.setIndex(initialIndex);
[PATCH] offset = pos.getIndex();
[PATCH] i.setIndex(initialIndex);
[PATCH] index = pos.getIndex();
[PATCH] int initialIndex = getPos().getIndex();
[PATCH] int initialIndex = pos.getIndex(); final
[PATCH] ir.setIndex(initialIndex);
[PATCH] pos.setIndex(initialIndex); *
[PATCH] pos.resetAt(initialIndex);
[PATCH] pos.resetIndex();
[PATCH] exp.setIndex(initialIndex);
[PATCH] pos.setPosition(initialIndex);
[PATCH] pos.setIndex(originalIndex);
[PATCH] nextNonWhitespace(source, pos);
[PATCH] position = pos.getIndex();
[PATCH] u.setIndex(initialIndex);
[PATCH] pos.resetBefore(initialIndex);
[PATCH] cur.setIndex(initialIndex);
[PATCH] pos.mark(startIndex);
[PATCH] pos.resetWithIndex(index);
[PATCH] text.setIndex(initialIndex);
[PATCH] pos.resetByNotNullOrUndefined();
[PATCH] pos.clear();
[PATCH] pos.copyCurrentStructure(num);
[PATCH] pos.seek(initialIndex);
[PATCH] nextToken(source, pos);
[PATCH] num = num.intValue();
[PATCH] stream.seek(initialIndex);
[PATCH] pos.resetInvariant();
[PATCH] nextCharacter(source, pos);
[PATCH] pos.resetAndStart();
[PATCH] ref = pos.getIndex();
[PATCH] setIndex(initialIndex);
[PATCH] pos.resetFromIndex();
[PATCH] int initialIndex = getPos();
[PATCH] pos.resetWithoutWhitespace();
[PATCH] pos.skipChildren();
[PATCH] num.intValue();
[PATCH] pos.resetIterator();
[PATCH] pos.resetTo();
[PATCH] pos.rewind();
[PATCH] pos.next();
[PATCH] num.clear();
[PATCH] [Delete]
