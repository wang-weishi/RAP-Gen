[PATCH] checkNextChar(c);
[PATCH] checkNextCharacter(c);
[PATCH] int i = skipWSOrEnd();
[PATCH] int i = skipSpace(1);
[PATCH] checkLenient();
[PATCH] value = nextNonWhitespace(value);
[PATCH] checkNextChar(c, c);
[PATCH] value = in.read();
[PATCH] checkNextChar(c, value);
[PATCH] checkPeeked();
[PATCH] int i = pos + 1;
[PATCH] checkCurrentChar(c);
[PATCH] boolean negative = isNegative(value);
[PATCH] checkStartPosition(pos);
[PATCH] pos = nextNonWhitespace(pos);
[PATCH] int i = in.read();
[PATCH] pos = skipSpace(1);
[PATCH] checkNextChar('{', c);
[PATCH] int i = nextNonWhitespace();
[PATCH] checkNextChar();
[PATCH] checkNextChar('A');
[PATCH] checkNextChar('T');
[PATCH] checkNextChar('', c);
[PATCH] checkCurrentIndex(pos);
[PATCH] checkNextChar(c,"value");
[PATCH] checkNextChar(c, '\\');
[PATCH] checkNextChar('T', c);
[PATCH] checkNextChar(ch, c);
[PATCH] int i = skipSpace(c);
[PATCH] int i = skipSpace(0);
[PATCH] value = skipSpace(value);
[PATCH] checkStartPos(pos);
[PATCH] int i = peekedNumberLength();
[PATCH] checkState(i < size());
[PATCH] buffer[pos++] = c;
[PATCH] checkChar('\n', c);
[PATCH] checkPeek(i);
[PATCH] pos = pos + 1;
[PATCH] checkNextCharacter();
[PATCH] checkNextChar(';', c);
[PATCH] quickPeek();
[PATCH] checkNextChar('A', c);
[PATCH] checkNextChar('(', c);
[PATCH] int i = readUnsignedShort();
[PATCH] checkNextChar('' + c);
[PATCH] stack[pos++] = c;
[PATCH] checkNextChar('-', c);
[PATCH] checkCurrentPosition(pos);
[PATCH] nextNonWhitespace(c);
[PATCH] pos = skipWSOrEnd();
[PATCH] checkNextChar('B', c);
[PATCH] int i = readUnsignedShort(pos);
[PATCH] parseNextCharacter(c);
[PATCH] boolean negative = isNegated();
[PATCH] checkNextChar(c,"digit");
[PATCH] int i = skipSpace(true);
[PATCH] int i = skipSpace(2);
[PATCH] checkCurrentToken(c);
[PATCH] checkNextChar(c, '-');
[PATCH] checkNextChar(c,"char");
[PATCH] matchNextChar(c);
[PATCH] checkNextChar(c,"character");
[PATCH] checkPeek(1);
[PATCH] checkPeek(i, false);
[PATCH] checkLeadingZeroes();
[PATCH] checkNextName();
[PATCH] int i = peekedLength();
[PATCH] checkStartIndex(pos);
[PATCH] boolean negative = isNegative();
[PATCH] checkNextCharacter('A');
[PATCH] ensureCapacity(1);
[PATCH] matchNextCharacter(c);
[PATCH] checkPeekable();
[PATCH] checkPeeking();
[PATCH] checkPeek(2);
[PATCH] boolean negative = isNegativeValue();
[PATCH] checkIndex(pos);
[PATCH] checkNextChar('{');
[PATCH] checkPos(pos);
[PATCH] checkState(i < limit);
[PATCH] checkNextChar('\n');
[PATCH] pos = skipSpace(i);
[PATCH] int i = readUnsignedShort();
[PATCH] checkMoreGuaranteed();
[PATCH] int i = getOffset();
[PATCH] checkUnsignedShort();
[PATCH] checkPeek(8);
[PATCH] checkNextChar('B');
[PATCH] checkStartPos();
[PATCH] checkNonWhitespace(value);
[PATCH] checkPeekChar(c);
[PATCH] int i = skipSpace();
[PATCH] ensureCapacity(0);
[PATCH] checkToken(c);
[PATCH] checkNextChar('<');
[PATCH] checkPeek();
[PATCH] checkNextChar("");
[PATCH] checkOffset(pos);
[PATCH] pos = getOffset();
[PATCH] checkStartIndex();
