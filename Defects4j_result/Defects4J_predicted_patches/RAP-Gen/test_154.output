[PATCH] result = lvalInt << rvalInt;
[PATCH] result = lvalInt >> rvalInt;
[PATCH] result = lvalInt + rvalInt;
[PATCH] result = lvalInt / rvalInt;
[PATCH] result = lvalInt >>> rvalInt;
[PATCH] result = lvalInt | rvalInt;
[PATCH] result = lvalInt << 1;
[PATCH] result = lvalInt & rvalInt;
[PATCH] result = lvalInt % rvalInt;
[PATCH] result = lvalInt >> 8;
[PATCH] result = lvalInt << 8;
[PATCH] result = lvalInt >> 1;
[PATCH] result = lvalInt & 0x03;
[PATCH] result = lvalInt / 2;
[PATCH] result = lvalInt - rvalInt;
[PATCH] result = lvalInt ^ rvalInt;
[PATCH] result = lvalInt ~rvalInt;
[PATCH] result = lvalInt * rvalInt;
[PATCH] result = lvalInt << 6;
[PATCH] result = lvalInt >> 6;
[PATCH] result = lvalInt >> 32;
[PATCH] result = lvalInt >> 2;
[PATCH] result = rvalInt << rvalInt;
[PATCH] result = lvalInt & 0xff;
[PATCH] result = lvalInt += rvalInt;
[PATCH] result = lvalInt << 4;
[PATCH] result = lvalInt >> 16;
[PATCH] result = lvalInt >> 4;
[PATCH] result = lvalInt << 2;
[PATCH] result = lvalInt |= rvalInt;
[PATCH] result = lvalInt << rshiftInt;
[PATCH] result = lvalInt << rintInt;
[PATCH] result = lvalInt / 4;
[PATCH] result = lvalInt >= rvalInt;
[PATCH] result = lvalInt << 16;
[PATCH] result = lvalInt << rvalInt;
[PATCH] result = lvalInt >> rshiftInt;
[PATCH] result = lvalInt << 32;
[PATCH] result = lvalInt & RES_MASK;
[PATCH] result = lvalInt >> rint;
[PATCH] result = lvalInt / 8;
[PATCH] result = uvalInt << rvalInt;
[PATCH] result = lvalInt >> 256;
[PATCH] result = lvalInt >> 64;
[PATCH] result = lvalInt <<rvalInt;
[PATCH] result = lvalIntURSH;
[PATCH] result = lvalInt << rzInt;
[PATCH] result = lvalInt / 1000;
[PATCH] result = left << rvalInt;
[PATCH] result = lvalInt>>> rvalInt;
[PATCH] result = lvalInt<<rvalInt;
[PATCH] result = lvalInt >> 0;
[PATCH] result = lvalInt << rlimInt;
[PATCH] result = lvalInt & 0xc;
[PATCH] result = lvalInt << rkeyInt;
[PATCH] result = lvalInt / 6;
[PATCH] result = lvalInt & 0xffff;
[PATCH] result = lvalInt || rvalInt;
[PATCH] result = lvalInt < rvalInt;
[PATCH] result = lvalInt << 3;
[PATCH] result = lvalInt >> rhsInt;
[PATCH] result = lvalInt URSH;
[PATCH] result = lvalInt >>64;
[PATCH] result = lvalInt / 32;
[PATCH] result = lvalInt + 6;
[PATCH] result = lvalInt / 10;
[PATCH] result = lvalInt >> 14;
[PATCH] result = lvalInt>> rvalInt;
[PATCH] result = valInt << rvalInt;
[PATCH] result = lvalInt >> 1000;
[PATCH] result = lvalInt & 1;
[PATCH] result = lvalInt << 64;
[PATCH] result = lvalInt << 256;
[PATCH] result = lvalInt << 15;
[PATCH] result = lvalInt >> RES_SHIFT;
[PATCH] result = lvalInt + 32;
[PATCH] result = lvalInt + 1;
[PATCH] result = lvalInt >> 15;
[PATCH] result = lvalInt && rvalInt;
[PATCH] result = lvalInt urInt;
[PATCH] result = lvalInt <<64;
[PATCH] result = lvalInt << RES_SHIFT;
[PATCH] result = lvalInt / 3;
[PATCH] result = lvalInt >> 26;
[PATCH] result = lvalInt >> 10;
[PATCH] result = lvalInt / 16;
[PATCH] result = lvalInt << 0;
[PATCH] result = lvalInt &URSH;
[PATCH] result = lvalInt << rint;
[PATCH] result = lvalInt >> rvalInt();
[PATCH] result = lvalInt << RES_BITS;
[PATCH] result = lvalInt << rvalInt);
[PATCH] result = lvalInt << rvalInt,
[PATCH] result = lvalInt << rvalInt();
[PATCH] result = right << rvalInt;
[PATCH] result = lvalInt << rvalInt;
[PATCH] result = lvalInt >> rvalInt;
[PATCH] result = 0;
[PATCH] result = left;
[PATCH] result =
