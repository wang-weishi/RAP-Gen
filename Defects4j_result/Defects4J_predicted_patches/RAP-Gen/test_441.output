[PATCH] case Token.NULL: return newHasLocalResult(value);
[PATCH] case Token.GETELEM: return!isImmutableValue(value);
[PATCH] case Token.NULL: return!isNullValue(value);
[PATCH] case Token.NULL : return newHasLocalResult(value);
[PATCH] case Token.UNSAFE: return!isImmutableValue(value);
[PATCH] default: throw new IllegalArgumentException("");
[PATCH] case Token.NULL: return false;
[PATCH] case Token.UNSAFE: return isImmutableValue(value);
[PATCH] case Token.THIS: return!isImmutableValue(value);
[PATCH] case Token.NULL: return newHasLocalResult(value, false);
[PATCH] case Token.NULL: return isNullValue(value);
[PATCH] case Token.NUMBER: return isImmutableValue(value);
[PATCH] case Token.NULL: return!NodeUtil.isNull(value);
[PATCH] case Token.NULL: return!newHasLocalResult(value);
[PATCH] case Token.NULL: return newHasLocalResult(value, null);
[PATCH] case Token.NULL : return!isNullValue(value);
[PATCH] case Token.THIS: return isImmutableValue(value);
[PATCH] case Token.NULL: return!isImmutableValue(value);
[PATCH] case Token.GETELEM: return isImmutableValue(value);
[PATCH] case Token.NULL: return isHasLocalResult(value);
[PATCH] case Token.VOID: return!isImmutableValue(value);
[PATCH] case Token.UNSAFE: return isSafeAssign(value, false);
[PATCH] case Token.CALL: return!isImmutableValue(value);
[PATCH] case Token.NULL: return locals.apply(value == null);
[PATCH] case Token.NULL: return locals == null || locals.isEmpty();
[PATCH] case Token.NUMBER: return!isImmutableValue(value);
[PATCH] case Token.NULL: return value == null;
[PATCH] case Token.NULL: return!isNullOrUndefined(value);
[PATCH] case Token.NULL: return isNull();
[PATCH] case Token.NULL: return locals.apply(value);
[PATCH] case Token.NULL: return locals == null;
[PATCH] case Token.NULL: case Token.TRUE: return false;
[PATCH] case Token.REF_SPECIAL: return isReference(value);
[PATCH] case Token.NULL: return!isNullType(value);
[PATCH] case Token.NULL: return locals.get(value)== null;
[PATCH] case Token.NULL : return isNullValue(value);
[PATCH] case Token.NULL: return newHasLocalResult(value, true);
[PATCH] case Token.NULL: return isNullType(value);
[PATCH] case Token.BITNOT: return!isImmutableValue(value);
[PATCH] case Token.NULL: return null == value;
[PATCH] case Token.NOT: return!isImmutableValue(value);
[PATCH] case Token.DEC: return!isImmutableValue(value);
[PATCH] case Token.NOT : return!isImmutableValue(value);
[PATCH] case Token.NULL : return!NodeUtil.isNull(value);
[PATCH] case Token.NULL : return!isImmutableValue(value);
[PATCH] case Token.BOOLEAN: return isImmutableValue(value);
[PATCH] case Token.NULL : return locals.apply(value);
[PATCH] case Token.NO: return newHasLocalResult(value);
[PATCH] case Token.NULL: return locals.isEmpty();
[PATCH] case Token.GETELEM: return!isLiteralValue(value);
[PATCH] case Token.NULL: return!isNull(value);
[PATCH] case Token.VOID: return isImmutableValue(value);
[PATCH] case Token.NULL: return null == value || isNull(value);
[PATCH] case Token.NULL : return!isNullOrUndefined(value);
[PATCH] case Token.NULL: return newValueHasLocalResult(value);
[PATCH] case Token.NULL: return locals.get(value)!= null;
[PATCH] case Token.BOOLEAN: return!isImmutableValue(value);
[PATCH] case Token.NULL: case Token.VOID: return false;
[PATCH] default: return isImmutableValue(value);
[PATCH] case Token.NONNULL: return isImmutableValue(value);
[PATCH] case Token.NULL: return locals.apply(null);
[PATCH] case Token.NULL : return newHasLocalResult(value, false);
[PATCH] case Token.NULL : return isNullType(value);
[PATCH] case Token.NULL: return isNullOrUndefined(value);
[PATCH] case Token.GETELEM: return locals.apply(value);
[PATCH] case Token.NULL : return locals == null || locals.isEmpty();
[PATCH] case Token.CALL: return!isExpressionNode(value);
[PATCH] case Token.CALL: return!isImmutableFunction(value);
[PATCH] case Token.NULL: return hasLocalResult(value);
[PATCH] case Token.UNSAFE: return isSafeAssign(value, true);
[PATCH] case Token.CALL: return isCall(value, locals);
[PATCH] case Token.NULL: return isImmutableValue(value);
[PATCH] case Token.NULL: return locals == null || locals.isNull();
[PATCH] case Token.NULL: return isNull(value);
[PATCH] case Token.NULL: return newHasLocalResult(value, value);
[PATCH] case Token.UNSAFE: case Token.NULL: return false;
[PATCH] case Token.CALL: return!isImmutableCall(value);
[PATCH] case Token.NUMBER : return isImmutableValue(value);
[PATCH] case Token.NULL : return!isNullType(value);
[PATCH] case Token.NULL : return locals.get(value)== null;
[PATCH] case Token.CALL: return isCall(value)? true : false;
[PATCH] case Token.NULL: return locals.get(value == null);
[PATCH] case Token.NULL: return!isNull();
[PATCH] case Token.CALL: return locals.apply(value);
[PATCH] case Token.NULL : return newHasLocalResult(value, null);
[PATCH] case Token.NULL : return value == null;
[PATCH] case Token.NULL : return locals == null;
[PATCH] case Token.NULL : return false;
[PATCH] case Token.NULL: case Token.UNSAFE: return false;
[PATCH] case Token.NULL: return newHasLocalResult(value,"null");
[PATCH] case Token.NULL : case Token.TRUE: return false;
[PATCH] case Token.CALL: return isCall(value);
[PATCH] case Token.NULL : return locals.isEmpty();
[PATCH] case Token.NULL: return isNoType(value);
[PATCH] case String.valueOf(value)== null;
[PATCH] case Token.NULL : return isNull();
[PATCH] case Token.NULL : return locals.apply(null);
[PATCH] case Token.GETELEM: return true;
[PATCH] default: throw new IllegalStateException("");
[PATCH] case Token.NULL : return null == value;
