[PATCH] popStack();
[PATCH] popStackToClose();
[PATCH] pushToFront(el);
[PATCH] baseUriSetFromDoc = true;
[PATCH] Preconditions.checkNotNull(el);
[PATCH] baseUriSetFromDoc = false;
[PATCH] baseUri.appendChild(el);
[PATCH] el.parent().removeChild(base);
[PATCH] compiler.reportCodeChange();
[PATCH] Preconditions.checkNotNull(startTag);
[PATCH] root.appendChild(el);
[PATCH] popStackToUndo(stack);
[PATCH] popStackToClose(stack.size());
[PATCH] baseUri.append(el);
[PATCH] Validate.notNull(startTag);
[PATCH] builder.appendToFront(el);
[PATCH] parent.appendChild(el);
[PATCH] el.setBaseUri(baseUri);
[PATCH] lastTag = startTag.getPrevious();
[PATCH] body().append(el.html());
[PATCH] popStackToCollapse();
[PATCH] addToFront(el);
[PATCH] getRoot().appendChild(el);
[PATCH] popStackToUndo(stack, false);
[PATCH] lastTag = el.tagName();
[PATCH] parent.removeChild(el);
[PATCH] el.setParentNode(parent);
[PATCH] pendingTableCharacters = Lists.newArrayList();
[PATCH] body().append(el);
[PATCH] parsingElements.add(el);
[PATCH] popStackToUndo(stack.size());
[PATCH] Preconditions.checkNotNull(baseUri);
[PATCH] htmlBuilder.appendToFront(el);
[PATCH] popStackToUndo(stack, true);
[PATCH] lastTag = startTag.getParent();
[PATCH] el.parent(baseUri);
[PATCH] el.parent = el.parent();
[PATCH] validationElements.add(el);
[PATCH] pendingTableCharacters.add(el);
[PATCH] dirtyElements.add(el);
[PATCH] popStackToClose(stack, false);
[PATCH] filterStack(el);
[PATCH] el.parent().removeChild(root);
[PATCH] el.setTag(startTag);
[PATCH] popStackToClose(stack);
[PATCH] element = el.parent();
[PATCH] popStackToUndo(stack, el);
[PATCH] pop();
[PATCH] filterStack(el, startTag);
[PATCH] el.appendChild(startTag);
[PATCH] popStackToRemove(el);
[PATCH] root.appendChild(el, baseUri);
[PATCH] Validate.notNull(el);
[PATCH] popStackToUndo(el);
[PATCH] el.setParentNode(root);
[PATCH] super.appendChild(el);
[PATCH] popStackToClose(el);
[PATCH] trimTrailingWhitespace(el);
[PATCH] el.parent().appendChild(this);
[PATCH] removeLastTag(startTag);
[PATCH] body().append(el.htmlText());
[PATCH] el.parent().appendChild(root);
[PATCH] el.parent().appendChild(base);
[PATCH] popStackToFollow(el);
[PATCH] el.parent().removeContent();
[PATCH] frontElement(el);
[PATCH] filterStackByTag(el);
[PATCH] pushCurrentElement(el);
[PATCH] popStackToIgnore(el);
[PATCH] popStackToClose(stack, true);
[PATCH] element.appendChild(el);
[PATCH] addChangeHandler(el);
[PATCH] removeTag(startTag);
[PATCH] frontElement.append(el);
[PATCH] popStackFromStack(stack);
[PATCH] el.append(startTag);
[PATCH] popStackToThrow(el);
[PATCH] appendToFront(el);
[PATCH] popStackToRemove();
[PATCH] popStackToDispose();
[PATCH] pushToParent(el);
[PATCH] popStackToPrune();
[PATCH] push(el);
[PATCH] builder.append(el);
[PATCH] popStackToUndo();
[PATCH] popStackToRun();
[PATCH] clearStack();
[PATCH] reset();
[PATCH] stack.clear();
[PATCH] filter.accept(el);
[PATCH] backStack.clear();
[PATCH] pushTop(el);
[PATCH] popContainingElement();
[PATCH] redeclare();
[PATCH] init();
[PATCH] nonStack(el);
[PATCH] popStackFromStack();
[PATCH] popContainingTag();
[PATCH] checkInvariant();
[PATCH] invalidate();
